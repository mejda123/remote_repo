CREATE OR REPLACE PACKAGE BODY "ADMFTH"."NAT_FTTH_OI" is


  -- AUTHOR  : YAMARGAN
  -- CREATED : 28/11/2014 12:00:12
  -- PURPOSE : PACKAGE NATIF DES ECHANGES OI VERSION 2.1 & 2.2 & 3.0 & 3.1

--------------------------------------------------------------
--Recuperation de l'operateur
--------------------------------------------------------------
PROCEDURE GEN_TRANSFER_OK(P_TRT_IFC_ID NUMBER)IS
/*CURSOR C_IFC_OUT IS
 SELECT DISTINCT NOMIFC AS NOMINT
   FROM V_FILE_IO
  WHERE FILE_ID_SRC IN (SELECT t.FILE_ID
                          FROM FILE_IO t
                         WHERE t.ID_TRT_IFC = P_TRT_IFC_ID
                           AND ROWNUM <2)
    AND TYPFIO = 'OUT'
    AND NOMIFC LIKE '%SIG%';*/
BEGIN
/*  FOR D_IFC_OUT IN C_IFC_OUT LOOP
    pkg_ifc.gen_transfert_ok(D_IFC_OUT.NOMINT,NULL);
    pkg_ifc.transferer(D_IFC_OUT.NOMINT);
  END LOOP;*/
  NULL;
END;

--------------------------------------------------------------
-- Generation du rebond
--------------------------------------------------------------
PROCEDURE GEN_REBOND(P_NOMIFC  IN IFC.NOMIFC%TYPE,
                     P_NOMFIC  IN VARCHAR2,
                     P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                     P_IDPM    IN PM.IDPM%TYPE DEFAULT NULL) IS
vId_Preparation    NUMBER;
v_Fileio_OUT       NUMBER;

CURSOR C_INFO_IFC(vFile_id NUMBER) IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = vFile_id;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
vPartenaire VARCHAR2(10);

CURSOR C_GET_PART_FLX(P_CODOI REF_OI.COD_OI%TYPE) IS
  SELECT oi_prm.COD_PART_FLUX
    FROM REF_OI_PRM oi_prm
   WHERE oi_prm.COD_OI = P_CODOI
     AND oi_prm.obs = 0;
R_GET_PART_FLX C_GET_PART_FLX%ROWTYPE;
vCod_oi REF_OI.COD_OI%TYPE;
vArchive    NUMBER;
BEGIN
    IF P_NOMIFC IN ('FTTH_SIO2_CRMADPM_OUT',
                    'FTTH_SIO2_IPE_OUT',
                    'FTTH_SIO2_CPN_OUT',
                    'FTTH_SIO2_ARNROPM_OUT',
                    'FTTH_SIO2_CRMADNROPM_OUT') /*('FTTH_SIO2_CRMADPM_OUT','FTTH_SIO2_FT_MAD_OUT','FTTH_SIO2_SFR_MAD_OUT',
                    'FTTH_SIO2_AXNE_MAD_OUT','FTTH_SIO2_FREE_MAD_OUT','FTTH_SIO2_COVA_MAD_OUT',
                    'FTTH_SIO2_ALTI_MAD_OUT','FTTH_SIO2_TDF_MAD_OUT','FTTH_SIO2_SMP_MAD_OUT',
                    'FTTH_SIO2_IPE_OUT','FTTH_SIO2_SMP_IPE_OUT','FTTH_SIO2_TDF_IPE_OUT',
                    'FTTH_SIO2_ALTI_IPE_OUT','FTTH_SIO2_COVA_IPE_OUT','FTTH_SIO2_FREE_IPE_OUT',
                    'FTTH_SIO2_AXNE_IPE_OUT','FTTH_SIO2_SFR_IPE_OUT','FTTH_SIO2_FT_IPE_OUT',
                    'FTTH_SIO2_CPN_OUT','FTTH_SIO2_OF_CPN_OUT','FTTH_SIO2_AXNE_CPN_OUT',
                    'FTTH_SIO2_COVA_CPN_OUT','FTTH_SIO2_ALTI_CPN_OUT','FTTH_SIO2_TDF_CPN_OUT',
                    'FTTH_SIO2_SMP_CPN_OUT','FTTH_SIO2_ARNROPM_OUT','FTTH_SIO2_OF_ARNRO_OUT',
                    'FTTH_SIO2_OFC_ARNRO_OUT','FTTH_SIO2_SFR_ARNRO_OUT','FTTH_SIO2_AXNE_ARNRO_OUT',
                    'FTTH_SIO2_COVA_ARNRO_OUT','FTTH_SIO2_ALTI_ARNRO_OUT','FTTH_SIO2_TDF_ARNRO_OUT',
                    'FTTH_SIO2_SMP_ARNRO_OUT','FTTH_SIO2_CRMADNROPM_OUT','FTTH_SIO2_OF_MADNRO_OUT',
                    'FTTH_SIO2_OFC_MADNRO_OUT','FTTH_SIO2_SFR_MADNRO_OUT','FTTH_SIO2_AXNE_MADNRO_OUT',
                    'FTTH_SIO2_COVA_MADNRO_OUT','FTTH_SIO2_ALTI_MADNRO_OUT','FTTH_SIO2_TDF_MADNRO_OUT',
                    'FTTH_SIO2_SMP_MADNRO_OUT','FTTH_SIO2_OF_CMDNRO_OUT','FTTH_SIO2_OFC_CMDNRO_OUT',
                    'FTTH_SIO2_SFR_CMDNRO_OUT','FTTH_SIO2_AXNE_CMDNRO_OUT','FTTH_SIO2_COVA_CMDNRO_OUT',
                    'FTTH_SIO2_ALTI_CMDNRO_OUT','FTTH_SIO2_TDF_CMDNRO_OUT','FTTH_SIO2_SMP_CMDNRO_OUT',
                    'FTTH_SIO2_SIEA_IPE_OUT','FTTH_SIO2_SIEA_MAD_OUT','FTTH_SIO2_SIEA_CPN_OUT',
                    'FTTH_SIO2_SIEA_ARNRO_OUT','FTTH_SIO2_SIEA_MADNRO_OUT','FTTH_SIO2_SIEA_CMDNRO_OUT',
                    'FTTH_SIO2_SFR_PM_ELIG_OUT')*/ THEN
      vArchive := 0;
    ELSE
      vArchive := 1;
    END IF;
    CMN_IFC.GENERER_PREPARATION(P_ID_PREPARATION => vId_Preparation);

    CMN_IFC.ADD_FILE_PREPARATION(P_ID_PREPARATION => vId_Preparation,
                                 P_FILE_ID_SRC => P_FILE_ID,
                                 P_INTERFACE => P_NOMIFC,
                                 P_NOM_FIC => P_NOMFIC,
                                 P_EMETTEUR => 'REBOND',
                                 P_FILE_ID => v_Fileio_OUT);

     NAT_IFC_TRT.UPDATE_LIBVAL2('NOM_FIC_OUT',P_NOMFIC,P_FILE_ID);
     NAT_IFC_TRT.SET_FILE_ID_SRC(v_Fileio_OUT,P_FILE_ID);
     CMN_IFC.GENERER_INTERFACE(P_NOMIFC,
                               vArchive,
                               NULL,
                               vId_Preparation);

  IF P_NOMIFC IN ('FTTH_REBOND_CRINFOSYN_HB','FTTH_REBOND_CRMADPM_HB') THEN
    vPartenaire := 'SFR';
  ELSE
    vCod_oi := GET_OI(P_FILE_ID);
    OPEN C_GET_PART_FLX(vCod_oi);
    FETCH C_GET_PART_FLX INTO R_GET_PART_FLX;
    vPartenaire := R_GET_PART_FLX.COD_PART_FLUX;
    CLOSE C_GET_PART_FLX;
  END IF;

  OPEN C_INFO_IFC(v_Fileio_OUT);
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => v_Fileio_OUT,
                       P_TYP_IFC  => 'OUT',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => P_IDPM,
                       P_CODOI    => NULL,
                       P_COD_PART => vPartenaire,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);

END;

---------------------------------------------------------------------
-- Historisation des adresses supprimées
--------------------------------------------------------------------
PROCEDURE HIS_ADR_IMM_OI_SUP(P_CODOI  IN ADR_IMM_OI.CODOI%TYPE,
                             P_TYPZON IN ADR_IMM_OI.TYPZON%TYPE) IS
BEGIN
  INSERT INTO ADR_IMM_OI_SUP (REFERENCEPM,
                              IMM_ID,
                              IDENTIFIANTIMMEUBLE,
                              CODERIVOLIIMMEUBLE,
                              CODEINSEEIMMEUBLE,
                              CODEPOSTALIMMEUBLE,
                              VILLEIMMEUBLE,
                              CODEADRESSEIMMEUBLE,
                              TYPEVOIEIMMEUBLE,
                              NOMVOIEIMMEUBLE,
                              NUMEROVOIEIMMEUBLE,
                              COMPLEMENTNUMEROVOIEIMMEUBLE,
                              BATIMENTIMMEUBLE,
                              NOMBRELOGEMENTSINFOPREALABLES,
                              ETATIMMEUBLE,
                              ETATPM,
                              DATEINSTALLATIONPM,
                              CODERIVOLIPM,
                              CODEINSEEPM,
                              CODEPOSTALPM,
                              VILLEPM,
                              CODEADRESSEPM,
                              TYPEVOIEPM,
                              NOMVOIEPM,
                              NUMEROVOIEPM,
                              COMPLEMENTVOIEPM,
                              DATE_IMP,
                              FILE_ID,
                              BATIMENTPM,
                              CODOI,
                              TYPZON,
                              DATENVOSSFAI,
                              NOMBREPMTECHNIQUES,
                              TYPEIMMEUBLE,
                              TYPEPROJECTIONGEOGRAPHIQUE,
                              COORDONNEEPMX,
                              COORDONNEEPMY,
                              COORDONNEEIMMEUBLEX,
                              COORDONNEEIMMEUBLEY,
                              TYPEZONE,
                              BLACKLIST,
                              USRBLKUNI,
                              DATBLKUNI,
                              MAJ_OSSF,
                              ETAIMMSIR,
                              SRCADR,
                              DATSUP,
                              FILE_ID_SRC_SUP,
                              ACCORDGESTIONNAIREIMMEUBLE,
                              HEXABTL,
                              DATEMAJHEXABTL,
                              FROM_ZSP,
                              TYPEINGENIERIE,
                              DATECABLAGEADRESSE,
                              TYPRACCOPBPTO,
                              TYPPBO,
                              DATEMISEENSERVICECOMMERCIALEPM,
                              DATMESCOMIMM,
                              DATDEBACPTCMDACSS,
                              TYPEEMPLACEMENTPM,
                              ELIG_RULE,
                              ADR_IMM_OI_ID,
                              DAT_MAX_ELIG_RUL,
                              CODEHEXACLEVOIE)

                      (SELECT a.REFERENCEPM,
                              a.IMM_ID,
                              a.IDENTIFIANTIMMEUBLE,
                              a.CODERIVOLIIMMEUBLE,
                              a.CODEINSEEIMMEUBLE,
                              a.CODEPOSTALIMMEUBLE,
                              a.VILLEIMMEUBLE,
                              a.CODEADRESSEIMMEUBLE,
                              a.TYPEVOIEIMMEUBLE,
                              a.NOMVOIEIMMEUBLE,
                              a.NUMEROVOIEIMMEUBLE,
                              a.COMPLEMENTNUMEROVOIEIMMEUBLE,
                              a.BATIMENTIMMEUBLE,
                              a.NOMBRELOGEMENTSINFOPREALABLES,
                              a.ETATIMMEUBLE,
                              a.ETATPM,
                              a.DATEINSTALLATIONPM,
                              a.CODERIVOLIPM,
                              a.CODEINSEEPM,
                              a.CODEPOSTALPM,
                              a.VILLEPM,
                              a.CODEADRESSEPM,
                              a.TYPEVOIEPM,
                              a.NOMVOIEPM,
                              a.NUMEROVOIEPM,
                              a.COMPLEMENTVOIEPM,
                              a.DATE_IMP,
                              a.FILE_ID,
                              a.BATIMENTPM,
                              a.CODOI,
                              a.TYPZON,
                              a.DATENVOSSFAI,
                              a.NOMBREPMTECHNIQUES,
                              a.TYPEIMMEUBLE,
                              a.TYPEPROJECTIONGEOGRAPHIQUE,
                              a.COORDONNEEPMX,
                              a.COORDONNEEPMY,
                              a.COORDONNEEIMMEUBLEX,
                              a.COORDONNEEIMMEUBLEY,
                              a.TYPEZONE,
                              a.BLACKLIST,
                              a.USRBLKUNI,
                              a.DATBLKUNI,
                              a.MAJ_OSSF,
                              a.ETAIMMSIR,
                              a.SRCADR,
                              a.DATSUP,
                              a.FILE_ID_SRC_SUP,
                              a.ACCORDGESTIONNAIREIMMEUBLE,
                              a.HEXABTL,
                              a.DATEMAJHEXABTL,
                              a.FROM_ZSP,
                              a.TYPEINGENIERIE,
                              a.DATECABLAGEADRESSE,
                              a.TYPRACCOPBPTO,
                              a.TYPPBO,
                              a.DATEMISEENSERVICECOMMERCIALEPM,
                              a.DATMESCOMIMM,
                              a.DATDEBACPTCMDACSS,
                              a.TYPEEMPLACEMENTPM,
                              a.ELIG_RULE,
                              a.ADR_IMM_OI_ID,
                              a.DAT_MAX_ELIG_RUL,
                              a.CODEHEXACLEVOIE
                                FROM ADR_IMM_OI a
                               WHERE a.CODOI  = P_CODOI
                                 AND a.TYPZON = P_TYPZON
                                 AND a.ETAIMMSIR = 'S'
                                 AND a.ETATIMMEUBLE= 'DEPLOYE');

  DELETE FROM ADR_IMM_OI a
        WHERE a.CODOI  = P_CODOI
          AND a.TYPZON = P_TYPZON
          AND a.ETAIMMSIR = 'S';
END;


--------------------------------------------------------------
-- insertion des informations de supervision avant traitement
-- %param P_CODOI      Code de l'OI
-- %param P_TYPZON     Type de zone
-- %param P_NBREFIPEO  Nombre de ligne dans la réf IPE avt TRT
-- %Param P_NBADRAO    Nombre adresse en ajout dans la base adresses avant TRT
-- %Param P_NBADRMO    Nombre adresse en modification ds la BA avant trt
-- %Param P_NBADRSO    Nombre adr en SUppression dans la BA avant TRT
-- %Param P_NBADROSSMO Nombre adr dans l'import FULL OSS
-- %Param P_NBADROSSSO Nombre adre dans l'import delta en suppression
-- %Param P_FILE_ID    Identifiant du fichier qui a déclencher la supervision
--------------------------------------------------------------
PROCEDURE PRE_TRT_SPVION_IPE(P_CODOI      IN REF_OI.COD_OI%TYPE,
                             P_TYPZON     IN VARCHAR2,
                             P_FILE_ID    IN FILE_IO.FILE_ID%TYPE) IS
-- Nombre de lignes dans le référentiel IPE pour l'OI AVANT chargement
CURSOR C_NBREFIPEO IS
  SELECT COUNT(1) AS NBREFIPEO
    FROM IPE i
   WHERE i.CODOI  = P_CODOI
     AND i.TYPZON = P_TYPZON
     AND (i.FROM_ZSP = 0 OR i.FROM_ZSP IS NULL)
     AND i.FILE_ID   = (SELECT MAX(s.FILE_ID)
                          FROM SPVION_IPE s
                         WHERE s.CODOI = P_CODOI
                           AND s.TYPZON = P_TYPZON
                           AND s.DATTRT IS NOT NULL
                           AND s.NOK_TO_GEN_ELIG = 0);
R_NBREFIPEO C_NBREFIPEO%ROWTYPE;
CURSOR C_NBREFIPEOZSP IS
  SELECT COUNT(1) AS NBREFIPEO
    FROM IPE i
   WHERE i.CODOI  = P_CODOI
     AND i.FROM_ZSP = 1
     AND i.FILE_ID  = (SELECT MAX(s.FILE_ID)
                          FROM SPVION_IPE s
                         WHERE s.CODOI  = P_CODOI
                           AND s.TYPZON = 'ZSP'
                           AND s.DATTRT IS NOT NULL
                           AND s.NOK_TO_GEN_ELIG = 0);
R_NBREFIPEOZSP C_NBREFIPEOZSP%ROWTYPE;
vNBREFIPEO  NUMBER;
-- Nombre d'adresses en AJOUT dans la base adresses AVANT chargement
CURSOR C_NBADRAO IS
  SELECT COUNT(1) AS NBADRAO
    FROM ADR_IMM_OI adr
   WHERE adr.CODOI  = P_CODOI
     AND adr.TYPZON = P_TYPZON
     AND adr.ETAIMMSIR = 'A'
     AND (adr.FROM_ZSP = 0 OR adr.FROM_ZSP IS NULL) ;
R_NBADRAO C_NBADRAO%ROWTYPE;
CURSOR C_NBADRAOZSP IS
  SELECT COUNT(1) AS NBADRAO
    FROM ADR_IMM_OI adr
   WHERE adr.CODOI     = P_CODOI
     AND adr.FROM_ZSP  = 1
     AND adr.ETAIMMSIR = 'A';
R_NBADRAOZSP C_NBADRAOZSP%ROWTYPE;
vNBADRAO    NUMBER;
-- Nombre d'addresses en MODIFICATION dans la base adresses AVANT chargement
CURSOR C_NBADRMO IS
  SELECT COUNT(1) AS NBADRMO
    FROM ADR_IMM_OI adr
   WHERE adr.CODOI     = P_CODOI
     AND adr.TYPZON    = P_TYPZON
     AND adr.ETAIMMSIR = 'M'
     AND (adr.FROM_ZSP = 0 OR adr.FROM_ZSP IS NULL) ;
R_NBADRMO C_NBADRMO%ROWTYPE;
CURSOR C_NBADRMOZSP IS
  SELECT COUNT(1) AS NBADRMO
    FROM ADR_IMM_OI adr
   WHERE adr.CODOI     = P_CODOI
     AND adr.FROM_ZSP  = 1
     AND adr.ETAIMMSIR = 'M';
R_NBADRMOZSP C_NBADRMOZSP%ROWTYPE;
vNBADRMO    NUMBER;
-- Nombre d'addresses en SUPPRESSION dans la base adresses AVANT chargement avec IDPM
CURSOR C_NBADRSO IS
  SELECT COUNT(1) AS NBADRSO
    FROM ADR_IMM_OI adr
   WHERE adr.CODOI     = P_CODOI
     AND adr.TYPZON    = P_TYPZON
     AND adr.ETAIMMSIR = 'S'
     AND adr.REFERENCEPM IS NOT NULL
     AND (adr.FROM_ZSP = 0 OR adr.FROM_ZSP IS NULL) ;
R_NBADRSO C_NBADRSO%ROWTYPE;
CURSOR C_NBADRSOZSP IS
  SELECT COUNT(1) AS NBADRSO
    FROM ADR_IMM_OI adr
   WHERE adr.CODOI     = P_CODOI
     AND adr.FROM_ZSP  = 1
     AND adr.ETAIMMSIR = 'S'
     AND adr.REFERENCEPM IS NOT NULL;
R_NBADRSOZSP C_NBADRSOZSP%ROWTYPE;
vNBADRSO    NUMBER;
-- Nombre d'addresses AVEC HEXACLE en modification envoyées vers l'OSS AVANT chargement  (FULL)
CURSOR C_NBADROSSMHEXO IS
  SELECT COUNT(1) AS NBADROSSMHEXO
    FROM V_EXP_OSSFAI_ELIG_FULL_TRT_IPE v
   WHERE v.OPERATEUR_OI = P_CODOI;
R_NBADROSSMHEXO C_NBADROSSMHEXO%ROWTYPE;
vNBADROSSMHEXO NUMBER;
-- Nombre d'addresses en suppression envoyées vers l'OSS AVANT chargement (DELTA)
CURSOR C_NBADROSSSO IS
  SELECT COUNT(1) AS NBADROSSSO
    FROM V_EXP_OSSFAI_ELIG_DELTA v
   WHERE v.TYPE_MODIFICATION = 'S'
     AND v.OPERATEUR_OI = P_CODOI;
R_NBADROSSSO C_NBADROSSSO%ROWTYPE;
vNBADROSSSO NUMBER;
-- Nombre d'adresses non supprimée blacklisté
CURSOR C_NBADRBLKO IS
  SELECT COUNT(1) AS NBADRBLKO
    FROM ADR_IMM_OI aio
   WHERE aio.CODOI     = P_CODOI
     AND aio.BLACKLIST = 'OUI'
     AND aio.ETAIMMSIR <> 'S';
R_NBADRBLKO C_NBADRBLKO%ROWTYPE;
vNBADRBLKO  NUMBER;
BEGIN
  NAT_FTTH_OI.HIS_ADR_IMM_OI_SUP(P_CODOI  => P_CODOI,
                                 P_TYPZON => P_TYPZON);
  DELETE FROM SPVION_IPE
   WHERE FILE_ID = P_FILE_ID;
  -- Nombre de lignes dans le référentiel IPE pour l'OI AVANT chargement
  IF P_TYPZON = 'ZSP' THEN
    OPEN C_NBREFIPEOZSP;
    FETCH C_NBREFIPEOZSP INTO R_NBREFIPEOZSP;
    vNBREFIPEO := R_NBREFIPEOZSP.NBREFIPEO;
    CLOSE C_NBREFIPEOZSP;
    -- Nombre d'adresses en AJOUT dans la base adresses AVANT chargement
    OPEN C_NBADRAOZSP;
    FETCH C_NBADRAOZSP INTO R_NBADRAOZSP;
    VNBADRAO := R_NBADRAOZSP.NBADRAO;
    CLOSE C_NBADRAOZSP;
    -- Nombre d'addresses en MODIFICATION dans la base adresses AVANT chargement
    OPEN C_NBADRMOZSP;
    FETCH C_NBADRMOZSP INTO R_NBADRMOZSP;
    vNBADRMO := R_NBADRMOZSP.NBADRMO;
    CLOSE C_NBADRMOZSP;
    -- Nombre d'addresses en SUPPRESSION dans la base adresses AVANT chargement
    OPEN C_NBADRSOZSP;
    FETCH C_NBADRSOZSP INTO R_NBADRSOZSP;
    vNBADRSO := R_NBADRSOZSP.NBADRSO;
    CLOSE C_NBADRSOZSP;
  ELSE
    OPEN C_NBREFIPEO;
    FETCH C_NBREFIPEO INTO R_NBREFIPEO;
    vNBREFIPEO := R_NBREFIPEO.NBREFIPEO;
    CLOSE C_NBREFIPEO;
    -- Nombre d'adresses en AJOUT dans la base adresses AVANT chargement
    OPEN C_NBADRAO;
    FETCH C_NBADRAO INTO R_NBADRAO;
    VNBADRAO := R_NBADRAO.NBADRAO;
    CLOSE C_NBADRAO;
    -- Nombre d'addresses en MODIFICATION dans la base adresses AVANT chargement
    OPEN C_NBADRMO;
    FETCH C_NBADRMO INTO R_NBADRMO;
    vNBADRMO := R_NBADRMO.NBADRMO;
    CLOSE C_NBADRMO;
    -- Nombre d'addresses en SUPPRESSION dans la base adresses AVANT chargement
    OPEN C_NBADRSO;
    FETCH C_NBADRSO INTO R_NBADRSO;
    vNBADRSO := R_NBADRSO.NBADRSO;
    CLOSE C_NBADRSO;
  END IF;

  -- Nombre d'addresses en modification envoyées vers l'OSS AVANT chargement  (FULL)
/*  OPEN C_NBADROSSMO;
  FETCH C_NBADROSSMO INTO R_NBADROSSMO;
  vNBADROSSMO := R_NBADROSSMO.NBADROSSMO;
  CLOSE C_NBADROSSMO;*/
  -- Nombre d'addresses AVEC HEXACLE en modification envoyées vers l'OSS AVANT chargement  (FULL)
  OPEN C_NBADROSSMHEXO;
  FETCH C_NBADROSSMHEXO INTO R_NBADROSSMHEXO;
  vNBADROSSMHEXO := R_NBADROSSMHEXO.NBADROSSMHEXO;
  CLOSE C_NBADROSSMHEXO;
  -- Nombre d'addresses en suppression envoyées vers l'OSS AVANT chargement (DELTA)
  --> Indicaterur CADUC, plus d'export
  --OPEN C_NBADROSSSO;
  --FETCH C_NBADROSSSO INTO R_NBADROSSSO;
  vNBADROSSSO := 0;-- R_NBADROSSSO.NBADROSSSO;
  --CLOSE C_NBADROSSSO;

  -- Nombre d'adresses non supprimée blacklisté
  OPEN C_NBADRBLKO;
  FETCH C_NBADRBLKO INTO R_NBADRBLKO;
  vNBADRBLKO := R_NBADRBLKO.NBADRBLKO;
  CLOSE C_NBADRBLKO;

  INSERT INTO SPVION_IPE(CODOI,
                         TYPZON,
                         NBREFIPEO,
                         NBADRAO,
                         NBADRMO,
                         NBADRSO,
                         NBADROSSMO,
                         NBADROSSMHEXO,
                         NBADROSSSO,
                         FILE_ID,
                         NBADRBLKO,
                         NOK_TO_GEN_ELIG)
  VALUES(P_CODOI,
         P_TYPZON,
         VNBREFIPEO,
         VNBADRAO,
         VNBADRMO,
         vNBADRSO,
         NULL,
         vNBADROSSMHEXO,
         vNBADROSSSO,
         P_FILE_ID,
         vNBADRBLKO,
         3 --> Par défaut, on indique que c'est en cours
         );
  COMMIT;
END;
--------------------------------------------------------------
-- insertion des informations de supervision après traitement
-- %param P_FILE_ID
-- %param P_TYPZON
-- %Param P_CODOI
-- %param P_NBLGNIPE
-- %param P_NBLGNTRT
-- %param P_NBREFIPEN
-- %param P_NBADRAN
-- %param P_NBADRMN
-- %param P_NBADRSN
-- %param P_NBADROSSMN
-- %param P_NBADROSSSN
--------------------------------------------------------------
PROCEDURE POS_TRT_SPVION_IPE(P_FILE_ID        IN FILE_IO.FILE_ID%TYPE,
                             P_TYPZON         IN SPVION_IPE.TYPZON%TYPE,
                             P_CODOI          IN SPVION_IPE.CODOI%TYPE,
                             P_NBLGNIPE       IN SPVION_IPE.NBLGNIPE%TYPE,
                             P_NBLGNTRT       IN SPVION_IPE.NBLGNTRT%TYPE,
                             P_NB_DOUBLON_IMB IN SPVION_IPE.NB_IMB_DOUBLON%TYPE) IS
-- Nombre de lignes dans le référentiel IPE pour l'OI APRES chargement
CURSOR C_NBREFIPEN IS
  SELECT COUNT(1) AS NBREFIPEN
    FROM IPE i
   WHERE i.CODOI   = P_CODOI
     AND i.TYPZON  = P_TYPZON
     AND i.FILE_ID = P_FILE_ID
     AND (i.FROM_ZSP = 0 OR i.FROM_ZSP IS NULL) ;
CURSOR C_NBREFIPENZSP IS
  SELECT COUNT(1) AS NBREFIPEN
    FROM IPE i
   WHERE i.CODOI    = P_CODOI
     AND i.FILE_ID  = P_FILE_ID
     AND i.FROM_ZSP = 1;
R_NBREFIPEN C_NBREFIPEN%ROWTYPE;
vNBREFIPEN  NUMBER;
-- Nombre d'adresses en AJOUT dans la base adresses APRES chargement
CURSOR C_NBADRAN IS
  SELECT COUNT(1) AS NBADRAN
    FROM ADR_IMM_OI adr
   WHERE adr.CODOI  = P_CODOI
     AND adr.TYPZON = P_TYPZON
     AND adr.ETAIMMSIR = 'A'
     AND (adr.FROM_ZSP = 0 OR adr.FROM_ZSP IS NULL) ;
CURSOR C_NBADRANZSP IS
  SELECT COUNT(1) AS NBADRAN
    FROM ADR_IMM_OI adr
   WHERE adr.CODOI    = P_CODOI
     AND adr.FROM_ZSP = 1
     AND adr.ETAIMMSIR = 'A';
R_NBADRAN C_NBADRAN%ROWTYPE;
vNBADRAN    NUMBER;
-- Nombre de lignes en MODIFICATION dans la base adresses APRES chargement
CURSOR C_NBADRMN IS
  SELECT COUNT(1) AS NBADRMN
    FROM ADR_IMM_OI adr
   WHERE adr.CODOI  = P_CODOI
     AND adr.TYPZON = P_TYPZON
     AND adr.ETAIMMSIR = 'M'
     AND (adr.FROM_ZSP = 0 OR adr.FROM_ZSP IS NULL) ;
CURSOR C_NBADRMNZSP IS
  SELECT COUNT(1) AS NBADRMN
    FROM ADR_IMM_OI adr
   WHERE adr.CODOI    = P_CODOI
     AND adr.FROM_ZSP = 1
     AND adr.ETAIMMSIR = 'M';
R_NBADRMN C_NBADRMN%ROWTYPE;
vNBADRMN    NUMBER;
-- Nombre de lignes en SUPPRESSION dans la base adresses APRES chargement
CURSOR C_NBADRSN IS
  SELECT COUNT(1) AS NBADRSN
    FROM ADR_IMM_OI adr
   WHERE adr.CODOI     = P_CODOI
     AND adr.TYPZON    = P_TYPZON
     AND adr.ETAIMMSIR = 'S'
     AND adr.REFERENCEPM IS NOT NULL
     AND (adr.FROM_ZSP = 0 OR adr.FROM_ZSP IS NULL) ;
CURSOR C_NBADRSNZSP IS
  SELECT COUNT(1) AS NBADRSN
    FROM ADR_IMM_OI adr
   WHERE adr.CODOI     = P_CODOI
     AND adr.FROM_ZSP  = 1
     AND adr.ETAIMMSIR = 'S'
     AND adr.REFERENCEPM IS NOT NULL;
R_NBADRSN C_NBADRSN%ROWTYPE;
vNBADRSN    NUMBER;
-- Nombre d'addresses AVEC HEXACLE en modification envoyées vers l'OSS APRES chargement  (FULL)
CURSOR C_NBADROSSMHEXN IS
  SELECT COUNT(1) AS NBADROSSMHEXN
    FROM V_EXP_OSSFAI_ELIG_FULL_TRT_IPE v
   WHERE v.OPERATEUR_OI = P_CODOI;
R_NBADROSSMHEXN C_NBADROSSMHEXN%ROWTYPE;
vNBADROSSMHEXN NUMBER;

-- Nombre d'addresses en suppression envoyées vers l'OSS APRES chargement (DELTA)
CURSOR C_NBADROSSSN IS
  SELECT COUNT(1) AS NBADROSSSN
    FROM V_EXP_OSSFAI_ELIG_DELTA v
   WHERE v.TYPE_MODIFICATION = 'S'
     AND v.OPERATEUR_OI = P_CODOI;
R_NBADROSSSN C_NBADROSSSN%ROWTYPE;
vNBADROSSSN NUMBER;

-- Nombre d'adresses non supprimée blacklisté
CURSOR C_NBADRBLKN IS
  SELECT COUNT(1) AS NBADRBLKN
    FROM ADR_IMM_OI aio
   WHERE aio.CODOI     = P_CODOI
     AND aio.BLACKLIST = 'OUI'
     AND aio.ETAIMMSIR <> 'S';
R_NBADRBLKN C_NBADRBLKN%ROWTYPE;
vNBADRBLKN  NUMBER;
vNOK_TO_GEN_ELIG SPVION_IPE.NOK_TO_GEN_ELIG%TYPE;
-- Seuil max delta adresses
CURSOR C_SEUIL_ADR IS
  SELECT av.ADMIN_VALNUM AS ADR_ABS_MAX
    FROM ADMIN_VALEURS av
   WHERE av.ADMIN_VAL_COD = 'DAD';
R_SEUIL_ADR C_SEUIL_ADR%ROWTYPE;
-- Nb Adr avec Hexacle avant traitement
CURSOR C_GET_NB_ADR_FULL_OLD IS
  SELECT si.NBADROSSMHEXO
    FROM SPVION_IPE si
   WHERE si.FILE_ID = P_FILE_ID;
R_GET_NB_ADR_FULL_OLD C_GET_NB_ADR_FULL_OLD%ROWTYPE;
BEGIN
  NAT_FF1_ADR.IS_ADR_ELG_OSS(P_CODOI => P_CODOI);
  IF P_TYPZON = 'ZSP' THEN
    -- Nombre de lignes dans le référentiel IPE pour l'OI APRES chargement
    OPEN C_NBREFIPENZSP;
    FETCH C_NBREFIPENZSP INTO R_NBREFIPEN;
    vNBREFIPEN := R_NBREFIPEN.NBREFIPEN;
    CLOSE C_NBREFIPENZSP;

    -- Nombre d'adresses en AJOUT dans la base adresses APRES chargement
    OPEN C_NBADRANZSP;
    FETCH C_NBADRANZSP INTO R_NBADRAN;
    vNBADRAN := R_NBADRAN.NBADRAN;
    CLOSE C_NBADRANZSP;

    -- Nombre de lignes en MODIFICATION dans la base adresses APRES chargement
    OPEN C_NBADRMNZSP;
    FETCH C_NBADRMNZSP INTO R_NBADRMN;
    vNBADRMN := R_NBADRMN.NBADRMN;
    CLOSE C_NBADRMNZSP;

    -- Nombre de lignes en SUPPRESSION dans la base adresses APRES chargement
    OPEN C_NBADRSNZSP;
    FETCH C_NBADRSNZSP INTO R_NBADRSN;
    vNBADRSN := R_NBADRSN.NBADRSN;
    CLOSE C_NBADRSNZSP;
  ELSE
    -- Nombre de lignes dans le référentiel IPE pour l'OI APRES chargement
    OPEN C_NBREFIPEN;
    FETCH C_NBREFIPEN INTO R_NBREFIPEN;
    vNBREFIPEN := R_NBREFIPEN.NBREFIPEN;
    CLOSE C_NBREFIPEN;

    -- Nombre d'adresses en AJOUT dans la base adresses APRES chargement
    OPEN C_NBADRAN;
    FETCH C_NBADRAN INTO R_NBADRAN;
    vNBADRAN := R_NBADRAN.NBADRAN;
    CLOSE C_NBADRAN;

    -- Nombre de lignes en MODIFICATION dans la base adresses APRES chargement
    OPEN C_NBADRMN;
    FETCH C_NBADRMN INTO R_NBADRMN;
    vNBADRMN := R_NBADRMN.NBADRMN;
    CLOSE C_NBADRMN;

    -- Nombre de lignes en SUPPRESSION dans la base adresses APRES chargement
    OPEN C_NBADRSN;
    FETCH C_NBADRSN INTO R_NBADRSN;
    vNBADRSN := R_NBADRSN.NBADRSN;
    CLOSE C_NBADRSN;
  END IF;


  -- Nombre d'addresses en modification envoyées vers l'OSS APRES chargement  (FULL)
/*  OPEN C_NBADROSSMN;
  FETCH C_NBADROSSMN INTO R_NBADROSSMN;
  vNBADROSSMN := R_NBADROSSMN.NBADROSSMN;
  CLOSE C_NBADROSSMN;*/

  -- Nombre d'addresses AVEC HEXACLE en modification envoyées vers l'OSS APRES chargement  (FULL)
  OPEN C_NBADROSSMHEXN;
  FETCH C_NBADROSSMHEXN INTO R_NBADROSSMHEXN;
  vNBADROSSMHEXN := R_NBADROSSMHEXN.NBADROSSMHEXN;
  CLOSE C_NBADROSSMHEXN;

  -- Nombre d'addresses en suppression envoyées vers l'OSS APRES chargement (DELTA)
  -- Indicateur CADUC
  --OPEN C_NBADROSSSN;
  --FETCH C_NBADROSSSN INTO R_NBADROSSSN;
  vNBADROSSSN := 0;-- R_NBADROSSSN.NBADROSSSN;
  --CLOSE C_NBADROSSSN;

  -- Nombre d'adresses non supprimée blacklisté
  OPEN C_NBADRBLKN;
  FETCH C_NBADRBLKN INTO R_NBADRBLKN;
  vNBADRBLKN := R_NBADRBLKN.NBADRBLKN;
  CLOSE C_NBADRBLKN;
  -- Récupération du seuil adresses delta autorisé
  OPEN C_SEUIL_ADR;
  FETCH C_SEUIL_ADR INTO R_SEUIL_ADR;
  CLOSE C_SEUIL_ADR;

  OPEN C_GET_NB_ADR_FULL_OLD;
  FETCH C_GET_NB_ADR_FULL_OLD INTO R_GET_NB_ADR_FULL_OLD;
  CLOSE C_GET_NB_ADR_FULL_OLD;


  --IF P_NBLGNIPE <> P_NBLGNTRT THEN
    -- Si on n'a pas traité toutes les lignes de la table temporaire
  IF (P_NBLGNIPE - P_NBLGNTRT) > 200 THEN
    vNOK_TO_GEN_ELIG := 1;
  ELSIF (R_GET_NB_ADR_FULL_OLD.NBADROSSMHEXO - vNBADROSSMHEXN) > R_SEUIL_ADR.ADR_ABS_MAX THEN
    -- le d'adresses dans le nouvel IPE contient moins de lignes que l'ancien
    -- avec une différence supérieur au seuil
    vNOK_TO_GEN_ELIG := 2;
  ELSE
    vNOK_TO_GEN_ELIG := 0;
  END IF;


  UPDATE SPVION_IPE
     SET NBLGNIPE        = P_NBLGNIPE,
         NB_IMB_DOUBLON  = P_NB_DOUBLON_IMB,
         NBLGNTRT        = P_NBLGNTRT,
         NBREFIPEN       = vNBREFIPEN,
         NBADRAN         = vNBADRAN,
         NBADRMN         = vNBADRMN,
         NBADRSN         = vNBADRSN,
         NBADROSSMN      = NULL,
         NBADROSSMHEXN   = vNBADROSSMHEXN,
         NBADROSSSN      = vNBADROSSSN,
         DATTRT          = SYSDATE,
         NBADRBLKN       = vNBADRBLKN,
         NOK_TO_GEN_ELIG = vNOK_TO_GEN_ELIG
   WHERE FILE_ID    = P_FILE_ID;

  COMMIT;

  NAT_FTTH_OI.SEND_MAIL_REPORT_IPE(P_COD_OI  => P_CODOI,
                                   P_TYPZON  => P_TYPZON,
                                   P_FILE_ID => P_FILE_ID);
END;


PROCEDURE SEND_MAIL_REPORT_IPE(P_COD_OI IN REF_OI.COD_OI%TYPE,
                               P_TYPZON IN IPE_RPT.TYPZON%TYPE,
                               P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
V_MAIL_HTML  CLOB;
V_TITLE_HTML CLOB;
V_TABLE_HTML CLOB;
V_CURSOR     SYS_REFCURSOR;
--V_NB_FICH    NUMBER;
V_MAIL_ID    NUMBER;
V_MSG_ENV    VARCHAR2(100);
V_LST_DEST   VARCHAR2(1000);
vNBLGNIPE    NUMBER;
vNBLGNTRT    NUMBER;
vNBADROSSMHEXO  NUMBER;
vNBADROSSMHEXN  NUMBER;
vNBDOUBLONIMB   NUMBER;
v_STATE      VARCHAR2(100);
CURSOR C_NOM_IPE IS
  SELECT f.NOM_FIC
    FROM FILE_IO f
   WHERE f.FILE_ID = P_FILE_ID;
R_NOM_IPE C_NOM_IPE%ROWTYPE;
-- Seuil max delta adresses
CURSOR C_SEUIL_ADR IS
  SELECT av.ADMIN_VALNUM AS ADR_ABS_MAX
    FROM ADMIN_VALEURS av
   WHERE av.ADMIN_VAL_COD = 'DAD';
R_SEUIL_ADR C_SEUIL_ADR%ROWTYPE;
vFoundSeuil BOOLEAN;
vSeuil      ADMIN_VALEURS.ADMIN_VALNUM%TYPE;
BEGIN
  SELECT NBLGNIPE,
         NBLGNTRT,
         spb.NBADROSSMHEXO,
         spb.NBADROSSMHEXN,
         spb.Nb_Imb_Doublon
         INTO
         vNBLGNIPE,
         vNBLGNTRT,
         vNBADROSSMHEXO,
         vNBADROSSMHEXN,
         vNBDOUBLONIMB
    FROM SPVION_IPE spb
   WHERE spb.FILE_ID = P_FILE_ID;

  OPEN C_NOM_IPE;
  FETCH C_NOM_IPE INTO R_NOM_IPE;
  CLOSE C_NOM_IPE;

  BEGIN
     SELECT
     PKG_TOOLS.CUR2STR(CURSOR (
                               SELECT l.ADR_MAIL
                                 FROM LST_DEST_MAIL_FF l
                                WHERE l.LST_DIFFUSION = 'SPV'
                               ),';')
      INTO V_LST_DEST
      FROM DUAL ;
  EXCEPTION
    WHEN OTHERS THEN
      V_LST_DEST := 'sahil_rago@outlook.fr';
  END;

 OPEN C_SEUIL_ADR;
 FETCH C_SEUIL_ADR INTO R_SEUIL_ADR;
 vFoundSeuil := C_SEUIL_ADR%FOUND;
 CLOSE C_SEUIL_ADR;

 IF vFoundSeuil THEN
   vSeuil := R_SEUIL_ADR.ADR_ABS_MAX;
 ELSE
   vSeuil := 1000;
 END IF;

 IF (vNBADROSSMHEXN - vNBADROSSMHEXO) >= 0 THEN
   v_STATE := 'RAPPORT IPE ';
 ELSIF ((vNBADROSSMHEXN - vNBADROSSMHEXO) BETWEEN -vSeuil AND -1) THEN
   v_STATE := 'WARNING : RAPPORT IPE ';
 ELSE
   v_STATE := 'ERROR : RAPPORT IPE ';
 END IF;

 V_TITLE_HTML:= v_STATE||P_COD_OI ||' - ' ||P_TYPZON||'<br/>'||
                'Nombre de lignes dans l''IPE : '||vNBLGNIPE||'<br/>'||
                'Nombre de lignes traitées    : '||vNBLGNTRT||'<br/>'||
                'Nombre d''identifiants immeuble en doublon: '||vNBDOUBLONIMB||'<br/>'||
                'Nom fichier IPE              : '||R_NOM_IPE.NOM_FIC;


 OPEN V_CURSOR FOR
   SELECT *
     FROM
   (SELECT 1                                      AS ORDRE,
           'Nb lignes dans la ref ipe pour l''OI'         AS DESCRIPTION,
           TO_CHAR(spb.NBREFIPEO)                 AS RESULTAT_AVANT,
           TO_CHAR(spb.NBREFIPEN)                 AS RESULTAT_APRES,
           TO_CHAR(spb.NBREFIPEN - spb.NBREFIPEO) AS DELTA
      FROM SPVION_IPE spb
     WHERE spb.FILE_ID = P_FILE_ID
     UNION
    SELECT 2                              AS ORDRE,
           'Nb adresses en AJOUT dans la base adresse' AS DESCRIPTION,
           TO_CHAR(spb.NBADRAO)           AS RESULTAT_AVANT,
           TO_CHAR(spb.NBADRAN)           AS RESULTAT_APRES,
           TO_CHAR(spb.NBADRAN - spb.NBADRAO) AS DELTA
      FROM SPVION_IPE spb
     WHERE spb.FILE_ID = P_FILE_ID
     UNION
    SELECT 3                              AS ORDRE,
           'Nb adresses en MODIFICATION dans la base adresse'  AS DESCRIPTION,
           TO_CHAR(spb.NBADRMO)           AS RESULTAT_AVANT,
           TO_CHAR(spb.NBADRMN)           AS RESULTAT_APRES,
           TO_CHAR(spb.NBADRMN - spb.NBADRMO) AS DELTA
      FROM SPVION_IPE spb
     WHERE spb.FILE_ID = P_FILE_ID
     UNION
    SELECT 4                              AS ORDRE,
           'Nb adresses avec IDPM en SUPPRESSION dans la base adresse'   AS DESCRIPTION,
           TO_CHAR(spb.NBADRSO)           AS RESULTAT_AVANT,
           TO_CHAR(spb.NBADRSN)           AS RESULTAT_APRES,
           TO_CHAR(spb.NBADRSN- spb.NBADRSO)                               AS DELTA
      FROM SPVION_IPE spb
     WHERE spb.FILE_ID = P_FILE_ID
     UNION
    SELECT 5                              AS ORDRE,
           'Nb adresses non supprimé BLACKLISTE'   AS DESCRIPTION,
           TO_CHAR(spb.NBADRBLKO)           AS RESULTAT_AVANT,
           TO_CHAR(spb.NBADRBLKN)           AS RESULTAT_APRES,
           TO_CHAR(spb.NBADRBLKN- spb.NBADRBLKO)                               AS DELTA
      FROM SPVION_IPE spb
     WHERE spb.FILE_ID = P_FILE_ID
     UNION
    SELECT 6                              AS ORDRE,
           'Nb adresses en MODIF OSS FAI FULL avec HEXACLE'   AS DESCRIPTION,
           TO_CHAR(spb.NBADROSSMHEXO)           AS RESULTAT_AVANT,
           TO_CHAR(spb.NBADROSSMHEXN)           AS RESULTAT_APRES,
           TO_CHAR(spb.NBADROSSMHEXN - spb.NBADROSSMHEXO)                                  AS DELTA
      FROM SPVION_IPE spb
     WHERE spb.FILE_ID = P_FILE_ID
     UNION
    SELECT 7                              AS ORDRE,
           'Nb adresses avec HEXACLE en SUPPRESSION OSS FAI DELTA'   AS DESCRIPTION,
           TO_CHAR(spb.NBADROSSSO)           AS RESULTAT_AVANT,
           TO_CHAR(spb.NBADROSSSN)           AS RESULTAT_APRES,
           TO_CHAR(spb.NBADROSSSN- spb.NBADROSSSO)                                   AS DELTA
      FROM SPVION_IPE spb
     WHERE spb.FILE_ID = P_FILE_ID
    ORDER BY ORDRE ASC
     );
 V_TABLE_HTML:= PKG_HTML.GET_HTML_TABLE(V_CURSOR);
 CLOSE V_CURSOR;

 V_MAIL_HTML:= V_MAIL_HTML ||'<p>'  ||
               V_TITLE_HTML||'<br/>'||
               V_TABLE_HTML||'<p/>';

 -- Finalisation
 V_MAIL_HTML:= PKG_HTML.GET_HTML_PAGE(V_MAIL_HTML,PKG_HTML.GET_TABLE_CSS());

 -- On post le mail
 V_MAIL_ID := PKG_MAIL.POST(
             'no-reply@bouyguestelecom.fr',
             V_LST_DEST,
             '[FF1] RAPPORT IPE ' || P_COD_OI || ' - ' || P_TYPZON || ' du ' || TO_CHAR(SYSDATE, 'DD/MM/YYYY') || '  ' || V_MSG_ENV,
             V_MAIL_HTML
             );
END;


PROCEDURE SEND_MAIL_ALERT_EXP_OSSFAI IS
V_MAIL_HTML  CLOB;
V_TITLE_HTML CLOB;
V_TABLE_HTML CLOB;
V_CURSOR     SYS_REFCURSOR;
V_MAIL_ID    NUMBER;
V_LST_DEST   VARCHAR2(1000);

BEGIN

  BEGIN
     SELECT
     PKG_TOOLS.CUR2STR(CURSOR (
                               SELECT l.ADR_MAIL
                                 FROM LST_DEST_MAIL_FF l
                                WHERE l.LST_DIFFUSION = 'SPV'
                               ),';')
      INTO V_LST_DEST
      FROM DUAL ;
  EXCEPTION
    WHEN OTHERS THEN
      V_LST_DEST := 'sahil_rago@outlook.fr';
  END;

 V_TITLE_HTML:= '[FTTH]Non Envoi Export Adresses OSS FAI';


 OPEN V_CURSOR FOR
   SELECT *
     FROM
   (SELECT fio.NOM_FIC                AS NOM_FICHIER,
           fio.DATIMP                 AS DATE_RECEPTION,
           spb.NOK_TO_GEN_ELIG        AS CODE_NOK,
           (CASE spb.NOK_TO_GEN_ELIG
             WHEN 1 THEN
               'Toutes les lignes de l''IPE n''ont pas été traitées'
             WHEN 2 THEN
               'Perte d''adresses supérieur au seuil'
             WHEN 3 THEN
               'Traitement IPE en cours'
             WHEN 4 THEN
               'Echec contrôle global IPE'
             ELSE
               'INCONNUE'
            END) AS RAISON
      FROM FILE_IO    fio,
           SPVION_IPE spb
     WHERE spb.NOK_TO_GEN_ELIG IS NOT NULL
       AND spb.NOK_TO_GEN_ELIG <> 0
       AND fio.FILE_ID = spb.FILE_ID);


 V_TABLE_HTML:= PKG_HTML.GET_HTML_TABLE(V_CURSOR);
 CLOSE V_CURSOR;

 V_MAIL_HTML:= V_MAIL_HTML ||'<p>'  ||
               V_TITLE_HTML||'<br/>'||
               V_TABLE_HTML||'<p/>';

 -- Finalisation
 V_MAIL_HTML:= PKG_HTML.GET_HTML_PAGE(V_MAIL_HTML,PKG_HTML.GET_TABLE_CSS());

 -- On post le mail
 V_MAIL_ID := PKG_MAIL.POST(
             'no-reply@bouyguestelecom.fr',
             V_LST_DEST,
             '[FTTH] RAPPORT NON ENVOI EXPORT ADRESSES VERS OSSFAI du ' || TO_CHAR(SYSDATE, 'DD/MM/YYYY'),
             V_MAIL_HTML
             );
  COMMIT;
END;

   PROCEDURE SEND_MAIL_OI_NON_CONF(P_PART_FLUX VARCHAR2,
                                   P_NOM_FIC   VARCHAR2) IS
    V_MAIL_HTML  CLOB;
    V_TITLE_HTML CLOB;
    V_BODY_HTML  CLOB;
    V_TABLE_HTML CLOB;
    V_CURSOR     SYS_REFCURSOR;
    V_NB_FICH    NUMBER;
    V_MAIL_ID    NUMBER;
    V_MSG_ENV    VARCHAR2(100);
    V_LST_DEST   VARCHAR2(1000);
   BEGIN

     V_TITLE_HTML:= '[FTTH] '||P_PART_FLUX ||' - OI non configuré';

     V_BODY_HTML := 'Nom fichier : '|| P_NOM_FIC ;

      BEGIN
         SELECT
         PKG_TOOLS.CUR2STR(CURSOR (
                                   SELECT l.ADR_MAIL
                                     FROM LST_DEST_MAIL_FF l
                                    WHERE l.LST_DIFFUSION = 'SPV'
                                   ),';')
          INTO V_LST_DEST
          FROM DUAL ;
      EXCEPTION
        WHEN OTHERS THEN
          V_LST_DEST := 'sahil_rago@outlook.fr';
      END;

      V_TABLE_HTML := NULL;




     V_MAIL_HTML:= V_MAIL_HTML||'<p>'||V_TITLE_HTML||'<br/>'||V_BODY_HTML||'<br/>'|| V_TABLE_HTML||'<p/>';

     -- Finalisation
     V_MAIL_HTML:= PKG_HTML.GET_HTML_PAGE(V_MAIL_HTML,PKG_HTML.GET_TABLE_CSS());

     -- On post le mail
     V_MAIL_ID := PKG_MAIL.POST(
                 'no-reply@bouyguestelecom.fr',
                 V_LST_DEST,
                 '[FF1] Rejet IPE ' || P_PART_FLUX || ' - du ' || TO_CHAR(SYSDATE, 'DD/MM/YYYY') || '  ' || V_MSG_ENV,
                 V_MAIL_HTML
                 );
   END;

---------------------------------------------------------------------
               -- Les pre-traitements --
-- Meme si on n'a pas forcement les fichiers pour un OI, on a
-- deja le bloc
---------------------------------------------------------------------

------------------------------------------------------------------------
-- Récupération de l'OI à partir du file_id
-- %Param P_FILE_ID  Identifiant du fichier
------------------------------------------------------------------------
FUNCTION GET_OI (P_FILE_ID IN FILE_IO.FILE_ID%TYPE)
  RETURN VARCHAR2 IS
vCodOI REF_OI.COD_OI%TYPE;
CURSOR C_GET_OI IS
  SELECT PKG_FTTH.GET_OPERATEUR(f.NOM_FIC) AS CODOI
    FROM FILE_IO f
   WHERE f.FILE_ID = P_FILE_ID;
R_GET_OI C_GET_OI%ROWTYPE;
BEGIN
  OPEN C_GET_OI;
  FETCH C_GET_OI INTO R_GET_OI;
  CLOSE C_GET_OI;

  vCodOi := R_GET_OI.CODOI;

  RETURN vCodOi;
END;

------------------------------------------------------------------------
-- On cherche si l'oi est configuré dans FF
-- et dans le partenaire de flux
------------------------------------------------------------------------
  FUNCTION IS_OI_CONF(P_COD_OI       IN REF_OI_PRM.COD_OI%TYPE,
                      P_PART_ADD     IN REF_OI_PRM.COD_PART_FLUX%TYPE)
    RETURN NUMBER IS
  vResult NUMBER;
  CURSOR C_VERIF IS
    SELECT 1
      FROM REF_OI_PRM r
     WHERE r.COD_OI = P_COD_OI
       AND r.COD_PART_FLUX = P_PART_ADD
       AND r.OBS    = 0;
  R_VERIF C_VERIF%ROWTYPE;
  vFound  BOOLEAN;
  BEGIN
    OPEN C_VERIF;
    FETCH C_VERIF INTO R_VERIF;
    vFound := C_VERIF%FOUND;
    CLOSE C_VERIF;

    IF vFound THEN
      vResult := 1;
    ELSE
      vResult := 0;
    END IF;
    RETURN vResult;
  END;
---------------------------------------------------------
          -- Pre traitement des IPE --
---------------------------------------------------------
PROCEDURE GESTION_IPE(P_NOMIFC_TMP      IN IFC.NOMIFC%TYPE,
                      P_NOMIFC_IN       IN IFC.NOMIFC%TYPE,
                      P_COD_PART_FLUX   IN PART_FLX.COD_PART_FLUX%TYPE) IS
-- On vérifie si on veut forcer
CURSOR C_IS_FORCED IS
  SELECT 1
    FROM PART_FLX p
   WHERE p.COD_PART_FLUX = P_COD_PART_FLUX
     AND p.FORCE_TRT_IPE = 1;
R_IS_FORCED  C_IS_FORCED%ROWTYPE;
vFoundForced BOOLEAN;
-- Les infos de l'interface du répertoire IPE TMP
CURSOR C_IFC_TMP IS
  SELECT DISTINCT v.IFC_ID, v.REP
    FROM V_IFC_IN_PARAM v
   WHERE v.NOMIFC = P_NOMIFC_TMP;
R_IFC_TMP C_IFC_TMP%ROWTYPE;
-- Les infos de l'interface du répertoire IPE IN
CURSOR C_IFC_IN IS
  SELECT DISTINCT v.IFC_ID, v.REP
    FROM V_IFC_IN_PARAM v
   WHERE v.NOMIFC = P_NOMIFC_IN;
R_IFC_IN C_IFC_IN%ROWTYPE;

CURSOR C_INFO_DIRLST IS
  SELECT dir.FILENAME,
         PKG_FTTH.GET_OPERATEUR(dir.FILENAME) AS CODOI,


         (CASE (SELECT p.PRTCL
                  FROM PART_FLX p
                 WHERE p.COD_PART_FLUX = P_COD_PART_FLUX)
            WHEN '3.0' THEN
              TO_DATE(SUBSTR(dir.Filename,(instr(dir.Filename,'V30')+4),8),'YYYYMMDD')
            WHEN '3.1' THEN
              TO_DATE(SUBSTR(dir.Filename,(instr(dir.Filename,'V31')+4),8),'YYYYMMDD')
         END) AS DATEIPE,
         (CASE
            WHEN FILENAME LIKE '%IPEZMD%' THEN
              'ZMD'
            WHEN FILENAME LIKE '%IPEZSP%' THEN
              'ZSP'
            WHEN FILENAME LIKE '%IPEZTD%' THEN
              'ZTD'
            ELSE
              NULL
          END) AS TYPEZONE
    FROM DIR_LIST dir;
-- Les IPE non paramétrer
CURSOR C_IPE_OI_NULL IS
  SELECT fic.NOMFIC
    FROM FIC_IPE_UPLOAD fic
   WHERE fic.CODOI IS NULL;
-- La liste des OI
CURSOR C_LST_OI IS
  SELECT DISTINCT fic.CODOI
    FROM FIC_IPE_UPLOAD fic;
-- Liste des IPE de l'OI
CURSOR C_LST_FIC_OI(vCodOI VARCHAR2) IS
  SELECT fic.NOMFIC
    FROM FIC_IPE_UPLOAD fic
   WHERE fic.CODOI = vCodOI
     AND fic.HORODAT <> (SELECT MAX(f1.HORODAT)
                           FROM FIC_IPE_UPLOAD f1
                          WHERE f1.CODOI = fic.CODOI);
-- La liste des fichiers à déplacer dans le IN
CURSOR C_LST_FIC IS
  SELECT fic.NOMFIC
    FROM FIC_IPE_UPLOAD fic;

BEGIN

  OPEN C_IFC_TMP;
  FETCH C_IFC_TMP INTO R_IFC_TMP;
  CLOSE C_IFC_TMP;

  OPEN C_IFC_IN;
  FETCH C_IFC_IN INTO R_IFC_IN;
  CLOSE C_IFC_IN;
  -- On recupere les noms des fichiers à partir du répertoire temporaire
  ADMUTI.GET_DIR_LIST2(R_IFC_TMP.REP);
  -- On récupère l'OI et la date de l'IPE
  FOR R_INFO_DIRLST IN C_INFO_DIRLST LOOP
    INSERT INTO FIC_IPE_UPLOAD VALUES ( R_INFO_DIRLST.FILENAME,R_INFO_DIRLST.CODOI,R_INFO_DIRLST.DATEIPE,R_INFO_DIRLST.TYPEZONE);
  END LOOP;

  OPEN C_IS_FORCED;
  FETCH C_IS_FORCED INTO R_IS_FORCED;
  vFoundForced := C_IS_FORCED%FOUND;
  CLOSE C_IS_FORCED;

  IF vFoundForced THEN
    FOR R_LST_FIC IN C_LST_FIC LOOP
      PKG_FILE.SUPPRIMER(R_IFC_TMP.REP||'/'|| R_LST_FIC.NOMFIC);

    END LOOP;
  ELSE
    -- Nettoyage des oi non paramétrer
    FOR R_IPE_OI_NULL IN C_IPE_OI_NULL LOOP
      IF R_IPE_OI_NULL.NOMFIC IS NOT NULL THEN
        -- O génère le mail avant la suppression du fichier
        NAT_FTTH_OI.SEND_MAIL_OI_NON_CONF(P_PART_FLUX => P_COD_PART_FLUX,
                                          P_NOM_FIC   => R_IPE_OI_NULL.NOMFIC);
        PKG_FILE.SUPPRIMER(R_IFC_TMP.REP||'/'|| R_IPE_OI_NULL.NOMFIC);

      END IF;
    END LOOP;
    --  On nettoie la table des OI vide
    DELETE FROM FIC_IPE_UPLOAD WHERE CODOI IS NULL;
    -- Pour chaque OI, on supprime si ce n'est pas le dernier reçu
    FOR R_LST_OI IN C_LST_OI LOOP
      FOR R_LST_FIC_OI IN C_LST_FIC_OI(R_LST_OI.CODOI) LOOP
        IF R_LST_FIC_OI.NOMFIC IS NOT NULL THEN
          PKG_FILE.SUPPRIMER(R_IFC_TMP.REP||'/'|| R_LST_FIC_OI.NOMFIC);
          DELETE FROM FIC_IPE_UPLOAD f WHERE f.NOMFIC = R_LST_FIC_OI.NOMFIC;
        END IF;
      END LOOP;
    END LOOP;

    -- On déplace les fichiers dans le IN
    FOR R_LST_FIC IN C_LST_FIC LOOP
      PKG_FILE.DEPLACER(R_IFC_TMP.REP || '/' || R_LST_FIC.NOMFIC,
                        R_IFC_IN.REP || '/' || R_LST_FIC.NOMFIC,

                        TRUE);
    END LOOP;
  END IF;
END;

PROCEDURE GESTION_IPE_ASTR_30(P_NOMIFC_IN  IN IFC.NOMIFC%TYPE) IS
-- Les infos de l'interface du répertoire IPE IN
CURSOR C_IFC_IN IS
  SELECT DISTINCT v.IFC_ID, v.REP
    FROM V_IFC_IN_PARAM v
   WHERE v.NOMIFC = P_NOMIFC_IN;
R_IFC_IN C_IFC_IN%ROWTYPE;

CURSOR C_INFO_DIRLST IS
  SELECT dir.FILENAME,
         PKG_FTTH.GET_OPERATEUR(dir.FILENAME) AS CODOI,
         (CASE (SELECT p.PRTCL
                  FROM PART_FLX p
                 WHERE p.COD_PART_FLUX = NAT_FTTH_OI.P_CODOI_SIMPSON)
            WHEN '3.0' THEN
              TO_DATE(SUBSTR(dir.Filename,(instr(dir.Filename,'V30')+4),8),'YYYYMMDD')
            WHEN '3.1' THEN
              TO_DATE(SUBSTR(dir.Filename,(instr(dir.Filename,'V31')+4),8),'YYYYMMDD')
         END) AS DATEIPE,
         (CASE
            WHEN FILENAME LIKE 'V-IPEZMD%' THEN
              'ZMD'
            WHEN FILENAME LIKE 'V-IPEZSP%' THEN
              'ZSP'
            ELSE
              NULL
          END) AS TYPEZONE
    FROM DIR_LIST dir;
-- Les IPE non paramétrer
CURSOR C_IPE_OI_NULL IS
  SELECT fic.NOMFIC
    FROM FIC_IPE_UPLOAD fic
   WHERE fic.CODOI IS NULL OR fic.TYPZON IS NULL;
-- La liste des OI
CURSOR C_LST_ZONE IS
  SELECT DISTINCT fic.TYPZON
    FROM FIC_IPE_UPLOAD fic
   WHERE fic.TYPZON IS NOT NULL;
-- Liste des IPE de l'OI
CURSOR C_LST_FIC_ZONE(vTypeZone VARCHAR2) IS
  SELECT fic.NOMFIC
    FROM FIC_IPE_UPLOAD fic
   WHERE fic.TYPZON = vTypeZone
     AND fic.HORODAT <> (SELECT MAX(f1.HORODAT)
                           FROM FIC_IPE_UPLOAD f1
                          WHERE f1.TYPZON = fic.TYPZON);
-- La liste des fichiers à déplacer dans le IN
CURSOR C_LST_FIC IS
  SELECT fic.NOMFIC
    FROM FIC_IPE_UPLOAD fic;

-- Si On est le jour du contrôle facturation, on supprime les fichiers qui sont > au 1er du mois.
CURSOR C_LST_FIC_DEL_CTRLFAC IS
  SELECT fic.NOMFIC
    FROM FIC_IPE_UPLOAD fic
   WHERE fic.HORODAT > TRUNC(last_day(sysdate)-1, 'MM');

vCheminIpeTmp VARCHAR2(255);
BEGIN
  vCheminIpeTmp := '/usr/users/ecoadm/DATA/FTTH/PART/SMP/IPE/IN/IPETMP';
  OPEN C_IFC_IN;
  FETCH C_IFC_IN INTO R_IFC_IN;
  CLOSE C_IFC_IN;
  -- On recupere les noms des fichiers à partir du répertoire temporaire
  ADMUTI.GET_DIR_LIST2(vCheminIpeTmp);
  -- On récupère l'OI et la date de l'IPE
  FOR R_INFO_DIRLST IN C_INFO_DIRLST LOOP
    INSERT INTO FIC_IPE_UPLOAD VALUES ( R_INFO_DIRLST.FILENAME,R_INFO_DIRLST.CODOI,R_INFO_DIRLST.DATEIPE,R_INFO_DIRLST.TYPEZONE);
  END LOOP;
  -- Nettoyage des oi non paramétrer
  FOR R_IPE_OI_NULL IN C_IPE_OI_NULL LOOP
    IF R_IPE_OI_NULL.NOMFIC IS NOT NULL THEN
      PKG_FILE.SUPPRIMER(vCheminIpeTmp||'/'|| R_IPE_OI_NULL.NOMFIC);
    END IF;
  END LOOP;
  -- Dans le cadre du contrôle facturation, on ne doit pas traiter les fichiers > 01 du mois
  IF NAT_FTTH_SMP.CAN_RUN_CTRL_FACTU = 1 THEN
    FOR R_LST_FIC_DEL_CTRLFAC IN C_LST_FIC_DEL_CTRLFAC  LOOP
      PKG_FILE.SUPPRIMER(vCheminIpeTmp||'/'|| R_LST_FIC_DEL_CTRLFAC.NOMFIC);
      DELETE FROM FIC_IPE_UPLOAD f WHERE f.NOMFIC = R_LST_FIC_DEL_CTRLFAC.NOMFIC;
    END LOOP;
  END IF;

  --  On nettoie la table des OI vide
  DELETE FROM FIC_IPE_UPLOAD WHERE CODOI IS NULL;
  -- Pour chaque OI, on supprime si ce n'est pas le dernier reçu
  FOR R_LST_ZONE IN C_LST_ZONE LOOP
    FOR R_LST_FIC_ZONE IN C_LST_FIC_ZONE(R_LST_ZONE.TYPZON) LOOP
      IF R_LST_FIC_ZONE.NOMFIC IS NOT NULL THEN
        PKG_FILE.SUPPRIMER(vCheminIpeTmp||'/'|| R_LST_FIC_ZONE.NOMFIC);
        DELETE FROM FIC_IPE_UPLOAD f WHERE f.NOMFIC = R_LST_FIC_ZONE.NOMFIC;
      END IF;
    END LOOP;
  END LOOP;

  -- On déplace les fichiers dans le IN
  FOR R_LST_FIC IN C_LST_FIC LOOP
    PKG_FILE.COPIER(vCheminIpeTmp||'/'|| R_LST_FIC.NOMFIC,
                      R_IFC_IN.REP || '/' || R_LST_FIC.NOMFIC,
                      TRUE);
  END LOOP;
END;

---------------------------------------------------------
          -- Pre traitement globale des IPE FTEL --
---------------------------------------------------------
PROCEDURE PRE_TRT_IN_FTEL_GLB IS
BEGIN
  GESTION_IPE('FTTH_IPETMP_FT_IN','FTTH_IPE_IN_FT','FTEL');
END;

---------------------------------------------------------
          -- Pre traitement globale des IPE SFRA --
---------------------------------------------------------
PROCEDURE PRE_TRT_IN_SFRA_GLB IS
BEGIN
  GESTION_IPE('FTTH_IPETMP_SFR_OI_IN','FTTH_HBIPE_IN_SFR','SFRA');
END;

---------------------------------------------------------
          -- Pre traitement globale des IPE AXIO --
---------------------------------------------------------
PROCEDURE PRE_TRT_IN_AXIO_GLB IS
BEGIN

  GESTION_IPE('FTTH_AXIO_IPETMP_IN','FTTH_AXNE_IPE_IN','AXIO');
END;

---------------------------------------------------------
          -- Pre traitement globale des IPE FREE --
---------------------------------------------------------
PROCEDURE PRE_TRT_IN_FREE_GLB IS
BEGIN
  GESTION_IPE('FTTH_FREE_IPETMP_IN','FTTH_IPE_IN_FREE','FREE');
END;

---------------------------------------------------------
          -- Pre traitement globale des IPE SEQ --
---------------------------------------------------------
PROCEDURE PRE_TRT_IN_SEQ_GLB IS
BEGIN
  NULL;
END;

---------------------------------------------------------
          -- Pre traitement globale des IPE COVA --
---------------------------------------------------------
PROCEDURE PRE_TRT_IN_COVA_GLB IS
BEGIN

  GESTION_IPE('FTTH_COVA_IPETMP_IN','FTTH_COVA_IPE_IN','COVA');
END;

---------------------------------------------------------
          -- Pre traitement globale des IPE ALTI --
---------------------------------------------------------
PROCEDURE PRE_TRT_IN_ALTI_GLB IS
BEGIN
  GESTION_IPE('FTTH_ALTI_IPETMP_IN','FTTH_ALTI_IPE_IN','ALTI');
END;

---------------------------------------------------------
          -- Pre traitement globale des IPE TDF --
---------------------------------------------------------
PROCEDURE PRE_TRT_IN_TDF_GLB IS
BEGIN
  GESTION_IPE('FTTH_TDF_IPETMP_IN','FTTH_TDF_IPE_IN','TDF');
END;

---------------------------------------------------------
          -- Pre traitement globale des IPE SIEA --
---------------------------------------------------------
PROCEDURE PRE_TRT_IN_SIEA_GLB IS
BEGIN
  GESTION_IPE('FTTH_SIEA_IPETMP_IN','FTTH_SIEA_IPE_IN','SIEA');
END;

PROCEDURE PRE_TRT_IN_SMP_GLB IS
BEGIN
   GESTION_IPE_ASTR_30('FTTH_IPE_SMP_IN');
END;

PROCEDURE POS_TRT_IN_SMP_GLB IS
BEGIN
  -- On indique qu'on a traité les IPE
  IF NAT_FF1.CAN_RUN_TRT_IPE(NAT_FTTH_OI.P_CODOI_SIMPSON) = 1 THEN
    NAT_FF1.SET_PART_FLX_IPE_TRT(P_COD_PART_FLUX => NAT_FTTH_OI.P_CODOI_SIMPSON);
  END IF;
END;

-------------------------------------------------------------
-- Pre-traitement de la sous-interface PRE_TRT_IPE_IN_SFRA_V21
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
-------------------------------------------------------------
PROCEDURE PRE_TRT_IPE_IN_SFRA_ZMD_V30 (FILEIO_ID INTEGER) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  vTypzon VARCHAR2(3);
BEGIN
    plog.info('PRE TRAITEMENT IPE SFR ZMD : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    EXECUTE IMMEDIATE 'TRUNCATE TABLE IPE_SFRA_ZMD_V30_TMP';

    vCod_Oi := GET_OI(FILEIO_ID);
    vTypzon := 'ZMD';

    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => vCod_Oi,
                                   P_TYPZON => vTypzon,
                                   P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE SFR ZMD : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
END;

PROCEDURE PRE_TRT_IPE_IN_SFRA_ZTD_V30 (FILEIO_ID INTEGER) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  vTypzon VARCHAR2(3);
BEGIN
    plog.info('PRE TRAITEMENT IPE FT ZTD : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    EXECUTE IMMEDIATE 'TRUNCATE TABLE IPE_SFRA_ZTD_V30_TMP';

    vCod_Oi := GET_OI(FILEIO_ID);
    vTypzon := 'ZTD';

    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => vCod_Oi,
                                   P_TYPZON => vTypzon,
                                   P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE FT ZTD : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
END;

-------------------------------------------------------------
-- Pre-traitement de la sous-interface PRE_TRT_IPE_IN_NUME_V22
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
-------------------------------------------------------------

PROCEDURE PRE_TRT_IPE_IN_COVA_V30 (FILEIO_ID INTEGER) IS
vCod_Oi REF_OI.COD_OI%TYPE;
vTypzon VARCHAR2(3);
BEGIN
  plog.info('PRE TRAITEMENT IPE COVAGE : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  vCod_Oi := GET_OI(FILEIO_ID);

  CASE vCod_Oi
    WHEN 'SEQU' THEN
      vTypzon := 'ZTD';
    ELSE
      vTypzon := 'ZMD';
  END CASE;

  NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => vCod_Oi,
                                 P_TYPZON => vTypzon,
                                 P_FILE_ID => FILEIO_ID);
  plog.info('PRE TRAITEMENT IPE COVAGE : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
END;

PROCEDURE PRE_TRT_IPE_IN_FT_ZMD_V30 (FILEIO_ID INTEGER) IS
vCod_Oi REF_OI.COD_OI%TYPE;
vTypzon VARCHAR2(3);
BEGIN
  plog.info('PRE TRAITEMENT IPE FT ZMD : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  EXECUTE IMMEDIATE 'TRUNCATE TABLE IPE_FT_ZMD_V30_TMP';

  vCod_Oi := GET_OI(FILEIO_ID);
  vTypzon := 'ZMD';

  NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => vCod_Oi,
                                 P_TYPZON => vTypzon,
                                 P_FILE_ID => FILEIO_ID);
  plog.info('PRE TRAITEMENT IPE FT ZMD : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
END;

  PROCEDURE PRE_TRT_IPE_IN_FT_ZTD_V30 (FILEIO_ID INTEGER) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
    vTypzon VARCHAR2(3);
  BEGIN
    plog.info('PRE TRAITEMENT IPE FT ZTD : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    EXECUTE IMMEDIATE 'TRUNCATE TABLE IPE_FT_ZTD_V30_TMP';

    vCod_Oi := GET_OI(FILEIO_ID);
    vTypzon := 'ZTD';

    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => vCod_Oi,
                                   P_TYPZON => vTypzon,
                                   P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE FT ZTD : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  PROCEDURE PRE_TRT_IPE_IN_FT_ZSP_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    plog.info('PRE TRAITEMENT IPE FT ZSP : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    EXECUTE IMMEDIATE 'TRUNCATE TABLE IPE_FT_ZSP_V30_TMP';
    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => 'SDIF',
                                   P_TYPZON => 'ZSP',
                                   P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE FT ZSP : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  PROCEDURE PRE_TRT_IPEDEL_IN_FT_ZMD_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_IPEDEL_IN_FT_ZTD_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_IPEDEL_IN_ALTI_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_IPEDEL_IN_FREE_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_IPEDEL_IN_NUME_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_IPEDEL_IN_SFRA_ZTD_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_IPEDEL_IN_SFRA_ZMD_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_IPEDEL_IN_AXIO_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    NULL;
  END;


  PROCEDURE PRE_TRT_IPEDEL_IN_TDF_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_IPEHIS_IN_SFRA_ZMD_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_IPEHISTO_IN_FT_ZMD_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_IPEHISTO_IN_FT_ZTD_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_IPEHISTO_IN_ALTI_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_IPEHISTO_IN_FREE_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_IPEHISTO_IN_NUME_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_IPEHIS_IN_SFRA_ZTD_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_IPEHISTO_IN_AXIO_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_IPEHISTO_IN_TDF_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_IPE_IN_NUME_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    plog.info('PRE TRAITEMENT IPE NUME : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => 'NUME',
                                   P_TYPZON => 'ZTD',
                                   P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE NUME : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  PROCEDURE PRE_TRT_IPE_IN_SEQU_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    plog.info('PRE TRAITEMENT IPE SEQU : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => 'SEQU',
                                   P_TYPZON => 'ZTD',
                                   P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE SEQU : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  PROCEDURE PRE_TRT_IPE_IN_AXIO_V30 (FILEIO_ID INTEGER) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  vTypzon VARCHAR2(3);
  BEGIN
    plog.info('PRE TRAITEMENT IPE AXIO : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    vCod_Oi := GET_OI(FILEIO_ID);

    CASE vCod_Oi
      WHEN 'SEQU' THEN
        vTypzon := 'ZTD';
      ELSE
        vTypzon := 'ZMD';
  END CASE;

  NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => vCod_Oi,
                                 P_TYPZON => vTypzon,
                                 P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE AXIO : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  PROCEDURE PRE_TRT_IPE_IN_FREE_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    plog.info('PRE TRAITEMENT IPE FREE : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => 'FREE',
                                   P_TYPZON => 'ZTD',
                                   P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE FREE : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  PROCEDURE PRE_TRT_IPE_IN_ALTI_V30 (FILEIO_ID INTEGER) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  vTypzon VARCHAR2(3);
  BEGIN
    plog.info('PRE TRAITEMENT IPE ALTI : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    vCod_Oi := GET_OI(FILEIO_ID);

    vTypzon := 'ZMD';
    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => vCod_Oi,
                                 P_TYPZON => vTypzon,
                                 P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE ALTI : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;
  PROCEDURE PRE_TRT_IPE_IN_TDF_V30 (FILEIO_ID INTEGER) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  vTypzon VARCHAR2(3);
  BEGIN
    plog.info('PRE TRAITEMENT IPE TDF : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    vCod_Oi := GET_OI(FILEIO_ID);

    vTypzon := 'ZMD';
    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => vCod_Oi,
                                 P_TYPZON => vTypzon,
                                 P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE TDF : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  PROCEDURE PRE_TRT_IPE_ZMD_IN_SMP_V30 (FILEIO_ID INTEGER) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  vTypzon VARCHAR2(3);
  BEGIN
    IF NAT_FF1.CAN_RUN_TRT_IPE(NAT_FTTH_OI.P_CODOI_SIMPSON) = 1 THEN --> On lance uniquement si possible
    plog.info('PRE TRAITEMENT IPE Simpson ZMD : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    EXECUTE IMMEDIATE 'TRUNCATE TABLE IPE_SMP_ZMD_V30_TMP';

    vCod_Oi := GET_OI(FILEIO_ID);
    vTypzon := 'ZMD';

    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => vCod_Oi,
                                   P_TYPZON => vTypzon,
                                   P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE Simpson ZMD : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    END IF;
  END;


  PROCEDURE PRE_TRT_IPE_ZSP_IN_SMP_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    IF NAT_FF1.CAN_RUN_TRT_IPE(NAT_FTTH_OI.P_CODOI_SIMPSON) = 1 THEN --> On lance uniquement si possible
    plog.info('PRE TRAITEMENT IPE Simpson ZSP : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    EXECUTE IMMEDIATE 'TRUNCATE TABLE IPE_SMP_ZSP_V30_TMP';
    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => 'SDIF',
                                   P_TYPZON => 'ZSP',
                                   P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE Simpson ZSP : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    END IF;
  END;

  PROCEDURE PRE_TRT_IPE_IN_SIEA_V30 (FILEIO_ID INTEGER) IS
  BEGIN
    plog.info('PRE TRAITEMENT IPE SIEA : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => GET_OI(FILEIO_ID),
                                   P_TYPZON => 'ZMD',
                                   P_FILE_ID => FILEIO_ID);

    plog.info('PRE TRAITEMENT IPE SIEA : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;


---------------------------------------------------------
          -- Pré traitement des CR_INFO_SYNDIC --
---------------------------------------------------------
  PROCEDURE PRE_TRT_CRSYN_IN_COVA_V30 (P_FILE_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRSYN_IN_FTEL_V30 (P_FILE_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRSYN_IN_SFRA_V30 (P_FILE_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRSYN_IN_NUME_V30 (P_FILE_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRSYN_IN_AXIO_V30 (P_FILE_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRSYN_IN_FREE_V30 (P_FILE_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRSYN_IN_ALTI_V30 (P_FILE_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRSYN_IN_TDF_V30 (P_FILE_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRSYN_IN_SMP_V30 (P_FILE_ID INTEGER) IS
  BEGIN
    NULL;
  END;

----------------------------------------------------------
     --  Pre TRAITEMENT Lettre Info Syn  --
----------------------------------------------------------
PROCEDURE PRE_TRT_LTRSYN_IN_COVA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

PROCEDURE PRE_TRT_LTRSYN_IN_FTEL_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_LTRSYN_IN_SFRA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_LTRSYN_IN_NUME_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_LTRSYN_IN_AXIO_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_LTRSYN_IN_FREE_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

PROCEDURE PRE_TRT_LTRSYN_IN_ALTI_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

PROCEDURE PRE_TRT_LTRSYN_IN_TDF_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

PROCEDURE PRE_TRT_LTRSYN_IN_SMP_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
----------------------------------------------------------
     --  Pre TRAITEMENT CRMAD PM  --
----------------------------------------------------------
PROCEDURE PRE_TRT_CRMADPM_IN_COVA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

PROCEDURE PRE_TRT_CRMADPM_IN_FT_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_CRMADPM_IN_SFRA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_CRMADPM_IN_NUME_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_CRMADPM_IN_AXIO_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_CRMADPM_IN_FREE_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

PROCEDURE PRE_TRT_CRMADPM_IN_ALTI_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_CRMADPM_IN_TDF_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_CRMADPM_IN_SMP_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

PROCEDURE PRE_TRT_CRMADPM_IN_SIEA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
----------------------------------------------------------
     --  Pre TRAITEMENT PLAN MAD  --
----------------------------------------------------------
PROCEDURE PRE_TRT_PLANMAD_IN_COVA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

PROCEDURE PRE_TRT_PLANMAD_IN_FT_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_PLANMAD_IN_SFRA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_PLANMAD_IN_NUME_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_PLANMAD_IN_AXIO_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_PLANMAD_IN_FREE_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

PROCEDURE PRE_TRT_PLANMAD_IN_ALTI_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

PROCEDURE PRE_TRT_PLANMAD_IN_TDF_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

PROCEDURE PRE_TRT_PLANMAD_IN_SMP_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

PROCEDURE PRE_TRT_PLANMAD_IN_SIEA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

----------------------------------------------------------
     --  Pre TRAITEMENT CR MAD POSITION  --
----------------------------------------------------------
PROCEDURE PRE_TRT_POSITION_IN_COVA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_POSITION_IN_FT_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_POSITION_IN_SFRA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_POSITION_IN_NUME_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_POSITION_IN_AXIO_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_POSITION_IN_FREE_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_POSITION_IN_ALTI_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

PROCEDURE PRE_TRT_POSITION_IN_TDF_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

PROCEDURE PRE_TRT_POSITION_IN_SMP_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

----------------------------------------------------------
     --  Pre TRAITEMENT CRNA  --
----------------------------------------------------------
PROCEDURE PRE_TRT_CRNA_IN_COVA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

PROCEDURE PRE_TRT_CRNA_IN_FT_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_CRNA_IN_SFRA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_CRNA_IN_NUME_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_CRNA_IN_AXIO_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_CRNA_IN_FREE_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;
PROCEDURE PRE_TRT_CRNA_IN_ALTI_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

PROCEDURE PRE_TRT_CRNA_IN_TDF_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

PROCEDURE PRE_TRT_CRNA_IN_SMP_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

PROCEDURE PRE_TRT_CRNA_IN_SIEA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  NULL;
END;

  -------------------------------------------------------------------------------
  -- Les pré traitement CPN
  -------------------------------------------------------------------------------

  PROCEDURE PRE_TRT_CPN_IN_COVA_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_IN_FTEL_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_ZSP_IN_FTEL_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_IN_AXIO_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_IN_SFOR (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_IN_ALTI_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_IN_TDF_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_ZMD_IN_SMP_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_ZSP_IN_SMP_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_IN_SIEA_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_IN_SFRA_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  -------------------------------------------------------------------------------
  -- Les pré traitement AR de commande unitaire et dmd info
  -------------------------------------------------------------------------------
  PROCEDURE PRE_TRT_ARCMD_PM_IN_NUME (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_ARCMD_PM_IN_FREE (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_ARCMD_PM_IN_COVA (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_ARCMD_PM_IN_ALTI (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_ARCMD_PM_IN_TDF (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_ARCMD_IN_SMP_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_ARCMD_IN_SIEA_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_FTTH_ARMAD_TRF_OUT_AXIO(P_ID_TRT_IFC IN FILE_IO.ID_TRT_IFC%TYPE ) IS
  CURSOR C_LST IS
    SELECT f.FILE_ID
      FROM FILE_IO           f,
           ARMAD_AXN_SAVE_ID sav
     WHERE f.ID_TRT_IFC = sav.ID_IFC_TRT_AR_MAD;
  R_FILE_IO NAT_IFC.R_FILE_IO;
  BEGIN
    FOR R_LST IN C_LST LOOP
      -- On récupère les infos file_io
      R_FILE_IO := NAT_IFC.GET_FILE_IO(R_LST.FILE_ID);
      -- On affecte le nouveau ID TRT
      R_FILE_IO.ID_TRT_IFC := P_ID_TRT_IFC;
      -- On modifie l'info dans FILE_io
      NAT_IFC.SET_FILE_IO(P_FILE_ID => R_LST.FILE_ID,
                          P_R_FILE_IO => R_FILE_IO);
    END LOOP;
  END;

  PROCEDURE POS_FTTH_ARMAD_TRF_OUT_AXIO IS
  CURSOR C_GET_REP IS
    SELECT v.REP,v.RETENTION
      FROM V_IFC_OUT v
     WHERE v.NOMIFC = 'FTTH_ARMAD_TRF_OUT_AXIO';
  R_GET_REP C_GET_REP%ROWTYPE;
  BEGIN
    OPEN C_GET_REP;
    FETCH C_GET_REP INTO R_GET_REP;
    CLOSE C_GET_REP;
    PKG_FILE.ARCHIVER(R_GET_REP.REP);
    PKG_FILE.PURGER(R_GET_REP.REP,R_GET_REP.RETENTION);
  END;
----------------------------------------------------------
     --  POST TRAITEMENT IPE  --
----------------------------------------------------------
---------------------------------------------------------------------------------
-- Pour la récupération des dynamique des données à partir des tables temporaire
--------------------------------------------------------------------------------
FUNCTION GET_FTTH_TBL_CONTENT (P_TBL_NAME IN VARCHAR2)
  RETURN SYS_REFCURSOR IS
  V_CUR SYS_REFCURSOR;
  L_ARGUMENT_TABLE ARGUMENT_TABLE := ARGUMENT_TABLE();
  L_CRITERIA_TABLE CRITERIA_TABLE := CRITERIA_TABLE();
BEGIN
  CMN_SQL_DYN.SET_CRITERIA(L_CRITERIA_TABLE, '$FROM$','P_TBL_NAME');
  CMN_SQL_DYN.SET_ARGUMENT_UNBIND(L_ARGUMENT_TABLE,'P_TBL_NAME',P_TBL_NAME);
  V_CUR := CMN_SQL_DYN.EXECUTE('NAT_FTTH_OI.GET_FTTH_TBL_CONTENT',L_CRITERIA_TABLE,L_ARGUMENT_TABLE);
  RETURN V_CUR;
END;
---------------------------------------------------------------------------------
-- Pour la récupération du nombre de records à partir des tables temporaire
---------------------------------------------------------------------------------
FUNCTION GET_FTTH_NB_REC(P_TBL_NAME IN VARCHAR2)
  RETURN SYS_REFCURSOR IS
  V_CUR SYS_REFCURSOR;
  L_ARGUMENT_TABLE ARGUMENT_TABLE := ARGUMENT_TABLE();
  L_CRITERIA_TABLE CRITERIA_TABLE := CRITERIA_TABLE();
BEGIN
  CMN_SQL_DYN.SET_CRITERIA(L_CRITERIA_TABLE, '$FROM$','P_TBL_NAME');
  CMN_SQL_DYN.SET_ARGUMENT_UNBIND(L_ARGUMENT_TABLE,'P_TBL_NAME',P_TBL_NAME);
  V_CUR := CMN_SQL_DYN.EXECUTE('NAT_FTTH_OI.GET_FTTH_NB_REC',L_CRITERIA_TABLE,L_ARGUMENT_TABLE);
  RETURN V_CUR;
END;
--------------------------------------------------------------------------------------------------
-- Pour la récupération du nombre des immubles qui sont en doublons à partir des tables temporaire
---------------------------------------------------------------------------------------------------
FUNCTION GET_FTTH_NB_IMB_EN_DOUBLON(P_TBL_NAME IN VARCHAR2)
  RETURN SYS_REFCURSOR IS
  V_CUR SYS_REFCURSOR;
  L_ARGUMENT_TABLE ARGUMENT_TABLE := ARGUMENT_TABLE();
  L_CRITERIA_TABLE CRITERIA_TABLE := CRITERIA_TABLE();
BEGIN
  CMN_SQL_DYN.SET_CRITERIA(L_CRITERIA_TABLE, '$FROM$','P_TBL_NAME');
  CMN_SQL_DYN.SET_ARGUMENT_UNBIND(L_ARGUMENT_TABLE,'P_TBL_NAME',P_TBL_NAME);
  V_CUR := CMN_SQL_DYN.EXECUTE('NAT_FTTH_OI.GET_FTTH_NB_IMB_EN_DOUBLON',L_CRITERIA_TABLE,L_ARGUMENT_TABLE);
  RETURN V_CUR;
END;
---------------------------------------------------------------------------------
-- Pour la récupération du file_id à partir des tables temporaire
---------------------------------------------------------------------------------
FUNCTION GET_FTTH_FILE_ID(P_TBL_NAME IN VARCHAR2)
  RETURN SYS_REFCURSOR IS
  V_CUR SYS_REFCURSOR;
  L_ARGUMENT_TABLE ARGUMENT_TABLE := ARGUMENT_TABLE();
  L_CRITERIA_TABLE CRITERIA_TABLE := CRITERIA_TABLE();
BEGIN
  CMN_SQL_DYN.SET_CRITERIA(L_CRITERIA_TABLE, '$FROM$','P_TBL_NAME');
  CMN_SQL_DYN.SET_ARGUMENT_UNBIND(L_ARGUMENT_TABLE,'P_TBL_NAME',P_TBL_NAME);
  V_CUR := CMN_SQL_DYN.EXECUTE('NAT_FTTH_OI.GET_FTTH_FILE_ID',L_CRITERIA_TABLE,L_ARGUMENT_TABLE);
  RETURN V_CUR;
END;
----------------------------------------------------------
-- CLEAN_IPE_ZMD : Source IPE
----------------------------------------------------------
PROCEDURE CLEAN_IPE_ZMD_FT_V30 IS

BEGIN
  /*DELETE FROM IPE_FT_ZMD_V30_TMP it1
        WHERE it1.REFERENCEPM IS NULL;
  COMMIT;

  UPDATE IPE_FT_ZMD_V30_TMP it1 set it1.ETATIMMEUBLE = UPPER(PKG_TOOLS.TRANSLATE(it1.ETATIMMEUBLE));
  UPDATE IPE_FT_ZMD_V30_TMP it1 set it1.ETATPM = UPPER(PKG_TOOLS.TRANSLATE(it1.ETATPM));
  --COMMIT;

  DELETE FROM IPE_FT_ZMD_V30_TMP it
        WHERE it.ETATIMMEUBLE NOT IN ('CIBLE', 'SIGNE','EN COURS DE DEPLOIEMENT', 'DEPLOYE')
          AND it.ETATPM       NOT IN ('EN COURS DE DEPLOIEMENT', 'DEPLOYE');*/

  /*DELETE FROM IPE_FT_ZMD_V30_TMP it
        WHERE NOT EXISTS (SELECT 1
                            FROM SOUSCRIPTION s
                           WHERE it.CODEINSEEPM = s.COD_INSEE
                             AND s.COD_OI       IN ('FTEL',NAT_FTTH_OI.P_CODOI_SIMPSON));
  COMMIT;*/
       -- TODO : vérifier si on utilise la date de début, date de fin de la souscription
       --       dans notre pour le codeinsee du pm
  DELETE FROM IPE_FT_ZMD_V30_TMP i
   WHERE EXISTS (SELECT 1
                   FROM LST_PM_OF_TO_SFOR l
                  WHERE l.IDPM = i.REFERENCEPM
                    AND l.DATMIG is not null);
END;

PROCEDURE CLEAN_IPE_ZMD_SMP_V30 IS

BEGIN
 /* DELETE FROM IPE_SMP_ZMD_V30_TMP it1
        WHERE it1.REFERENCEPM IS NULL;
  COMMIT;

  DELETE FROM IPE_SMP_ZMD_V30_TMP it
        WHERE it.ETATIMMEUBLE NOT IN ('CIBLE', 'SIGNE','EN COURS DE DEPLOIEMENT', 'DEPLOYE')
          AND it.ETATPM       NOT IN ('EN COURS DE DEPLOIEMENT', 'DEPLOYE');*/

  /*DELETE FROM IPE_SMP_ZMD_V30_TMP it
        WHERE NOT EXISTS (SELECT 1
                            FROM SOUSCRIPTION s
                           WHERE it.CODEINSEEPM = s.COD_INSEE
                             AND s.COD_OI       = NAT_FTTH_OI.P_CODOI_SIMPSON);
  COMMIT;*/
       -- TODO : vérifier si on utilise la date de début, date de fin de la souscription
       --       dans notre pour le codeinsee du pm
  DELETE FROM IPE_SMP_ZMD_V30_TMP i
   WHERE EXISTS (SELECT 1
                   FROM LST_PM_OF_TO_SFOR l
                  WHERE l.IDPM = i.REFERENCEPM
                    AND l.DATMIG is not null);
  COMMIT;
END;

PROCEDURE CLEAN_IPE_ZMD_SFRA_V30 IS

BEGIN
 /* DELETE FROM IPE_SFRA_ZMD_V30_TMP it1
        WHERE it1.REFERENCEPM IS NULL;
  COMMIT;*/

/*  UPDATE IPE_SFRA_ZMD_V30_TMP it1 set it1.ETATIMMEUBLE = UPPER(PKG_TOOLS.TRANSLATE(it1.ETATIMMEUBLE));
  UPDATE IPE_SFRA_ZMD_V30_TMP it1 set it1.ETATPM = UPPER(PKG_TOOLS.TRANSLATE(it1.ETATPM));
  COMMIT;*/

 /* DELETE FROM IPE_SFRA_ZMD_V30_TMP it
        WHERE it.ETATIMMEUBLE NOT IN ('CIBLE', 'SIGNE','EN COURS DE DEPLOIEMENT', 'DEPLOYE')
          AND it.ETATPM       NOT IN ('EN COURS DE DEPLOIEMENT', 'DEPLOYE');*/

  /*DELETE FROM IPE_SFRA_ZMD_V30_TMP it
        WHERE NOT EXISTS (SELECT 1
                            FROM SOUSCRIPTION s
                           WHERE it.CODEINSEEPM = s.COD_INSEE
                             AND s.COD_OI       = 'SFMD');
  COMMIT;*/
       -- TODO : vérifier si on utilise la date de début, date de fin de la souscription
       --       dans notre pour le codeinsee du pm
  NULL;
END;

PROCEDURE CLEAN_IPE_ZSP_FT_V30 IS

BEGIN
  /*DELETE FROM IPE_FT_ZSP_V30_TMP it1
        WHERE it1.REFERENCEPM IS NULL;
  COMMIT;*/

  /*UPDATE IPE_FT_ZSP_V30_TMP it1 set it1.ETATIMMEUBLE = UPPER(PKG_TOOLS.TRANSLATE(it1.ETATIMMEUBLE));
  UPDATE IPE_FT_ZSP_V30_TMP it1 set it1.ETATPM = UPPER(PKG_TOOLS.TRANSLATE(it1.ETATPM));*/
  --COMMIT;

  /*DELETE FROM IPE_FT_ZSP_V30_TMP it
        WHERE it.ETATIMMEUBLE NOT IN ('CIBLE', 'SIGNE','EN COURS DE DEPLOIEMENT', 'DEPLOYE')
          AND it.ETATPM       NOT IN ('EN COURS DE DEPLOIEMENT', 'DEPLOYE')
          AND NOT EXISTS (SELECT 1
                            FROM LST_CMN_ZTD_ZSP l
                           WHERE l.CODE_INSEE = it.CODEINSEEIMMEUBLE);*/

  /*DELETE FROM IPE_FT_ZSP_V30_TMP it
        WHERE NOT EXISTS (SELECT 1
                            FROM SOUSCRIPTION s
                           WHERE it.CODEINSEEPM = s.COD_INSEE
                             AND s.COD_OI       = 'FTEL')
          AND NOT EXISTS (SELECT 1
                            FROM LST_CMN_ZTD_ZSP l
                           WHERE l.CODE_INSEE = it.CODEINSEEIMMEUBLE);
  COMMIT;*/
       -- TODO : vérifier si on utilise la date de début, date de fin de la souscription
       --       dans notre pour le codeinsee du pm
  DELETE FROM IPE_FT_ZSP_V30_TMP i
   WHERE EXISTS (SELECT 1
                   FROM LST_PM_OF_TO_SFOR l
                  WHERE l.IDPM = i.REFERENCEPM
                    AND l.DATMIG is not null);
  COMMIT;
END;

----------------------------------------------------------
     --/ FIN  POST TRAITEMENT IPE  --
----------------------------------------------------------
----------------------------------------------------------
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
FUNCTION DELTA_IPE_OSS_V10(P_CODOI               IN REF_OI.COD_OI%TYPE,
                           P_IMM_ID              IN ADR_IMM_OI.IMM_ID%TYPE,
                           P_REFERENCEPM         IN ADR_IMM_OI.REFERENCEPM%TYPE,
                           P_ETATIMMEUBLE        IN ADR_IMM_OI.ETATIMMEUBLE%TYPE)
RETURN NUMBER IS
vDelta NUMBER;
-- Pour optimiser, on fait la comparaison que pour les OC
CURSOR C_VERIF_OC IS
  SELECT 1
    FROM ETAPM eta,
         PM    pm
   WHERE pm.IDPM      = P_REFERENCEPM
     AND eta.etapm_id = pm.etapm_id
     AND eta.Etapm    = 'OVC';
R_VERIF_OC C_VERIF_OC%ROWTYPE;
vFoundOC   BOOLEAN;
-- Rechercher delta
CURSOR C_VERIF_DELTA IS
  SELECT 1
    FROM ADR_IMM_OI aoi
   WHERE aoi.REFERENCEPM = P_REFERENCEPM
     AND aoi.IMM_ID      = P_IMM_ID
     AND aoi.CODOI       = P_CODOI
     AND ((aoi.etatimmeuble <> P_ETATIMMEUBLE AND P_ETATIMMEUBLE IN ('DEPLOYE','Déployé'))
          );
R_VERIF_DELTA C_VERIF_DELTA%ROWTYPE;
vFoundDelta   BOOLEAN;
BEGIN
  OPEN C_VERIF_OC;
  FETCH C_VERIF_OC INTO R_VERIF_OC;
  vFoundOC := C_VERIF_OC%FOUND;
  CLOSE C_VERIF_OC;

  IF not vFoundOC THEN
    vDelta := 0;
  ELSE
    OPEN C_VERIF_DELTA;
    FETCH C_VERIF_DELTA INTO R_VERIF_DELTA;
    vFoundDelta := C_VERIF_DELTA%FOUND;
    CLOSE C_VERIF_DELTA;

    IF vFoundDelta THEN
      vDelta := 1;
    ELSE
      vDelta := 0;
    END IF;

  END IF;

  RETURN vDelta;
END;

PROCEDURE POS_TRT_IPE_V10 (P_CODOI   IN REF_OI.COD_OI%TYPE,
                           P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
-- Les informations du fichier
CURSOR C_INFO_FIC IS
  SELECT fio.NOM_FIC,
         fio.REP_FIC,
         fio.EMETTEUR
    FROM FILE_IO fio
   WHERE fio.FILE_ID = P_FILE_ID;
R_INFO_FIC C_INFO_FIC%ROWTYPE;

CURSOR C_PRJPM (vRefPM IPE.REFERENCEPM%TYPE) IS
  SELECT prj.PRJPM_ID,
         prj.PART_ADD
    FROM PRJPM prj,
         PM    pm
   WHERE pm.IDPM    = vRefPM
     AND prj.GEO_ID = pm.GEO_ID;
R_PRJPM   C_PRJPM%ROWTYPE;
vFoundPrj BOOLEAN;

V_CUR       SYS_REFCURSOR;
R_CUR       IPE_NUME_TMP%ROWTYPE;

V_CUR_NB     SYS_REFCURSOR;
V_CUR_NB_DPL SYS_REFCURSOR;
V_CUR_NB_DOUBLON_IMB  SYS_REFCURSOR;


vtableName  VARCHAR2(100);
vNB_REC     NUMBER;
vNB_REC_DPL NUMBER;
vCtrlNbRec  NUMBER;
vCtrlAllTol NUMBER;
vControleOC NUMBER;
vImm_id     NUMBER;
vAdr_Imm_Oi_Id NUMBER;
vIS_NEW_FOR_OI_ONLY NUMBER;
vIS_MAJ_OSS         NUMBER;
vNomIfcOut          VARCHAR2(100);
vId_Preparation     NUMBER;
v_Fileio_OUT        NUMBER;
vProtocol           VARCHAR2(5);
vCtrlAdr            NUMBER;
vCtrlAdrItg         NUMBER;
vCtrlAdrItg_za      NUMBER;
vCtrlAdr_za         NUMBER;
v_compt             NUMBER;
vCATRACLGMT_CAL   ADR_IMM_OI.CATRACLGMT_CAL%TYPE;
vNB_DOUBLON_IMB     NUMBER;
-----------------------------------------
-- les variables pour synthèse traitement
vNBLGNIPE NUMBER;
vNBLGNTRT NUMBER;
-----------------------------------------
CURSOR C_VERIF_BLK(P_IDENTIFIANTIMMEUBLE ADR_BLK.IDENTIFIANTIMMEUBLE%TYPE) IS
  SELECT 1
    FROM ADR_BLK a
   WHERE a.IDENTIFIANTIMMEUBLE = P_IDENTIFIANTIMMEUBLE
     AND a.BLK_VALID = 1
     AND a.CODOI     = P_CODOI;
R_VERIF_BLK C_VERIF_BLK%ROWTYPE;
vFoundBlk   BOOLEAN;
vBlk        VARCHAR2(3);

--------------------------------------------------
-- récupération de la table temporaire
CURSOR C_GET_TMP IS
  SELECT flx.IPE_ZTD_TMP AS IPE_TMP
    FROM PART_FLX   flx,
         REF_OI_PRM rop,
         REF_OI     roi
   WHERE roi.COD_OI = P_CODOI
     AND rop.COD_OI = roi.COD_OI
     AND rop.PRTCL  = '1.0'
     AND flx.COD_PART_FLUX = rop.COD_PART_FLUX;
R_GET_TMP C_GET_TMP%ROWTYPE;
vFoundTmp BOOLEAN;

vMajOss   NUMBER;

CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = P_FILE_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
v_score_dep_imb NUMBER;
v_score_dep_pm NUMBER;
v_score_blk NUMBER;
v_score NUMBER;
BEGIN
  v_compt := 0;
  vProtocol := '1.0';

  vAdr_Imm_Oi_Id := NULL;
  vCATRACLGMT_CAL := NULL;

  -- Récupératoin de la table temporaire
  OPEN C_GET_TMP;
  FETCH C_GET_TMP INTO R_GET_TMP;
  vFoundTmp := C_GET_TMP%FOUND;
  CLOSE C_GET_TMP;

  IF vFoundTmp THEN
    vtableName :=  R_GET_TMP.IPE_TMP;
  END IF;

  V_CUR_NB := NAT_FTTH_OI.GET_FTTH_NB_REC(vtableName);
  LOOP
    FETCH V_CUR_NB INTO vNB_REC;
    EXIT WHEN V_CUR_NB%NOTFOUND;
  END LOOP;

  -- On récupère le nombre de lignes DEPLOYE
  V_CUR_NB_DPL := NAT_FTTH_OI.GET_FTTH_NB_REC_DPL(vtableName);
  LOOP
    FETCH V_CUR_NB_DPL INTO vNB_REC_DPL;
    EXIT WHEN V_CUR_NB_DPL%NOTFOUND;
  END LOOP;

  -- On récupère le nombre de doublon IMB
  V_CUR_NB_DOUBLON_IMB := NAT_FTTH_OI.GET_FTTH_NB_IMB_EN_DOUBLON(vtableName);
  LOOP
    FETCH V_CUR_NB_DOUBLON_IMB INTO vNB_DOUBLON_IMB;
    EXIT WHEN V_CUR_NB_DOUBLON_IMB%NOTFOUND;
  END LOOP;

  plog.info('POST TRAITEMENT IPE : Calcul nombre des IMB en doublon du fichier',
                     'FILEID', P_FILE_ID,
                     'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'),
                     'Nombre des IMB en doublons dans le fichier', vNB_DOUBLON_IMB);

  -- Controle IPE
  vCtrlNbRec := NAT_FF1_CTRL_IPE.CTRL_NB_RECORDS_IPE (P_CODOI,
                                                      vProtocol,
                                                      vNB_REC,
                                                      P_FILE_ID);
  vNBLGNIPE := vNB_REC;
  vNBLGNTRT := 0;

  vCtrlAllTol := NAT_FF1_CTRL_IPE.CTRL_ALL_TOLERANCE(P_CODOI,
                                                     'ZTD',
                                                     P_FILE_ID,
                                                     '1.0',
                                                     vNB_REC_DPL
                                                     );

  IF vCtrlNbRec = 1 AND vCtrlAllTol = 1 THEN
    DELETE FROM IPE i
           WHERE i.CODOI  = P_CODOI
             AND i.TYPZON = 'ZTD';

    OPEN C_INFO_FIC;
    FETCH C_INFO_FIC INTO R_INFO_FIC;
    CLOSE C_INFO_FIC;
    V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(vtableName);
    LOOP
      FETCH V_CUR INTO R_CUR;
      EXIT WHEN V_CUR%NOTFOUND;

      v_compt := v_compt + 1;
      vImm_id := NULL;

      -- L'adresse peut-elle être intégrée ?
      vCtrlAdrItg := NAT_FF1_CTRL_ADR.CTRL_ITG_ADR(R_CUR.CODEADRESSEIMMEUBLE,
                                                   R_CUR.CODEINSEEIMMEUBLE,
                                                   R_CUR.IDENTIFIANTIMMEUBLE);
      --Tous les controles des alertes
      vCtrlAdr := 0;
      IF (vCtrlAdrItg = 1) THEN
        vCtrlAdr := NAT_FF1_CTRL_ADR.CTRL_ALL_ADRESSE(P_CODOI,
                                                      R_CUR.REFERENCEPM,
                                                      R_CUR.CODEADRESSEIMMEUBLE,
                                                      R_CUR.CODEINSEEIMMEUBLE,
                                                      R_CUR.CODERIVOLIIMMEUBLE,
                                                      R_CUR.ETATIMMEUBLE,
                                                      R_CUR.ETATPM,
                                                      R_CUR.NOMBRELOGEMENTSPM,
                                                      R_CUR.NUMEROVOIEIMMEUBLE,
                                                      R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                      R_CUR.IDENTIFIANTIMMEUBLE,
                                                      R_CUR.BATIMENTIMMEUBLE);


        IF vCtrlAdr = 1 THEN
           OPEN C_PRJPM(R_CUR.REFERENCEPM);
           FETCH C_PRJPM INTO R_PRJPM;
           vFoundPrj := C_PRJPM%FOUND;
           CLOSE C_PRJPM;

           IF vFoundPrj THEN
             CASE R_PRJPM.PART_ADD
               WHEN 'SFR' THEN
                 vControleOC := NAT_FF1_CTRL.CTRL_IPE_DATE_OC(R_PRJPM.PRJPM_ID ,R_CUR.REFERENCEPM);
               WHEN 'OF_' THEN
                 vControleOC := NAT_FF1_CTRL_OF.CTRL_OC_DATE_OC(R_PRJPM.PRJPM_ID ,R_CUR.REFERENCEPM);
               WHEN 'SEQ' THEN
                 vControleOC := NAT_FF1_CTRL_SEQ.CTRL_OC_DATE_OC(R_PRJPM.PRJPM_ID ,R_CUR.REFERENCEPM);
             END CASE;
          ELSE
             vControleOC := 1;
          END IF;

          IF vControleOC = 1 THEN
            -- Contrôle de présence
            --> On vérifie si l'immeuble n'existe pas pour cette OI
              --> Si l'immeuble n'existe pas pour cette OI, on vérifie si l'immeuble existe pour une autre OI
              --> Si c'est la cas, on ne va pas insérer une nouvelle ligne dans la table des immeubles
            vImm_id := NAT_FF1_TRT_FLX.GET_IMM_FROM_ADR(P_CODOI,
                                                        R_CUR.IDENTIFIANTIMMEUBLE,
                                                        vAdr_Imm_Oi_Id);
            -- Récupération des Scores
           v_score_dep_imb := 0;
           -- Score deploiement PM
           v_score_dep_pm := 0 ;
           --Score blacklistage
           v_score_blk := NAT_FF1_ADR.GET_SCORE_BLK(P_IDENTIFIANTIMMEUBLE => R_CUR.IDENTIFIANTIMMEUBLE,
                                                    P_HEXACLE             => R_CUR.CODEADRESSEIMMEUBLE,
                                                    P_CODOI               => 'TEST');

           --Score final
           v_score := NAT_FF1_ADR.GET_SCORE(P_SOCRE_DEP_IMM => v_score_dep_imb,
                                            P_SOCRE_DEP_PM => v_score_dep_pm,
                                            P_SOCRE_BLK    => v_score_blk);

           /* IF (vImm_id IS NULL) OR (vImm_id IS NOT NULL AND vIS_NEW_FOR_OI_ONLY = 1)  THEN --> On est sure que l'immeuble n'exite pas*/
              IF vImm_id IS NULL THEN
                -- Création de l'immeuble
                NAT_FF1_TRT_FLX.NEW_IMMEUBLE(vImm_id,
                                             R_CUR.CODEADRESSEIMMEUBLE,
                                             vtableName);
              ELSE
                -- MAJ de l'info adresse
                NAT_FF1_TRT_FLX.SET_IMMEUBLE(vImm_id,
                                             R_CUR.CODEADRESSEIMMEUBLE,
                                             vtableName);
              END IF;
            IF vAdr_Imm_Oi_Id IS NULL THEN
              -- Insertion de l'adresse :
              BEGIN
                OPEN C_VERIF_BLK(R_CUR.IDENTIFIANTIMMEUBLE);
                FETCH C_VERIF_BLK INTO R_VERIF_BLK;
                vFoundBlk := C_VERIF_BLK%FOUND;
                CLOSE C_VERIF_BLK;

                IF vFoundBlk THEN
                  vBlk := 'OUI';
                ELSE
                  vBlk := 'NON';
                END IF;

                NAT_FTTH_OI.INS_ADR_IMM_OI(P_REFERENCEPM                  => R_CUR.REFERENCEPM,
                                             P_IMM_ID                       => vImm_id,
                                             P_IDENTIFIANTIMMEUBLE          => R_CUR.IDENTIFIANTIMMEUBLE,
                                             P_CODERIVOLIIMMEUBLE           => R_CUR.CODERIVOLIIMMEUBLE,
                                             P_CODEINSEEIMMEUBLE            => R_CUR.CODEINSEEIMMEUBLE,
                                             P_CODEPOSTALIMMEUBLE           => R_CUR.CODEPOSTALIMMEUBLE,
                                             P_VILLEIMMEUBLE                => R_CUR.VILLEIMMEUBLE,
                                             P_CODEADRESSEIMMEUBLE          => R_CUR.CODEADRESSEIMMEUBLE,
                                             P_TYPEVOIEIMMEUBLE             => R_CUR.TYPEVOIEIMMEUBLE,
                                             P_NOMVOIEIMMEUBLE              => R_CUR.NOMVOIEIMMEUBLE,
                                             P_NUMEROVOIEIMMEUBLE           => R_CUR.NUMEROVOIEIMMEUBLE,
                                             P_COMPLEMENTNUMEROVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                             P_BATIMENTIMMEUBLE             => R_CUR.BATIMENTIMMEUBLE,
                                             P_NBRELOGEMENTSINFOPREALABLES  => TO_NUMBER(R_CUR.NOMBRELOGEMENTSINFOPREALABLES),
                                             P_ETATIMMEUBLE                 => R_CUR.ETATIMMEUBLE,
                                             P_ETATPM                       => R_CUR.ETATPM,
                                             P_DATEINSTALLATIONPM           => TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD') ,
                                             P_CODERIVOLIPM                 => R_CUR.CODERIVOLIPM,
                                             P_CODEINSEEPM                  => R_CUR.CODEINSEEPM,
                                             P_CODEPOSTALPM                 => R_CUR.CODEPOSTALPM,
                                             P_VILLEPM                      => R_CUR.VILLEPM,
                                             P_CODEADRESSEPM                => R_CUR.CODEADRESSEPM,
                                             P_TYPEVOIEPM                   => R_CUR.TYPEVOIEPM,
                                             P_NOMVOIEPM                    => R_CUR.NOMVOIEPM,
                                             P_NUMEROVOIEPM                 => R_CUR.NUMEROVOIEPM,
                                             P_COMPLEMENTVOIEPM             => R_CUR.COMPLEMENTVOIEPM,
                                             P_DATE_IMP                     => R_CUR.DATE_IMP,
                                             P_FILE_ID                      => R_CUR.FILE_ID,
                                             P_BATIMENTPM                   => NULL,
                                             P_CODOI                        => P_CODOI,
                                             P_TYPZON                       => 'ZTD',
                                             P_DATENVOSSFAI                 => NULL,
                                             P_NOMBREPMTECHNIQUES           => NULL,
                                             P_TYPEIMMEUBLE                 => NULL,
                                             P_TYPEPROJECTIONGEOGRAPHIQUE   => NULL,
                                             P_COORDONNEEPMX                => NULL,
                                             P_COORDONNEEPMY                => NULL,
                                             P_COORDONNEEIMMEUBLEX          => NULL,
                                             P_COORDONNEEIMMEUBLEY          => NULL,
                                             P_TYPEZONE                     => NULL,
                                             P_BLACKLIST                    => vBlk,
                                             P_MAJ_OSSF                     => 1,
                                             P_ETAIMMSIR                    => 'A',
                                             P_SRCADR                       => 'IPE',
                                             P_ACRDGESTNAIREIMM             => NULL,
                                             P_HEXABTL                      => NULL,
                                             P_DATEMAJHEXABTL               => NULL,
                                             P_TYPEINGENIERIE               => NULL,
                                             P_DATECABLAGEADRESSE           => NULL,
                                             P_TYPRACCOPBPTO                => NULL,
                                             P_TYPPBO                       => NULL,
                                             P_DATEMISEENSERVICECOMEPM      => TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD'),
                                             P_DATMESCOMIMM                 => NULL,
                                             P_DATDEBACPTCMDACSS            => NULL,
                                             P_TYPEEMPLACEMENTPM            => NULL,
                                             P_CATRACLGMT_CAL               => vCATRACLGMT_CAL,
                                             P_CODEHEXACLEVOIE              => NULL,
                                             P_ADR_IMM_OI_ID                => vAdr_Imm_Oi_Id,
                                             P_SCORE_DEPL_IMB               => v_score_dep_imb,
                                             P_SCORE_DEPL_PM                => v_score_dep_pm ,
                                             P_SCORE_BLK                    => v_score_blk,
                                             P_SCORE                        => v_score,
                                             P_BLOCAGEELIGIBILITE           => NULL,
                                             P_ORIGINEBLOCAGE               => NULL,
                                             P_MOTIFBLOCAGE                 => NULL,
                                             P_DATPREVDEBLOCAGE             => NULL,
                                             P_DATDEBUTBLOCAGEELIG          => NULL,
                                             P_RACCORDEMENTLONG             => NULL,
                                             P_REFPRDM                      => NULL,
                                             P_SUPPORTINFRAFTTE             => NULL,
                                             P_ETATIMMPBSPECIFIQUE          => NULL);

              EXCEPTION
                WHEN OTHERS THEN
                  plog.ERROR('Erreur lors de l''insertion adresse 1.0 dans la table finale','SQLERRM', SQLERRM);
                  plog.full_error_backtrace('File_ID',P_FILE_ID);
                  plog.full_call_stack('File_ID',P_FILE_ID);
              END;
            ELSE --> Dans le cas où l'immeuble existe déjà
              BEGIN
                -- MAJ de l'info adresse
                NAT_FF1_TRT_FLX.SET_IMMEUBLE(vImm_id,
                                           R_CUR.CODEADRESSEIMMEUBLE,
                                           vtableName);

               vMajOss := NAT_FTTH_OI.DELTA_IPE_OSS_V10(P_CODOI => P_CODOI,
                                              P_IMM_ID => vImm_id,
                                              P_REFERENCEPM => R_CUR.REFERENCEPM,
                                              P_ETATIMMEUBLE => R_CUR.ETATIMMEUBLE);


                NAT_FTTH_OI.SET_ADR_IMM_OI(P_REFERENCEPM                  => R_CUR.REFERENCEPM,
                                           P_IMM_ID                       => vImm_id,
                                           P_IDENTIFIANTIMMEUBLE          => R_CUR.IDENTIFIANTIMMEUBLE,
                                           P_CODERIVOLIIMMEUBLE           => R_CUR.CODERIVOLIIMMEUBLE,
                                           P_CODEINSEEIMMEUBLE            => R_CUR.CODEINSEEIMMEUBLE,
                                           P_CODEPOSTALIMMEUBLE           => R_CUR.CODEPOSTALIMMEUBLE,
                                           P_VILLEIMMEUBLE                => R_CUR.VILLEIMMEUBLE,
                                           P_CODEADRESSEIMMEUBLE          => R_CUR.CODEADRESSEIMMEUBLE,
                                           P_TYPEVOIEIMMEUBLE             => R_CUR.TYPEVOIEIMMEUBLE,
                                           P_NOMVOIEIMMEUBLE              => R_CUR.NOMVOIEIMMEUBLE,
                                           P_NUMEROVOIEIMMEUBLE           => R_CUR.NUMEROVOIEIMMEUBLE,
                                           P_COMPLEMENTNUMEROVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                           P_BATIMENTIMMEUBLE             => R_CUR.BATIMENTIMMEUBLE,
                                           P_NBRELOGEMENTSINFOPREALABLES  => TO_NUMBER(R_CUR.NOMBRELOGEMENTSINFOPREALABLES),
                                           P_ETATIMMEUBLE                 => R_CUR.ETATIMMEUBLE,
                                           P_ETATPM                       => R_CUR.ETATPM,
                                           P_DATEINSTALLATIONPM           => TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD'),
                                           P_CODERIVOLIPM                 => R_CUR.CODERIVOLIPM,
                                           P_CODEINSEEPM                  => R_CUR.CODEINSEEPM,
                                           P_CODEPOSTALPM                 => R_CUR.CODEPOSTALPM,
                                           P_VILLEPM                      => R_CUR.VILLEPM,
                                           P_CODEADRESSEPM                => R_CUR.CODEADRESSEPM,
                                           P_TYPEVOIEPM                   => R_CUR.TYPEVOIEPM,
                                           P_NOMVOIEPM                    => R_CUR.NOMVOIEPM,
                                           P_NUMEROVOIEPM                 => R_CUR.NUMEROVOIEPM,
                                           P_COMPLEMENTVOIEPM             => R_CUR.COMPLEMENTVOIEPM,
                                           P_DATE_IMP                     => R_CUR.DATE_IMP,
                                           P_FILE_ID                      => R_CUR.FILE_ID,
                                           P_BATIMENTPM                   => NULL,
                                           P_CODOI                        => P_CODOI,
                                           P_TYPZON                       => 'ZTD',
                                           P_DATENVOSSFAI                 => NULL,
                                           P_NOMBREPMTECHNIQUES           => NULL,
                                           P_TYPEIMMEUBLE                 => NULL,
                                           P_TYPEPROJECTIONGEOGRAPHIQUE   => NULL,
                                           P_COORDONNEEPMX                => NULL,
                                           P_COORDONNEEPMY                => NULL,
                                           P_COORDONNEEIMMEUBLEX          => NULL,
                                           P_COORDONNEEIMMEUBLEY          => NULL,
                                           P_TYPEZONE                     => NULL,
                                           P_BLACKLIST                    => 0,
                                           P_MAJ_OSSF                     => vMajOss,
                                           P_ETAIMMSIR                    => 'M',
                                           P_SRCADR                       => 'IPE',
                                           P_ACRDGESTNAIREIMM             => NULL,
                                           P_HEXABTL                      => NULL,
                                           P_DATEMAJHEXABTL               => NULL,
                                           P_TYPEINGENIERIE               => NULL,
                                           P_DATECABLAGEADRESSE           => NULL,
                                           P_TYPRACCOPBPTO                => NULL,
                                           P_TYPPBO                       => NULL,
                                           P_DATEMISEENSERVICECOMEPM      => TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD'),
                                           P_DATMESCOMIMM                 => NULL,
                                           P_DATDEBACPTCMDACSS            => NULL,
                                           P_TYPEEMPLACEMENTPM            => NULL,
                                           P_CATRACLGMT_CAL               => vCATRACLGMT_CAL,--appel au fonction get_crl?
                                           P_CODEHEXACLEVOIE              => NULL,
                                           P_ADR_IMM_OI_ID                => vAdr_Imm_Oi_Id,
                                           P_SCORE_DEPL_IMB               => v_score_dep_imb,
                                           P_SCORE_DEPL_PM                => v_score_dep_pm,
                                           P_SCORE_BLK                    => v_score_blk,
                                           P_SCORE                        => v_score,
                                           P_BLOCAGEELIGIBILITE           => NULL,
                                           P_ORIGINEBLOCAGE               => NULL,
                                           P_MOTIFBLOCAGE                 => NULL,
                                           P_DATPREVDEBLOCAGE             => NULL,
                                           P_DATDEBUTBLOCAGEELIG          => NULL,
                                           P_RACCORDEMENTLONG             => NULL,
                                           P_REFPRDM                      => NULL,
                                           P_SUPPORTINFRAFTTE             => NULL,
                                           P_ETATIMMPBSPECIFIQUE          => NULL);

              EXCEPTION
                WHEN OTHERS THEN
                  plog.ERROR('Erreur lors de l''insertion adresse 1.0 dans la table finale','SQLERRM', SQLERRM);
                  plog.full_error_backtrace('File_ID',P_FILE_ID);
                  plog.full_call_stack('File_ID',P_FILE_ID);
              END;
            END IF;
            BEGIN
                NAT_FF1_TRT_FLX.INS_IPE(R_CUR.IDENTIFIANTIMMEUBLE,
                                        R_CUR.CODERIVOLIIMMEUBLE,
                                        R_CUR.CODEINSEEIMMEUBLE,
                                        R_CUR.CODEPOSTALIMMEUBLE,
                                        R_CUR.VILLEIMMEUBLE,
                                        R_CUR.CODEADRESSEIMMEUBLE,
                                        R_CUR.TYPEVOIEIMMEUBLE,
                                        R_CUR.NOMVOIEIMMEUBLE,
                                        R_CUR.NUMEROVOIEIMMEUBLE,
                                        R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                        R_CUR.BATIMENTIMMEUBLE,
                                        R_CUR.NOMBRELOGEMENTSINFOPREALABLES,
                                        R_CUR.ETATIMMEUBLE,
                                        TO_DATE(R_CUR.DATESIGNATURECONVENTION,'YYYY/MM/DD'),
                                        R_CUR.GESTIONNAIREIMMEUBLE,
                                        R_CUR.CODEPOSTALSYNDIC,
                                        R_CUR.VILLESYNDIC,
                                        R_CUR.TYPEVOIESYNDIC,
                                        R_CUR.NOMVOIESYNDIC,
                                        R_CUR.NUMEROVOIESYNDIC,
                                        NULL,
                                        TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD'),
                                        TO_DATE(R_CUR.DATEDERNIEREMODIFICATION,'YYYY/MM/DD'),
                                        R_CUR.REFERENCEPM,
                                        R_CUR.ETATPM,
                                        TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD'),
                                        R_CUR.CODERIVOLIPM,
                                        R_CUR.CODEINSEEPM,
                                        R_CUR.CODEPOSTALPM,
                                        R_CUR.VILLEPM,
                                        R_CUR.CODEADRESSEPM,
                                        R_CUR.TYPEVOIEPM,
                                        R_CUR.NOMVOIEPM,
                                        R_CUR.NUMEROVOIEPM,
                                        R_CUR.COMPLEMENTVOIEPM,
                                        R_CUR.TYPEINGENIERIE,
                                        R_CUR.FIBREDEDIEELIBRE,
                                        TO_NUMBER(replace(R_CUR.NOMBRELOGEMENTSPM,' ','')),
                                        TO_NUMBER(replace(R_CUR.NOMBRECOLONNESMONTANTES,' ','')),
                                        TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD'),
                                        R_CUR.DATE_IMP,
                                        R_CUR.FILE_ID,
                                        0,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        P_CODOI,
                                        vImm_id,
                                        'ZTD',
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL, -- p_datmescomimm => :p_datmescomimm,
                                        NULL, -- p_immeubleneuf => :p_immeubleneuf,
                                        NULL, -- p_datprvlivimmneuf => :p_datprvlivimmneuf,
                                        NULL, -- p_brassagepmoi => :p_brassagepmoi,
                                        NULL, -- p_refconsul => :p_refconsul,
                                        NULL, -- p_codhexavoie => :p_codhexavoie,
                                        NULL, -- p_codeban => :p_codeban,
                                        NULL, -- p_chmprsv1 => :p_chmprsv1,
                                        NULL, -- p_chmprsv2 => :p_chmprsv2,
                                        NULL, -- p_chmprsv3 => :p_chmprsv3,
                                        NULL, -- p_datdebacptcmdacss => :p_datdebacptcmdacss,
                                        NULL, -- p_datdebfourcrcmdacss => :p_datdebfourcrcmdacss
                                        NULL, -- P_CODEOI_IPE                      IN IPE.CODEOI_IPE%TYPE,
                                        NULL, -- P_REFPRDM                         IN IPE.REFPRDM%TYPE,
                                        NULL, -- P_REFLIENPMPRDM                   IN IPE.REFLIENPMPRDM%TYPE,
                                        NULL, -- P_LONGLGNIMM                      IN IPE.LONGLGNIMM%TYPE,
                                        NULL, -- P_REFPBO                          IN IPE.REFPBO%TYPE,
                                        NULL, -- P_DATMADPBO                       IN IPE.DATMADPBO%TYPE,
                                        NULL, -- P_NBLOGMTPBO                      IN IPE.NBLOGMTPBO%TYPE,
                                        NULL, -- P_NBLOGMTMADPM                    IN IPE.NBLOGMTMADPM%TYPE,
                                        NULL, -- P_CHMPRSV4                        IN IPE.CHMPRSV4%TYPE,
                                        NULL, -- P_CHMPRSV5                        IN IPE.CHMPRSV5%TYPE,
                                        NULL, -- P_SUSRACDMD                       IN IPE.SUSRACDMD%TYPE,
                                        NULL, -- P_TYPPBO                          IN IPE.TYPPBO%TYPE,
                                        NULL, -- P_TYPRACCOPBPTO                   IN IPE.TYPRACCOPBPTO%TYPE  ,
                                        NULL, -- P_CONDSYNDIC                      IN IPE.CONDSYNDIC%TYPE
                                        --3.1
                                        NULL,-- P_RACCORDEMENTLONG                IN IPE.RACCORDEMENTLONG%TYPE,
                                        NULL,--P_ETATZAPM                        IN IPE.ETATZAPM%TYPE,
                                        NULL,--P_DATEZAPMCIBLE                   IN IPE.DATEZAPMCIBLE%TYPE,
                                        NULL,--P_SUPPORTINFRAFTTE                IN IPE.SUPPORTINFRAFTTE%TYPE,
                                        NULL,--P_ETATIMMPBSPECIFIQUE             IN IPE.ETATIMMPBSPECIFIQUE%TYPE,
                                        NULL,--P_BLOCAGEELIGIBILITE              IN IPE.BLOCAGEELIGIBILITE%TYPE,
                                        NULL,--P_MOTIFBLOCAGE                    IN IPE.MOTIFBLOCAGE%TYPE,
                                        NULL,--P_DATPREVDEBLOCAGE                IN IPE.DATPREVDEBLOCAGE%TYPE,
                                        NULL,--P_DATDEBUTBLOCAGEELIG             IN IPE.DATDEBUTBLOCAGEELIG%TYPE,
                                        NULL,--P_CHMPRSV6                        IN IPE.CHMPRSV6%TYPE,
                                        NULL--P_CHMPRSV7                        IN IPE.CHMPRSV7%TYPE);
                                        );
            EXCEPTION
              WHEN OTHERS THEN
                plog.ERROR('Erreur lors de l''insertion IPE 1.0 dans la table finale','SQLERRM', SQLERRM);
                plog.full_error_backtrace('File_ID',P_FILE_ID);
                plog.full_call_stack('File_ID',P_FILE_ID);
            END;

            -- Mise à jour de la table ADR_PM
            IF R_CUR.REFERENCEPM IS NOT NULL THEN
              BEGIN
                NAT_FF1.UPD_INFO_ADR_PM_IPE(R_CUR.REFERENCEPM,P_FILE_ID,'IPE','1.0');
                EXCEPTION
                WHEN OTHERS THEN
                plog.ERROR('Erreur lors de la mise à jour de la table ADR_PM','SQLERRM', SQLERRM,'','');
              END;
            END IF;

            BEGIN
              vCATRACLGMT_CAL := SUBSTR(NAT_FTTH_OI.GET_CRL(R_CUR.CODEINSEEIMMEUBLE,
                                                            R_CUR.CODERIVOLIIMMEUBLE,
                                                            R_CUR.NUMEROVOIEIMMEUBLE,
                                                            R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                            R_CUR.IDENTIFIANTIMMEUBLE,
                                                            R_CUR.BATIMENTIMMEUBLE,
                                                            R_CUR.REFERENCEPM,
                                                            R_CUR.CODEADRESSEIMMEUBLE),0,100);
            EXCEPTION
              WHEN OTHERS THEN
                vCATRACLGMT_CAL := NULL;
            END;
            IF vCATRACLGMT_CAL IS NOT NULL AND vAdr_Imm_Oi_Id IS NOT NULL THEN
              UPDATE ADR_IMM_OI a
                 SET a.CATRACLGMT_CAL = vCATRACLGMT_CAL
               WHERE a.ADR_IMM_OI_ID  = vAdr_Imm_Oi_Id;
            END IF;
          END IF;
        END IF;
      END IF;
      IF (v_compt = 100000) THEN
        COMMIT;
        v_compt := 0;
      END IF;
      vNBLGNTRT := vNBLGNTRT + 1;
    END LOOP;

    -- Gestion des immeubles supprimés
    NAT_FF1_TRT_FLX.SET_IMM_DEL_OI(P_CODOI, P_FILE_ID,'ZTD');

    -- Lancement du blacklistage
    NAT_FF1_ADR.RUN_BLK_ALL(P_CODOI);

    BEGIN
      CASE P_CODOI
        WHEN 'FTEL' THEN
          vNomIfcOut := 'FTTH_SIG_IPE_OUT_FT';
        WHEN 'SFRA' THEN
          vNomIfcOut := 'FTTH_SIG_HBIPE_OUT_SFR';
        WHEN 'SFMD' THEN
          vNomIfcOut := 'FTTH_SIG_HBIPE_OUT_SFR';
        WHEN 'NUME' THEN
          vNomIfcOut := 'FTTH_SIG_IPE_OUT_NC';
        WHEN 'FREE' THEN
          vNomIfcOut := 'FTTH_SIG_IPE_OUT_FREE';
        ELSE
          vNomIfcOut := 'FTTH_SIG_IPE_OUT_SEQ';
      END CASE;
      CMN_IFC.GENERER_PREPARATION(P_ID_PREPARATION => vId_Preparation);

      CMN_IFC.ADD_FILE_PREPARATION(P_ID_PREPARATION => vId_Preparation,
                                   P_FILE_ID_SRC => P_FILE_ID,
                                   P_INTERFACE => vNomIfcOut,
                                   P_NOM_FIC => R_INFO_FIC.NOM_FIC,
                                   P_EMETTEUR => 'REBOND',
                                   P_FILE_ID => v_Fileio_OUT);

       NAT_IFC_TRT.UPDATE_LIBVAL2('NOM_FIC_OUT',R_INFO_FIC.NOM_FIC,P_FILE_ID);
       NAT_IFC_TRT.SET_FILE_ID_SRC(v_Fileio_OUT,P_FILE_ID);
       cmn_ifc.generer_interface(vNomIfcOut,
                                 1,
                                 NULL,
                                 vId_Preparation);
     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors du rebond IPE 1.0 vers le SIG','SQLERRM', SQLERRM);
     END;

     NAT_FF1_CTRL_IPE.NEW_IPE_RECORDS_HIS(P_CODOI,'1.0',vNB_REC,SYSDATE,P_FILE_ID,NULL);

     -- Dans le cas OI TEST
     IF P_CODOI = 'TEST' THEN
       UPDATE ADR_IMM_OI a
          SET a.ELIG_RULE = 1,
              a.Elig_Adr  = 'O'
        WHERE a.FILE_ID   = P_FILE_ID;
     END IF;

     /*NAT_FTTH_OI.POS_TRT_SPVION_IPE(P_FILE_ID      => P_FILE_ID,
                                    P_TYPZON       => 'ZTD',
                                    P_CODOI        => P_CODOI,
                                    P_NBLGNIPE     => vNBLGNIPE,
                                    P_NBLGNTRT     => vNBLGNTRT);*/
   ELSE
     NAT_FF1_CTRL_IPE.SEND_MAIL_REJET_IPE(P_CODOI,'ZTD',P_FILE_ID);
   END IF;

  /*OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => P_CODOI,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);*/
END;

-----------------------------------------------------------------------------------
-- Création des PM à partir de l'IPE FT ZMD 3.0
-----------------------------------------------------------------------------------

PROCEDURE CHK_N_CREATE_PM_FTEL_ZMD_30(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
-- Récupération des PM qui n'existent pas dans ECO
CURSOR C_VERIF_PM IS
SELECT *
       FROM (SELECT DISTINCT i.REFERENCEPM,
                             i.NUMEROVOIEPM as NUMEROVOIEPM,
                             (SELECT btyp.CODVAL
                                FROM BDMVAL btyp
                               WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                 AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                             (SELECT bcomp.CODVAL
                                FROM BDMVAL bcomp
                               WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                 AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                             i.NOMVOIEPM,
                             (SELECT cmn.COD_INSEE
                                FROM BDCOM cmn
                               WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                             (SELECT DISTINCT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                 AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                             cpn.REFERENCENRO,
                             i.FILE_ID,
                             i.ETATPM
                        FROM CPN             cpn,
                             IPE_FT_ZMD_V30_TMP i
                       WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                         AND cpn.CODOI           = P_COD_OI
                         AND NOT EXISTS (SELECT 1
                                           FROM PM p
                                          WHERE p.IDPM = i.REFERENCEPM)
                         AND EXISTS ( SELECT 1
                                        FROM SOUSCRIPTION s
                                       WHERE s.COD_INSEE = i.CODEINSEEPM
                                         AND s.COD_OI    = P_COD_OI)) A

WHERE A.CODEINSEEPM IS NOT NULL
  AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL -- il faut qu'il existe au moins un code postal associé au code insee
  AND A.REFERENCENRO IS NOT NULL;

CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
  SELECT GEO_ID
    FROM PM
   WHERE IDPM = vIDPM;
R_GEO_ID C_GEO_ID%ROWTYPE;
BEGIN
  -- Création du PM avec un etat adductable
  FOR R_PM IN C_VERIF_PM LOOP
    BEGIN
      NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                         P_NOMSIT    => R_PM.REFERENCEPM,
                         P_NUMVOI    => R_PM.NUMEROVOIEPM,
                         P_TYPVOI    => R_PM.TYPEVOIEPM,
                         P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                         P_NOMVOI    => R_PM.NOMVOIEPM,
                         P_COD_INSEE => R_PM.CODEINSEEPM,
                         P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                         P_COD_OI    => P_COD_OI,
                         P_IDNRO     => R_PM.REFERENCENRO,
                         P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                         P_NOMGEO_COLOC => NULL,
                         P_TYP_ZONE     => 'ZMD',
                         P_IS_ZA        => 1);

      OPEN C_GEO_ID(R_PM.REFERENCEPM);
      FETCH C_GEO_ID INTO R_GEO_ID;
      CLOSE C_GEO_ID;

      PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'ORA','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
      ----- Création alertes
      --> Alerte 1
         -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
           -- dans le module CR MAD
         -- Cloture de l'alerte à la réception du CR MAD
     IF R_PM.ETATPM = 'DEPLOYE' THEN
       NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
     END IF;

     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via IPE 3.0','SQLERRM', SQLERRM);
         plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
         plog.full_call_stack('File_ID',R_PM.FILE_ID);
     END;
   END LOOP;
   COMMIT;
END;

PROCEDURE CHK_N_CREATE_PM_SFRA_ZMD_22(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
-- Récupération des PM qui n'existent pas dans ECO
CURSOR C_VERIF_PM IS
SELECT *
       FROM (SELECT DISTINCT i.REFERENCEPM,
                             i.NUMEROVOIEPM as NUMEROVOIEPM,
                             (SELECT btyp.CODVAL
                                FROM BDMVAL btyp
                               WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                 AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                             (SELECT bcomp.CODVAL
                                FROM BDMVAL bcomp
                               WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                 AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                             i.NOMVOIEPM,
                             (SELECT cmn.COD_INSEE
                                FROM BDCOM cmn
                               WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                             (SELECT DISTINCT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                 AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                             eli.REFERENCEPRDM as REFERENCENRO,
                             i.FILE_ID,
                             i.ETATPM
                        FROM PM_ELIGIBLES_SFR eli,
                             IPE_SFRA_ZMD_V22_TMP i
                       WHERE eli.REFERENCEPM = i.REFERENCEPM
                         AND NOT EXISTS (SELECT 1
                                           FROM PM p
                                          WHERE p.IDPM = i.REFERENCEPM)) A

WHERE A.CODEINSEEPM IS NOT NULL
  AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL -- il faut qu'il existe au moins un code postal associé au code insee
  AND A.REFERENCENRO IS NOT NULL;

CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
  SELECT GEO_ID
    FROM PM
   WHERE IDPM = vIDPM;
R_GEO_ID C_GEO_ID%ROWTYPE;
BEGIN
  -- Création du PM avec un etat adductable
  FOR R_PM IN C_VERIF_PM LOOP
    BEGIN
      NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                         P_NOMSIT    => R_PM.REFERENCEPM,
                         P_NUMVOI    => R_PM.NUMEROVOIEPM,
                         P_TYPVOI    => R_PM.TYPEVOIEPM,
                         P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                         P_NOMVOI    => R_PM.NOMVOIEPM,
                         P_COD_INSEE => R_PM.CODEINSEEPM,
                         P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                         P_COD_OI    => P_COD_OI,
                         P_IDNRO     => R_PM.REFERENCENRO,
                         P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                         P_NOMGEO_COLOC => NULL,
                         P_TYP_ZONE     => 'ZMD',
                         P_IS_ZA        => 1);

      OPEN C_GEO_ID(R_PM.REFERENCEPM);
      FETCH C_GEO_ID INTO R_GEO_ID;
      CLOSE C_GEO_ID;

      PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'SFR','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
      ----- Création alertes
      --> Alerte 1
         -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
           -- dans le module CR MAD
         -- Cloture de l'alerte à la réception du CR MAD
     IF R_PM.ETATPM = 'DEPLOYE' THEN
       NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
     END IF;

     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via IPE 2.2','SQLERRM', SQLERRM);
         plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
         plog.full_call_stack('File_ID',R_PM.FILE_ID);
     END;
   END LOOP;
   COMMIT;
END;

PROCEDURE CHK_N_CREATE_PM_SFOR_ZMD_22(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
-- Récupération des PM qui n'existent pas dans ECO
CURSOR C_VERIF_PM IS
SELECT *
       FROM (SELECT DISTINCT i.REFERENCEPM,
                             i.NUMEROVOIEPM as NUMEROVOIEPM,
                             (SELECT btyp.CODVAL
                                FROM BDMVAL btyp
                               WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                 AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                             (SELECT bcomp.CODVAL
                                FROM BDMVAL bcomp
                               WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                 AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                             i.NOMVOIEPM,
                             (SELECT cmn.COD_INSEE
                                FROM BDCOM cmn
                               WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                             (SELECT DISTINCT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                 AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                             cpn.REFERENCENRO,
                             i.FILE_ID,
                             i.ETATPM
                        FROM CPN             cpn,
                             IPE_SFRA_ZMD_V22_TMP i
                       WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                         AND cpn.CODOI           = P_COD_OI
                         AND NOT EXISTS (SELECT 1
                                           FROM PM p
                                          WHERE p.IDPM = i.REFERENCEPM)
                         AND EXISTS ( SELECT 1
                                        FROM SOUSCRIPTION s
                                       WHERE s.COD_INSEE = i.CODEINSEEPM
                                         AND s.COD_OI    = P_COD_OI)) A

WHERE A.CODEINSEEPM IS NOT NULL
  AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL -- il faut qu'il existe au moins un code postal associé au code insee
  AND A.REFERENCENRO IS NOT NULL;

CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
  SELECT GEO_ID
    FROM PM
   WHERE IDPM = vIDPM;
R_GEO_ID C_GEO_ID%ROWTYPE;
BEGIN
  -- Création du PM avec un etat adductable
  FOR R_PM IN C_VERIF_PM LOOP
    BEGIN
      NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                         P_NOMSIT    => R_PM.REFERENCEPM,
                         P_NUMVOI    => R_PM.NUMEROVOIEPM,
                         P_TYPVOI    => R_PM.TYPEVOIEPM,
                         P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                         P_NOMVOI    => R_PM.NOMVOIEPM,
                         P_COD_INSEE => R_PM.CODEINSEEPM,
                         P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                         P_COD_OI    => P_COD_OI,
                         P_IDNRO     => R_PM.REFERENCENRO,
                         P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                         P_NOMGEO_COLOC => NULL,
                         P_TYP_ZONE     => 'ZMD',
                         P_IS_ZA        => 1);

      OPEN C_GEO_ID(R_PM.REFERENCEPM);
      FETCH C_GEO_ID INTO R_GEO_ID;
      CLOSE C_GEO_ID;

      PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'SFR','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
      ----- Création alertes
      --> Alerte 1
         -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
           -- dans le module CR MAD
         -- Cloture de l'alerte à la réception du CR MAD
     IF R_PM.ETATPM = 'DEPLOYE' THEN
       NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
     END IF;

     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via IPE 2.2','SQLERRM', SQLERRM);
         plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
         plog.full_call_stack('File_ID',R_PM.FILE_ID);
     END;
   END LOOP;
   COMMIT;
END;

PROCEDURE CHK_N_CREATE_PM_SFOR_ZMD_30(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
-- Récupération des PM qui n'existent pas dans ECO
CURSOR C_VERIF_PM IS
SELECT *
       FROM (SELECT DISTINCT i.REFERENCEPM,
                             i.NUMEROVOIEPM as NUMEROVOIEPM,
                             (SELECT btyp.CODVAL
                                FROM BDMVAL btyp
                               WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                 AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                             (SELECT bcomp.CODVAL
                                FROM BDMVAL bcomp
                               WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                 AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                             i.NOMVOIEPM,
                             (SELECT cmn.COD_INSEE
                                FROM BDCOM cmn
                               WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                             (SELECT DISTINCT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                 AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                             cpn.REFERENCENRO,
                             i.FILE_ID,
                             i.ETATPM
                        FROM CPN             cpn,
                             IPE_SFRA_ZMD_V30_TMP i
                       WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                         AND cpn.CODOI           = P_COD_OI
                         AND NOT EXISTS (SELECT 1
                                           FROM PM p
                                          WHERE p.IDPM = i.REFERENCEPM)
                         AND EXISTS ( SELECT 1
                                        FROM SOUSCRIPTION s
                                       WHERE s.COD_INSEE = i.CODEINSEEPM
                                         AND s.COD_OI    = P_COD_OI)) A

WHERE A.CODEINSEEPM IS NOT NULL
  AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL -- il faut qu'il existe au moins un code postal associé au code insee
  AND A.REFERENCENRO IS NOT NULL;

CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
  SELECT GEO_ID
    FROM PM
   WHERE IDPM = vIDPM;
R_GEO_ID C_GEO_ID%ROWTYPE;
BEGIN
  -- Création du PM avec un etat adductable
  FOR R_PM IN C_VERIF_PM LOOP
    BEGIN
      NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                         P_NOMSIT    => R_PM.REFERENCEPM,
                         P_NUMVOI    => R_PM.NUMEROVOIEPM,
                         P_TYPVOI    => R_PM.TYPEVOIEPM,
                         P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                         P_NOMVOI    => R_PM.NOMVOIEPM,
                         P_COD_INSEE => R_PM.CODEINSEEPM,
                         P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                         P_COD_OI    => P_COD_OI,
                         P_IDNRO     => R_PM.REFERENCENRO,
                         P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                         P_NOMGEO_COLOC => NULL,
                         P_TYP_ZONE     => 'ZMD',
                         P_IS_ZA        => 1);

      OPEN C_GEO_ID(R_PM.REFERENCEPM);
      FETCH C_GEO_ID INTO R_GEO_ID;
      CLOSE C_GEO_ID;

      PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'SFR','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
      ----- Création alertes
      --> Alerte 1
         -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
           -- dans le module CR MAD
         -- Cloture de l'alerte à la réception du CR MAD
     IF R_PM.ETATPM = 'DEPLOYE' THEN
       NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
     END IF;

     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via IPE 3.0','SQLERRM', SQLERRM);
         plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
         plog.full_call_stack('File_ID',R_PM.FILE_ID);
     END;
   END LOOP;
   COMMIT;
END;

PROCEDURE CHK_N_CREATE_PM_SFRA_ZMD_30(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
-- Récupération des PM qui n'existent pas dans ECO
CURSOR C_VERIF_PM IS
SELECT *
       FROM (SELECT DISTINCT i.REFERENCEPM,
                             i.NUMEROVOIEPM as NUMEROVOIEPM,
                             (SELECT btyp.CODVAL
                                FROM BDMVAL btyp
                               WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                 AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                             (SELECT bcomp.CODVAL
                                FROM BDMVAL bcomp
                               WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                 AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                             i.NOMVOIEPM,
                             (SELECT cmn.COD_INSEE
                                FROM BDCOM cmn
                               WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                             (SELECT DISTINCT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                 AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                             eli.REFERENCEPRDM AS REFERENCENRO,
                             i.FILE_ID,
                             i.ETATPM
                        FROM PM_ELIGIBLES_SFR eli,
                             IPE_SFRA_ZMD_V30_TMP i
                       WHERE eli.REFERENCEPM = i.REFERENCEPM
                         AND NOT EXISTS (SELECT 1
                                           FROM PM p
                                          WHERE p.IDPM = i.REFERENCEPM)
            UNION ALL

            SELECT DISTINCT j.REFERENCEPM,
                            j.NUMEROVOIEPM as NUMEROVOIEPM,
                            (SELECT btyp.CODVAL
                               FROM BDMVAL btyp
                               WHERE UPPER(btyp.LIBVAL)  = UPPER(j.TYPEVOIEPM)
                                 AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                            (SELECT bcomp.CODVAL
                               FROM BDMVAL bcomp
                              WHERE UPPER(bcomp.LIBVAL)  = UPPER(j.COMPLEMENTVOIEPM)
                                AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                            j.NOMVOIEPM,
                            (SELECT cmn.COD_INSEE
                               FROM BDCOM cmn
                              WHERE cmn.COD_INSEE = j.CODEINSEEPM) AS CODEINSEEPM,
                            (SELECT DISTINCT pos.CODPTTCMN
                               FROM BDCOMPTL pos
                              WHERE pos.CODPTTCMN = j.CODEPOSTALPM
                                AND pos.COD_INSEE = j.CODEINSEEPM) AS CODEPOSTALPM,
                            (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = j.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                            cpn.REFERENCENRO,
                            j.FILE_ID,
                            j.ETATPM
                        FROM IPE_SFRA_ZMD_V30_TMP j,
                             CPN             cpn
                       WHERE cpn.REFERENCEPM     = j.REFERENCEPM
                         AND cpn.CODOI           = P_COD_OI
                         AND NOT EXISTS (SELECT 1
                                           FROM PM p
                                          WHERE p.IDPM = j.REFERENCEPM)
                         AND NOT EXISTS (SELECT 1
                                           FROM PM_ELIGIBLES_SFR eli
                                          WHERE eli.REFERENCEPM = j.REFERENCEPM)
                         AND EXISTS ( SELECT 1
                                        FROM SOUSCRIPTION s
                                       WHERE s.COD_INSEE = j.CODEINSEEPM
                                         AND s.COD_OI    = P_COD_OI)) A

WHERE A.CODEINSEEPM IS NOT NULL
  AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL -- il faut qu'il existe au moins un code postal associé au code insee
  AND A.REFERENCENRO IS NOT NULL;

CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
  SELECT GEO_ID
    FROM PM
   WHERE IDPM = vIDPM;
R_GEO_ID C_GEO_ID%ROWTYPE;
BEGIN
  -- Création du PM avec un etat adductable
  FOR R_PM IN C_VERIF_PM LOOP
    BEGIN
      NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                         P_NOMSIT    => R_PM.REFERENCEPM,
                         P_NUMVOI    => R_PM.NUMEROVOIEPM,
                         P_TYPVOI    => R_PM.TYPEVOIEPM,
                         P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                         P_NOMVOI    => R_PM.NOMVOIEPM,
                         P_COD_INSEE => R_PM.CODEINSEEPM,
                         P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                         P_COD_OI    => P_COD_OI,
                         P_IDNRO     => R_PM.REFERENCENRO,
                         P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                         P_NOMGEO_COLOC => NULL,
                         P_TYP_ZONE     => 'ZMD',
                         P_IS_ZA        => 1);

      OPEN C_GEO_ID(R_PM.REFERENCEPM);
      FETCH C_GEO_ID INTO R_GEO_ID;
      CLOSE C_GEO_ID;

      PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'SFR','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
      ----- Création alertes
      --> Alerte 1
         -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
           -- dans le module CR MAD
         -- Cloture de l'alerte à la réception du CR MAD
     IF R_PM.ETATPM = 'DEPLOYE' THEN
       NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
     END IF;

     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via IPE 3.0','SQLERRM', SQLERRM);
         plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
         plog.full_call_stack('File_ID',R_PM.FILE_ID);
     END;
   END LOOP;
   COMMIT;
END;

PROCEDURE CHK_N_CREATE_PM_FTEL_ZSP_30 IS
-- Récupération des PM qui n'existent pas dans ECO
CURSOR C_VERIF_PM IS
SELECT *
       FROM (SELECT DISTINCT i.REFERENCEPM,
                             i.NUMEROVOIEPM as NUMEROVOIEPM,
                             (SELECT btyp.CODVAL
                                FROM BDMVAL btyp
                               WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                 AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                             (SELECT bcomp.CODVAL
                                FROM BDMVAL bcomp
                               WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                 AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                             i.NOMVOIEPM,
                             (SELECT cmn.COD_INSEE
                                FROM BDCOM cmn
                               WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                             (SELECT DISTINCT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                 AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                             cpn.REFERENCENRO,
                             i.FILE_ID,
                             i.ETATPM
                        FROM CPN             cpn,
                             IPE_FT_ZSP_V30_TMP i
                       WHERE NOT EXISTS (SELECT 1
                                           FROM LST_CMN_ZTD_ZSP l
                                          WHERE l.CODE_INSEE = i.CODEINSEEPM)
                         AND cpn.REFERENCEPM     = i.REFERENCEPM
                         AND cpn.CODOI           = 'FTEL'
                         AND NOT EXISTS (SELECT 1
                                           FROM PM p
                                          WHERE p.IDPM = i.REFERENCEPM)) A

WHERE A.CODEINSEEPM IS NOT NULL
  AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL -- il faut qu'il existe au moins un code postal associé au code insee
  AND A.REFERENCENRO IS NOT NULL;

CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
  SELECT GEO_ID
    FROM PM
   WHERE IDPM = vIDPM;
R_GEO_ID C_GEO_ID%ROWTYPE;
BEGIN
  -- Création du PM avec un etat adductable
  FOR R_PM IN C_VERIF_PM LOOP
    BEGIN
      NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                         P_NOMSIT    => R_PM.REFERENCEPM,
                         P_NUMVOI    => R_PM.NUMEROVOIEPM,
                         P_TYPVOI    => R_PM.TYPEVOIEPM,
                         P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                         P_NOMVOI    => R_PM.NOMVOIEPM,
                         P_COD_INSEE => R_PM.CODEINSEEPM,
                         P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                         P_COD_OI    => 'FTEL',
                         P_IDNRO     => R_PM.REFERENCENRO,
                         P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                         P_NOMGEO_COLOC => NULL,
                         P_TYP_ZONE     => 'ZMD',
                         P_IS_ZA        => 1);

      OPEN C_GEO_ID(R_PM.REFERENCEPM);
      FETCH C_GEO_ID INTO R_GEO_ID;
      CLOSE C_GEO_ID;

      PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'ORA','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
      ----- Création alertes
      --> Alerte 1
         -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
           -- dans le module CR MAD
         -- Cloture de l'alerte à la réception du CR MAD
     IF R_PM.ETATPM = 'DEPLOYE' THEN
       NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
     END IF;

     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via IPE ZSP 3.0','SQLERRM', SQLERRM);
         plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
         plog.full_call_stack('File_ID',R_PM.FILE_ID);
     END;
   END LOOP;
   COMMIT;
END;

PROCEDURE CHK_N_CREATE_PM_AXIO_ZMD_22(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
-- Récupération des PM qui n'existent pas dans ECO
CURSOR C_VERIF_PM IS
SELECT *
       FROM (SELECT DISTINCT i.REFERENCEPM,
                             i.NUMEROVOIEPM as NUMEROVOIEPM,
                             (SELECT btyp.CODVAL
                                FROM BDMVAL btyp
                               WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                 AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                             (SELECT bcomp.CODVAL
                                FROM BDMVAL bcomp
                               WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                 AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                             i.NOMVOIEPM,
                             (SELECT cmn.COD_INSEE
                                FROM BDCOM cmn
                               WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                             (SELECT DISTINCT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                 AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                             cpn.REFERENCENRO,
                             i.FILE_ID,
                             i.ETATPM
                        FROM CPN             cpn,
                             IPE_AXIO_V22_TMP i
                       WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                         AND cpn.CODOI           = P_COD_OI
                         AND NOT EXISTS (SELECT 1
                                           FROM PM p
                                          WHERE p.IDPM = i.REFERENCEPM)
                         AND EXISTS ( SELECT 1
                                        FROM SOUSCRIPTION s
                                       WHERE s.COD_INSEE = i.CODEINSEEPM
                                         AND s.COD_OI    = P_COD_OI)) A

WHERE A.CODEINSEEPM IS NOT NULL
  AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL -- il faut qu'il existe au moins un code postal associé au code insee
  AND A.REFERENCENRO IS NOT NULL;

CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
  SELECT GEO_ID
    FROM PM
   WHERE IDPM = vIDPM;
R_GEO_ID C_GEO_ID%ROWTYPE;
BEGIN
  -- Création du PM avec un etat adductable
  FOR R_PM IN C_VERIF_PM LOOP
    BEGIN
      NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                         P_NOMSIT    => R_PM.REFERENCEPM,
                         P_NUMVOI    => R_PM.NUMEROVOIEPM,
                         P_TYPVOI    => R_PM.TYPEVOIEPM,
                         P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                         P_NOMVOI    => R_PM.NOMVOIEPM,
                         P_COD_INSEE => R_PM.CODEINSEEPM,
                         P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                         P_COD_OI    => P_COD_OI,
                         P_IDNRO     => R_PM.REFERENCENRO,
                         P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                         P_NOMGEO_COLOC => NULL,
                         P_TYP_ZONE     => 'ZMD',
                         P_IS_ZA        => 1);

      OPEN C_GEO_ID(R_PM.REFERENCEPM);
      FETCH C_GEO_ID INTO R_GEO_ID;
      CLOSE C_GEO_ID;

      PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'AXE','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
      ----- Création alertes
      --> Alerte 1
         -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
           -- dans le module CR MAD
         -- Cloture de l'alerte à la réception du CR MAD
     IF R_PM.ETATPM = 'DEPLOYE' THEN
       NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
     END IF;

     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via IPE 2.2','SQLERRM', SQLERRM);
         plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
         plog.full_call_stack('File_ID',R_PM.FILE_ID);
     END;
   END LOOP;
   COMMIT;
END;

PROCEDURE CHK_N_CREATE_PM_AXIO_ZMD_30(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
-- Récupération des PM qui n'existent pas dans ECO
CURSOR C_VERIF_PM IS
SELECT *
       FROM (SELECT DISTINCT i.REFERENCEPM,
                             i.NUMEROVOIEPM as NUMEROVOIEPM,
                             (SELECT btyp.CODVAL
                                FROM BDMVAL btyp
                               WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                 AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                             (SELECT bcomp.CODVAL
                                FROM BDMVAL bcomp
                               WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                 AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                             i.NOMVOIEPM,
                             (SELECT cmn.COD_INSEE
                                FROM BDCOM cmn
                               WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                             (SELECT DISTINCT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                 AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                             cpn.REFERENCENRO,
                             i.FILE_ID,
                             i.ETATPM
                        FROM CPN             cpn,
                             IPE_AXIO_V30_TMP i
                       WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                         AND cpn.CODOI           = P_COD_OI
                         AND NOT EXISTS (SELECT 1
                                           FROM PM p
                                          WHERE p.IDPM = i.REFERENCEPM)
                         AND EXISTS ( SELECT 1
                                        FROM SOUSCRIPTION s
                                       WHERE s.COD_INSEE = i.CODEINSEEPM
                                         AND s.COD_OI    = P_COD_OI)) A

WHERE A.CODEINSEEPM IS NOT NULL
  AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL -- il faut qu'il existe au moins un code postal associé au code insee
  AND A.REFERENCENRO IS NOT NULL;

CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
  SELECT GEO_ID
    FROM PM
   WHERE IDPM = vIDPM;
R_GEO_ID C_GEO_ID%ROWTYPE;
BEGIN
  -- Création du PM avec un etat adductable
  FOR R_PM IN C_VERIF_PM LOOP
    BEGIN
      NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                         P_NOMSIT    => R_PM.REFERENCEPM,
                         P_NUMVOI    => R_PM.NUMEROVOIEPM,
                         P_TYPVOI    => R_PM.TYPEVOIEPM,
                         P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                         P_NOMVOI    => R_PM.NOMVOIEPM,
                         P_COD_INSEE => R_PM.CODEINSEEPM,
                         P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                         P_COD_OI    => P_COD_OI,
                         P_IDNRO     => R_PM.REFERENCENRO,
                         P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                         P_NOMGEO_COLOC => NULL,
                         P_TYP_ZONE     => 'ZMD',
                         P_IS_ZA        => 1);

      OPEN C_GEO_ID(R_PM.REFERENCEPM);
      FETCH C_GEO_ID INTO R_GEO_ID;
      CLOSE C_GEO_ID;

      PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'AXE','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
      ----- Création alertes
      --> Alerte 1
         -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
           -- dans le module CR MAD
         -- Cloture de l'alerte à la réception du CR MAD
     IF R_PM.ETATPM = 'DEPLOYE' THEN
       NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
     END IF;

     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via IPE 3.0','SQLERRM', SQLERRM);
         plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
         plog.full_call_stack('File_ID',R_PM.FILE_ID);
     END;
   END LOOP;
   COMMIT;
END;

PROCEDURE CHK_N_CREATE_PM_COVA_ZMD_22(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
-- Récupération des PM qui n'existent pas dans ECO
CURSOR C_VERIF_PM IS
SELECT *
       FROM (SELECT DISTINCT i.REFERENCEPM,
                             i.NUMEROVOIEPM as NUMEROVOIEPM,
                             (SELECT btyp.CODVAL
                                FROM BDMVAL btyp
                               WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                 AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                             (SELECT bcomp.CODVAL
                                FROM BDMVAL bcomp
                               WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                 AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                             i.NOMVOIEPM,
                             (SELECT cmn.COD_INSEE
                                FROM BDCOM cmn
                               WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                             (SELECT DISTINCT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                 AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                             cpn.REFERENCENRO,
                             i.FILE_ID,
                             i.ETATPM
                        FROM CPN             cpn,
                             IPE_COVA_V22_TMP i
                       WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                         AND cpn.CODOI           = P_COD_OI
                         AND NOT EXISTS (SELECT 1
                                           FROM PM p
                                          WHERE p.IDPM = i.REFERENCEPM)
                         AND EXISTS ( SELECT 1
                                        FROM SOUSCRIPTION s
                                       WHERE s.COD_INSEE = i.CODEINSEEPM
                                         AND s.COD_OI    = P_COD_OI)) A

WHERE A.CODEINSEEPM IS NOT NULL
  AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL -- il faut qu'il existe au moins un code postal associé au code insee
  AND A.REFERENCENRO IS NOT NULL;

CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
  SELECT GEO_ID
    FROM PM
   WHERE IDPM = vIDPM;
R_GEO_ID C_GEO_ID%ROWTYPE;
BEGIN
  -- Création du PM avec un etat adductable
  FOR R_PM IN C_VERIF_PM LOOP
    BEGIN
      NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                         P_NOMSIT    => R_PM.REFERENCEPM,
                         P_NUMVOI    => R_PM.NUMEROVOIEPM,
                         P_TYPVOI    => R_PM.TYPEVOIEPM,
                         P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                         P_NOMVOI    => R_PM.NOMVOIEPM,
                         P_COD_INSEE => R_PM.CODEINSEEPM,
                         P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                         P_COD_OI    => P_COD_OI,
                         P_IDNRO     => R_PM.REFERENCENRO,
                         P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                         P_NOMGEO_COLOC => NULL,
                         P_TYP_ZONE     => 'ZMD',
                         P_IS_ZA        => 1);

      OPEN C_GEO_ID(R_PM.REFERENCEPM);
      FETCH C_GEO_ID INTO R_GEO_ID;
      CLOSE C_GEO_ID;

      PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'COV','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
      ----- Création alertes
      --> Alerte 1
         -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
           -- dans le module CR MAD
         -- Cloture de l'alerte à la réception du CR MAD
     IF R_PM.ETATPM = 'DEPLOYE' THEN
       NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
     END IF;

     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via IPE 2.2','SQLERRM', SQLERRM);
         plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
         plog.full_call_stack('File_ID',R_PM.FILE_ID);
     END;
   END LOOP;
   COMMIT;
END;

PROCEDURE CHK_N_CREATE_PM_COVA_ZMD_30(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
-- Récupération des PM qui n'existent pas dans ECO
CURSOR C_VERIF_PM IS
SELECT *
       FROM (SELECT DISTINCT i.REFERENCEPM,
                             i.NUMEROVOIEPM as NUMEROVOIEPM,
                             (SELECT btyp.CODVAL
                                FROM BDMVAL btyp
                               WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                 AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                             (SELECT bcomp.CODVAL
                                FROM BDMVAL bcomp
                               WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                 AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                             i.NOMVOIEPM,
                             (SELECT cmn.COD_INSEE
                                FROM BDCOM cmn
                               WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                             (SELECT DISTINCT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                 AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                             cpn.REFERENCENRO,
                             i.FILE_ID,
                             i.ETATPM
                        FROM CPN             cpn,
                             IPE_COVA_V30_TMP i
                       WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                         AND cpn.CODOI           = P_COD_OI
                         AND NOT EXISTS (SELECT 1
                                           FROM PM p
                                          WHERE p.IDPM = i.REFERENCEPM)
                         AND EXISTS ( SELECT 1
                                        FROM SOUSCRIPTION s
                                       WHERE s.COD_INSEE = i.CODEINSEEPM
                                         AND s.COD_OI    = P_COD_OI)) A

WHERE A.CODEINSEEPM IS NOT NULL
  AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL -- il faut qu'il existe au moins un code postal associé au code insee
  AND A.REFERENCENRO IS NOT NULL;

CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
  SELECT GEO_ID
    FROM PM
   WHERE IDPM = vIDPM;
R_GEO_ID C_GEO_ID%ROWTYPE;
BEGIN
  -- Création du PM avec un etat adductable
  FOR R_PM IN C_VERIF_PM LOOP
    BEGIN
      NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                         P_NOMSIT    => R_PM.REFERENCEPM,
                         P_NUMVOI    => R_PM.NUMEROVOIEPM,
                         P_TYPVOI    => R_PM.TYPEVOIEPM,
                         P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                         P_NOMVOI    => R_PM.NOMVOIEPM,
                         P_COD_INSEE => R_PM.CODEINSEEPM,
                         P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                         P_COD_OI    => P_COD_OI,
                         P_IDNRO     => R_PM.REFERENCENRO,
                         P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                         P_NOMGEO_COLOC => NULL,
                         P_TYP_ZONE     => 'ZMD',
                         P_IS_ZA        => 1);

      OPEN C_GEO_ID(R_PM.REFERENCEPM);
      FETCH C_GEO_ID INTO R_GEO_ID;
      CLOSE C_GEO_ID;

      PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'COV','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
      ----- Création alertes
      --> Alerte 1
         -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
           -- dans le module CR MAD
         -- Cloture de l'alerte à la réception du CR MAD
     IF R_PM.ETATPM = 'DEPLOYE' THEN
       NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
     END IF;

     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via IPE 3.0','SQLERRM', SQLERRM);
         plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
         plog.full_call_stack('File_ID',R_PM.FILE_ID);
     END;
   END LOOP;
   COMMIT;
END;

PROCEDURE CHK_N_CREATE_PM_ALTI_ZMD_30(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
-- Récupération des PM qui n'existent pas dans ECO
CURSOR C_VERIF_PM IS
SELECT *
       FROM (SELECT DISTINCT i.REFERENCEPM,
                             i.NUMEROVOIEPM as NUMEROVOIEPM,
                             (SELECT btyp.CODVAL
                                FROM BDMVAL btyp
                               WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                 AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                             (SELECT bcomp.CODVAL
                                FROM BDMVAL bcomp
                               WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                 AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                             i.NOMVOIEPM,
                             (SELECT cmn.COD_INSEE
                                FROM BDCOM cmn
                               WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                             (SELECT DISTINCT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                 AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                             cpn.REFERENCENRO,
                             i.FILE_ID,
                             i.ETATPM
                        FROM CPN             cpn,
                             IPE_ALTI_V30_TMP i
                       WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                         AND cpn.CODOI           = P_COD_OI
                         AND NOT EXISTS (SELECT 1
                                           FROM PM p
                                          WHERE p.IDPM = i.REFERENCEPM)
                         AND EXISTS ( SELECT 1
                                        FROM SOUSCRIPTION s
                                       WHERE s.COD_INSEE = i.CODEINSEEPM
                                         AND s.COD_OI    = P_COD_OI)) A

WHERE A.CODEINSEEPM IS NOT NULL
  AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL -- il faut qu'il existe au moins un code postal associé au code insee
  AND A.REFERENCENRO IS NOT NULL;

CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
  SELECT GEO_ID
    FROM PM
   WHERE IDPM = vIDPM;
R_GEO_ID C_GEO_ID%ROWTYPE;
BEGIN
  -- Création du PM avec un etat adductable
  FOR R_PM IN C_VERIF_PM LOOP
    BEGIN
      NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                         P_NOMSIT    => R_PM.REFERENCEPM,
                         P_NUMVOI    => R_PM.NUMEROVOIEPM,
                         P_TYPVOI    => R_PM.TYPEVOIEPM,
                         P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                         P_NOMVOI    => R_PM.NOMVOIEPM,
                         P_COD_INSEE => R_PM.CODEINSEEPM,
                         P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                         P_COD_OI    => P_COD_OI,
                         P_IDNRO     => R_PM.REFERENCENRO,
                         P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                         P_NOMGEO_COLOC => NULL,
                         P_TYP_ZONE     => 'ZMD',
                         P_IS_ZA        => 1);

      OPEN C_GEO_ID(R_PM.REFERENCEPM);
      FETCH C_GEO_ID INTO R_GEO_ID;
      CLOSE C_GEO_ID;

      PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'ALT','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
      ----- Création alertes
      --> Alerte 1
         -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
           -- dans le module CR MAD
         -- Cloture de l'alerte à la réception du CR MAD
     IF R_PM.ETATPM = 'DEPLOYE' THEN
       NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
     END IF;

     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via IPE 3.0','SQLERRM', SQLERRM);
         plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
         plog.full_call_stack('File_ID',R_PM.FILE_ID);
     END;
   END LOOP;
   COMMIT;
END;

PROCEDURE CHK_N_CREATE_PM_TDF_ZMD_30(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
-- Récupération des PM qui n'existent pas dans ECO
CURSOR C_VERIF_PM IS
SELECT *
       FROM (SELECT DISTINCT i.REFERENCEPM,
                             i.NUMEROVOIEPM as NUMEROVOIEPM,
                             (SELECT btyp.CODVAL
                                FROM BDMVAL btyp
                               WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                 AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                             (SELECT bcomp.CODVAL
                                FROM BDMVAL bcomp
                               WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                 AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                             i.NOMVOIEPM,
                             (SELECT cmn.COD_INSEE
                                FROM BDCOM cmn
                               WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                             (SELECT DISTINCT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                 AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                             cpn.REFERENCENRO,
                             i.FILE_ID,
                             i.ETATPM
                        FROM CPN             cpn,
                             IPE_TDF_V30_TMP i
                       WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                         AND cpn.CODOI           = P_COD_OI
                         AND NOT EXISTS (SELECT 1
                                           FROM PM p
                                          WHERE p.IDPM = i.REFERENCEPM)
                         AND EXISTS ( SELECT 1
                                        FROM SOUSCRIPTION s
                                       WHERE s.COD_INSEE = i.CODEINSEEPM
                                         AND s.COD_OI    = P_COD_OI)) A

WHERE A.CODEINSEEPM IS NOT NULL
  AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL -- il faut qu'il existe au moins un code postal associé au code insee
  AND A.REFERENCENRO IS NOT NULL;

CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
  SELECT GEO_ID
    FROM PM
   WHERE IDPM = vIDPM;
R_GEO_ID C_GEO_ID%ROWTYPE;
BEGIN
  -- Création du PM avec un etat adductable
  FOR R_PM IN C_VERIF_PM LOOP
    BEGIN
      NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                         P_NOMSIT    => R_PM.REFERENCEPM,
                         P_NUMVOI    => R_PM.NUMEROVOIEPM,
                         P_TYPVOI    => R_PM.TYPEVOIEPM,
                         P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                         P_NOMVOI    => R_PM.NOMVOIEPM,
                         P_COD_INSEE => R_PM.CODEINSEEPM,
                         P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                         P_COD_OI    => P_COD_OI,
                         P_IDNRO     => R_PM.REFERENCENRO,
                         P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                         P_NOMGEO_COLOC => NULL,
                         P_TYP_ZONE     => 'ZMD',
                         P_IS_ZA        => 1);

      OPEN C_GEO_ID(R_PM.REFERENCEPM);
      FETCH C_GEO_ID INTO R_GEO_ID;
      CLOSE C_GEO_ID;

      PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'TDF','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
      ----- Création alertes
      --> Alerte 1
         -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
           -- dans le module CR MAD
         -- Cloture de l'alerte à la réception du CR MAD
     IF R_PM.ETATPM = 'DEPLOYE' THEN
       NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
     END IF;

     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via IPE 3.0','SQLERRM', SQLERRM);
         plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
         plog.full_call_stack('File_ID',R_PM.FILE_ID);
     END;
   END LOOP;
   COMMIT;
END;

-----------------------------------------------------------------------------------
-- Création des PM à partir de l'IPE Simpson ZMD 3.0
-----------------------------------------------------------------------------------

/*PROCEDURE CHK_N_CREATE_PM_SMP_ZMD_30(P_COD_OI      IN REF_OI_PRM.COD_OI%TYPE) IS
-- Récupération des PM qui n'existent pas dans ECO
CURSOR C_VERIF_PM IS
SELECT *
       FROM (SELECT DISTINCT i.REFERENCEPM,
                             i.NUMEROVOIEPM as NUMEROVOIEPM,
                             (SELECT btyp.CODVAL
                                FROM BDMVAL btyp
                               WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                 AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                             (SELECT bcomp.CODVAL
                                FROM BDMVAL bcomp
                               WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                 AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                             i.NOMVOIEPM,
                             (SELECT cmn.COD_INSEE
                                FROM BDCOM cmn
                               WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                             (SELECT DISTINCT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                 AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                             cpn.REFERENCENRO,
                             i.FILE_ID,
                             i.ETATPM
                        FROM CPN                 cpn,
                             IPE_SMP_ZMD_V30_TMP i
                       WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                         AND cpn.CODOI           = P_COD_OI
                         AND NOT EXISTS (SELECT 1
                                           FROM PM p
                                          WHERE p.IDPM = i.REFERENCEPM)
                         AND EXISTS ( SELECT 1
                                        FROM SOUSCRIPTION s
                                       WHERE s.COD_INSEE = i.CODEINSEEPM
                                         AND s.COD_OI    = P_COD_OI)) A

WHERE A.CODEINSEEPM IS NOT NULL
  AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL -- il faut qu'il existe au moins un code postal associé au code insee
  AND A.REFERENCENRO IS NOT NULL;

CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
  SELECT GEO_ID
    FROM PM
   WHERE IDPM = vIDPM;
R_GEO_ID C_GEO_ID%ROWTYPE;
BEGIN
  -- Création du PM avec un etat adductable
  FOR R_PM IN C_VERIF_PM LOOP
    BEGIN
      NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                         P_NOMSIT    => R_PM.REFERENCEPM,
                         P_NUMVOI    => R_PM.NUMEROVOIEPM,
                         P_TYPVOI    => R_PM.TYPEVOIEPM,
                         P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                         P_NOMVOI    => R_PM.NOMVOIEPM,
                         P_COD_INSEE => R_PM.CODEINSEEPM,
                         P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM),
                         P_COD_OI    => P_COD_OI,
                         P_IDNRO     => R_PM.REFERENCENRO,
                         P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                         P_NOMGEO_COLOC => NULL,
                         P_TYP_ZONE     => 'ZMD',
                         P_IS_ZA        => 1);

      OPEN C_GEO_ID(R_PM.REFERENCEPM);
      FETCH C_GEO_ID INTO R_GEO_ID;
      CLOSE C_GEO_ID;

      PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'ORA','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
      ----- Création alertes
      --> Alerte 1
         -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
           -- dans le module CR MAD
         -- Cloture de l'alerte à la réception du CR MAD
     IF R_PM.ETATPM = 'DEPLOYE' THEN
       NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
     END IF;

     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via IPE 3.0','SQLERRM', SQLERRM);
         plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
         plog.full_call_stack('File_ID',R_PM.FILE_ID);
     END;
   END LOOP;
   COMMIT;
END;*/

PROCEDURE CHK_N_CREATE_PM_SMP_ZMD_30(P_COD_OI      IN REF_OI_PRM.COD_OI%TYPE) IS
  -- Récupération des PM qui n'existent pas dans ECO
  CURSOR C_VERIF_PM IS
    SELECT DISTINCT cpn.REFERENCEPM, cpn.REFERENCENRO
      FROM CPN                   cpn,
           IPE_SMP_ZMD_V30_TMP   ipe
     WHERE cpn.CODOI = P_COD_OI
       AND cpn.REFERENCENRO IS NOT NULL
       AND ipe.REFERENCEPM = cpn.REFERENCEPM
       --AND ipe.REFERENCEPM = 'FI-82121-003E'
       AND NOT EXISTS (SELECT 1
                         FROM PM
                        WHERE pm.IDPM = cpn.REFERENCEPM);
  R_VERIF_PM      C_VERIF_PM%ROWTYPE;

  CURSOR C_ADR_IPE(vIdPM  PM.IDPM%TYPE) IS
    SELECT DISTINCT ipe.NUMEROVOIEPM,
           ipe.COMPLEMENTVOIEPM,
           ipe.CODEINSEEPM,
           ipe.CODEPOSTALPM,
           ipe.TYPEVOIEPM,
           ipe.NOMVOIEPM,
           ipe.ETATPM,
           ipe.FILE_ID
      FROM IPE_SMP_ZMD_V30_TMP ipe
     WHERE ipe.REFERENCEPM = vIdPM;
  R_ADR_IPE       C_ADR_IPE%ROWTYPE;

  CURSOR C_SOUSCRIPTION(vCodeInsee   IPE.CODEINSEEPM%TYPE) IS
    SELECT 1 AS VALEUR
      FROM SOUSCRIPTION s
     WHERE s.COD_INSEE = vCodeInsee
       AND s.COD_OI    = P_COD_OI;
  R_SOUSCRIPTION       C_SOUSCRIPTION%ROWTYPE;
  vFoundScp     BOOLEAN;

  CURSOR C_CODEINSEE(vCodeInsee   IPE.CODEINSEEPM%TYPE) IS
    SELECT cmn.COD_INSEE
      FROM BDCOM cmn
     WHERE cmn.COD_INSEE = vCodeInsee;
  R_CODEINSEE     C_CODEINSEE%ROWTYPE;
  vFoundInsee     BOOLEAN;

  CURSOR C_CODEINSEE_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE, vCodePostal    IPE.CODEPOSTALPM%TYPE) IS
    SELECT DISTINCT pos.CODPTTCMN AS CODEPOSTALPM
      FROM BDCOMPTL pos
     WHERE pos.CODPTTCMN = vCodePostal
       AND pos.COD_INSEE = vCodeInsee;
  R_CODEINSEE_CODE_POSTAL    C_CODEINSEE_CODE_POSTAL%ROWTYPE;
  vFoundCP1   BOOLEAN;

  CURSOR C_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE) IS
    SELECT pos.CODPTTCMN AS CODEPOSTALPM
      FROM BDCOMPTL pos
     WHERE pos.COD_INSEE = vCodeInsee
       AND ROWNUM        = 1;
  R_CODE_POSTAL    C_CODE_POSTAL%ROWTYPE;
  vFoundCP2   BOOLEAN;

  CURSOR C_TYPEVOIE(vTypevoie   IPE.TYPEVOIEPM%TYPE) IS
    SELECT btyp.CODVAL AS TYPEVOIEPM
      FROM BDMVAL btyp
     WHERE UPPER(btyp.LIBVAL)  = UPPER(vTypevoie)
       AND btyp.LSTVAL_ID     = 'TYPVOI';
  R_TYPEVOIE     C_TYPEVOIE%ROWTYPE;

  CURSOR C_COMPLEMENTVOIE (vComplementvoie    IPE.COMPLEMENTVOIEPM%TYPE) IS
    SELECT bcomp.CODVAL AS COMPLEMENTVOIEPM
      FROM BDMVAL bcomp
     WHERE UPPER(bcomp.LIBVAL)  = UPPER(vComplementvoie)
     AND bcomp.LSTVAL_ID     = 'CMPVOI';
  R_COMPLEMENTVOIE     C_COMPLEMENTVOIE%ROWTYPE;

  CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
    SELECT GEO_ID
      FROM PM
     WHERE IDPM = vIDPM;
  R_GEO_ID C_GEO_ID%ROWTYPE;

  BEGIN
    -- Création du PM avec un etat adductable
    FOR R_VERIF_PM IN C_VERIF_PM LOOP
      --plog.info('PM : '||R_VERIF_PM.REFERENCEPM);
      FOR R_ADR_IPE IN C_ADR_IPE(R_VERIF_PM.REFERENCEPM) LOOP
        OPEN C_SOUSCRIPTION(R_ADR_IPE.CODEINSEEPM);
        FETCH C_SOUSCRIPTION INTO R_SOUSCRIPTION;
        vFoundScp := C_SOUSCRIPTION%FOUND;
        CLOSE C_SOUSCRIPTION;

        IF vFoundScp THEN
          OPEN C_CODEINSEE(R_ADR_IPE.CODEINSEEPM);
          FETCH C_CODEINSEE INTO R_CODEINSEE;
          vFoundInsee := C_CODEINSEE%FOUND;
          CLOSE C_CODEINSEE;

          IF vFoundInsee THEN
            OPEN C_CODEINSEE_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM, R_ADR_IPE.CODEPOSTALPM);
            FETCH C_CODEINSEE_CODE_POSTAL INTO R_CODEINSEE_CODE_POSTAL;
            vFoundCP1:= C_CODEINSEE_CODE_POSTAL%FOUND;
            CLOSE C_CODEINSEE_CODE_POSTAL;

            OPEN C_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM);
            FETCH C_CODE_POSTAL INTO R_CODE_POSTAL;
            vFoundCP2:= C_CODE_POSTAL%FOUND;
            CLOSE C_CODE_POSTAL;

            IF vFoundCP1 OR vFoundCP2 THEN
              BEGIN
                OPEN C_TYPEVOIE(R_ADR_IPE.TYPEVOIEPM);
                FETCH C_TYPEVOIE INTO R_TYPEVOIE;
                CLOSE C_TYPEVOIE;

                OPEN C_COMPLEMENTVOIE(R_ADR_IPE.TYPEVOIEPM);
                FETCH C_COMPLEMENTVOIE INTO R_COMPLEMENTVOIE;
                CLOSE C_COMPLEMENTVOIE;

                --plog.info('Code insee : '||R_ADR_IPE.CODEINSEEPM||' - Code postal :'||R_CODEINSEE_CODE_POSTAL.CODEPOSTALPM||' - Code postal 2 : '||R_CODE_POSTAL.CODEPOSTALPM);
                NAT_FF1.NEW_PM_FF1(P_IDPM      => R_VERIF_PM.REFERENCEPM,
                                   P_NOMSIT    => R_VERIF_PM.REFERENCEPM,
                                   P_NUMVOI    => R_ADR_IPE.NUMEROVOIEPM,
                                   P_TYPVOI    => R_TYPEVOIE.TYPEVOIEPM,
                                   P_CMPVOI    => R_COMPLEMENTVOIE.COMPLEMENTVOIEPM,
                                   P_NOMVOI    => R_ADR_IPE.NOMVOIEPM,
                                   P_COD_INSEE => R_ADR_IPE.CODEINSEEPM,
                                   P_CODPTTCMN => NVL(R_CODEINSEE_CODE_POSTAL.CODEPOSTALPM, R_CODE_POSTAL.CODEPOSTALPM),
                                   P_COD_OI    => P_COD_OI,
                                   P_IDNRO     => R_VERIF_PM.REFERENCENRO,
                                   P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                                   P_NOMGEO_COLOC => NULL,
                                   P_TYP_ZONE     => 'ZMD',
                                   P_IS_ZA        => 1);

                OPEN C_GEO_ID(R_VERIF_PM.REFERENCEPM);
                FETCH C_GEO_ID INTO R_GEO_ID;
                CLOSE C_GEO_ID;

                PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'ORA','CHA',NULL,'PM_', R_VERIF_PM.REFERENCEPM,NULL,NULL);
                ----- Création alertes
                --> Alerte 1
                   -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
                     -- dans le module CR MAD
                   -- Cloture de l'alerte à la réception du CR MAD
               IF R_ADR_IPE.ETATPM = 'DEPLOYE' THEN
                 NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_VERIF_PM.REFERENCEPM);
               END IF;

             EXCEPTION
               WHEN OTHERS THEN
                 plog.ERROR('Erreur lors de la création du PM via IPE 3.0','SQLERRM', SQLERRM);
                 plog.full_error_backtrace('Referencepm',R_VERIF_PM.REFERENCEPM);
                 plog.full_call_stack('File_ID',R_ADR_IPE.FILE_ID);
             END;
           END IF;
         END IF;
       END IF;
     END LOOP;
   END LOOP;
   --COMMIT;
END;

PROCEDURE CHK_N_CREATE_PM_SMP_ZSP_30(P_COD_OI      IN REF_OI_PRM.COD_OI%TYPE) IS
-- Récupération des PM qui n'existent pas dans ECO
CURSOR C_VERIF_PM IS
SELECT *
       FROM (SELECT DISTINCT i.REFERENCEPM,
                             i.NUMEROVOIEPM as NUMEROVOIEPM,
                             (SELECT btyp.CODVAL
                                FROM BDMVAL btyp
                               WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                 AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                             (SELECT bcomp.CODVAL
                                FROM BDMVAL bcomp
                               WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                 AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                             i.NOMVOIEPM,
                             (SELECT cmn.COD_INSEE
                                FROM BDCOM cmn
                               WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                             (SELECT DISTINCT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                 AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                             cpn.REFERENCENRO,
                             i.FILE_ID,
                             i.ETATPM
                        FROM CPN                 cpn,
                             IPE_SMP_ZSP_V30_TMP i
                       WHERE NOT EXISTS (SELECT 1
                                           FROM LST_CMN_ZTD_ZSP l
                                          WHERE l.CODE_INSEE = i.CODEINSEEPM)
                         AND cpn.REFERENCEPM     = i.REFERENCEPM
                         AND cpn.CODOI           = P_COD_OI
                         AND NOT EXISTS (SELECT 1
                                           FROM PM p
                                          WHERE p.IDPM = i.REFERENCEPM)) A

WHERE A.CODEINSEEPM IS NOT NULL
  AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL -- il faut qu'il existe au moins un code postal associé au code insee
  AND A.REFERENCENRO IS NOT NULL;

CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
  SELECT GEO_ID
    FROM PM
   WHERE IDPM = vIDPM;
R_GEO_ID C_GEO_ID%ROWTYPE;
BEGIN
  -- Création du PM avec un etat adductable
  FOR R_PM IN C_VERIF_PM LOOP
    BEGIN
      NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                         P_NOMSIT    => R_PM.REFERENCEPM,
                         P_NUMVOI    => R_PM.NUMEROVOIEPM,
                         P_TYPVOI    => R_PM.TYPEVOIEPM,
                         P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                         P_NOMVOI    => R_PM.NOMVOIEPM,
                         P_COD_INSEE => R_PM.CODEINSEEPM,
                         P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                         P_COD_OI    => P_COD_OI,
                         P_IDNRO     => R_PM.REFERENCENRO,
                         P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                         P_NOMGEO_COLOC => NULL,
                         P_TYP_ZONE     => 'ZMD',
                         P_IS_ZA        => 1);

      OPEN C_GEO_ID(R_PM.REFERENCEPM);
      FETCH C_GEO_ID INTO R_GEO_ID;
      CLOSE C_GEO_ID;

      PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'ORA','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
      ----- Création alertes
      --> Alerte 1
         -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
           -- dans le module CR MAD
         -- Cloture de l'alerte à la réception du CR MAD
     IF R_PM.ETATPM = 'DEPLOYE' THEN
       NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
     END IF;

     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via IPE ZSP 3.0','SQLERRM', SQLERRM);
         plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
         plog.full_call_stack('File_ID',R_PM.FILE_ID);
     END;
   END LOOP;
   COMMIT;
END;

PROCEDURE CHK_N_CREATE_PM_SIEA_ZMD_30(P_COD_OI      IN REF_OI_PRM.COD_OI%TYPE) IS
  -- Récupération des PM qui n'existent pas dans ECO
  CURSOR C_VERIF_PM IS
  SELECT *
         FROM (SELECT DISTINCT i.REFERENCEPM,
                               i.NUMEROVOIEPM as NUMEROVOIEPM,
                               (SELECT btyp.CODVAL
                                  FROM BDMVAL btyp
                                 WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                   AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                               (SELECT bcomp.CODVAL
                                  FROM BDMVAL bcomp
                                 WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                   AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                               i.NOMVOIEPM,
                               (SELECT cmn.COD_INSEE
                                  FROM BDCOM cmn
                                 WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                               (SELECT DISTINCT pos.CODPTTCMN
                                  FROM BDCOMPTL pos
                                 WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                   AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                               cpn.REFERENCENRO,
                               i.FILE_ID,
                               i.ETATPM
                          FROM CPN             cpn,
                               IPE_SIEA_V30_TMP i
                         WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                           AND cpn.CODOI           = P_COD_OI
                           AND NOT EXISTS (SELECT 1
                                             FROM PM p
                                            WHERE p.IDPM = i.REFERENCEPM)
                           AND EXISTS ( SELECT 1
                                          FROM SOUSCRIPTION s
                                         WHERE s.COD_INSEE = i.CODEINSEEPM
                                           AND s.COD_OI    = P_COD_OI)) A

  WHERE A.CODEINSEEPM IS NOT NULL
    AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL -- il faut qu'il existe au moins un code postal associé au code insee
    AND A.REFERENCENRO IS NOT NULL;

  CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
    SELECT GEO_ID
      FROM PM
     WHERE IDPM = vIDPM;
  R_GEO_ID C_GEO_ID%ROWTYPE;
BEGIN
  -- Création du PM avec un etat adductable
  FOR R_PM IN C_VERIF_PM LOOP
    BEGIN
      NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                         P_NOMSIT    => R_PM.REFERENCEPM,
                         P_NUMVOI    => R_PM.NUMEROVOIEPM,
                         P_TYPVOI    => R_PM.TYPEVOIEPM,
                         P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                         P_NOMVOI    => R_PM.NOMVOIEPM,
                         P_COD_INSEE => R_PM.CODEINSEEPM,
                         P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                         P_COD_OI    => P_COD_OI,
                         P_IDNRO     => R_PM.REFERENCENRO,
                         P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                         P_NOMGEO_COLOC => NULL,
                         P_TYP_ZONE     => 'ZMD',
                         P_IS_ZA        => 1);

      OPEN C_GEO_ID(R_PM.REFERENCEPM);
      FETCH C_GEO_ID INTO R_GEO_ID;
      CLOSE C_GEO_ID;

      PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id, NAT_FTTH_OI.P_OC_SIEA,'CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
      ----- Création alertes
      --> Alerte 1
         -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
           -- dans le module CR MAD
         -- Cloture de l'alerte à la réception du CR MAD
     IF R_PM.ETATPM = 'DEPLOYE' THEN
       NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
     END IF;

     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via IPE SIEA 3.0','SQLERRM', SQLERRM);
         plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
         plog.full_call_stack('File_ID',R_PM.FILE_ID);
     END;
   END LOOP;
   COMMIT;
END;

------------------------------------------------------------------------------------------
-- Delta de l'IPE pour l'OSS
-----------------------------------------------------------------------------------------
FUNCTION DELTA_IPE_OSS_V2X(P_CODOI               IN REF_OI.COD_OI%TYPE,
                             P_IMM_ID              IN ADR_IMM_OI.IMM_ID%TYPE,
                             P_TYPEIMMEUBLE_NEW    IN ADR_IMM_OI.TYPEIMMEUBLE%TYPE,
                             P_ACDGESTNAIREIMM_NEW IN ADR_IMM_OI.ACCORDGESTIONNAIREIMMEUBLE%TYPE,
                             P_REFERENCEPM_NEW     IN ADR_IMM_OI.REFERENCEPM%TYPE,
                             P_TYPPBO_NEW          IN ADR_IMM_OI.TYPPBO%TYPE,
                             P_TYPRACCOPBPTO_NEW   IN ADR_IMM_OI.TYPRACCOPBPTO%TYPE,
                             P_ETATIMMEUBLE        IN ADR_IMM_OI.ETATIMMEUBLE%TYPE,
                             P_CODERIVOLIIMMEUBLE  IN ADR_IMM_OI.CODERIVOLIIMMEUBLE%TYPE,
                             P_CODEADRESSEIMMEUBLE IN ADR_IMM_OI.CODEADRESSEIMMEUBLE%TYPE)
RETURN NUMBER IS
vDelta NUMBER;
-- Pour optimiser, on fait la comparaison que pour les OC
CURSOR C_VERIF_OC IS
  SELECT 1
    FROM ETAPM eta,
         PM    pm
   WHERE pm.IDPM      = P_REFERENCEPM_NEW
     AND eta.etapm_id = pm.etapm_id
     AND eta.Etapm    = 'OVC';
R_VERIF_OC C_VERIF_OC%ROWTYPE;
vFoundOC   BOOLEAN;
-- Rechercher delta
CURSOR C_VERIF_DELTA IS
  SELECT 1
    FROM ADR_IMM_OI aoi
   WHERE aoi.IMM_ID      = P_IMM_ID
     AND aoi.CODOI       = P_CODOI
     AND (
           (aoi.REFERENCEPM                <> P_REFERENCEPM_NEW    ) OR
          (aoi.TYPPBO                     <> P_TYPPBO_NEW         ) OR
          (aoi.TYPPBO IS NULL             AND P_TYPPBO_NEW IS NOT NULL) OR
          (aoi.TYPPBO IS NOT NULL         AND P_TYPPBO_NEW IS NULL) OR
          (aoi.TYPRACCOPBPTO              <> P_TYPRACCOPBPTO_NEW  ) OR
          (aoi.TYPRACCOPBPTO IS NULL      AND P_TYPRACCOPBPTO_NEW IS NOT NULL) OR
          (aoi.TYPRACCOPBPTO IS NOT NULL  AND P_TYPRACCOPBPTO_NEW IS NULL) OR
          (aoi.TYPEIMMEUBLE               <> P_TYPEIMMEUBLE_NEW   ) OR
          (aoi.ACCORDGESTIONNAIREIMMEUBLE <> P_ACDGESTNAIREIMM_NEW) OR
          (aoi.ACCORDGESTIONNAIREIMMEUBLE IS NULL AND P_ACDGESTNAIREIMM_NEW IS NOT NULL) OR
          (aoi.ACCORDGESTIONNAIREIMMEUBLE IS NOT NULL AND P_ACDGESTNAIREIMM_NEW IS NULL) OR
          (aoi.ETATIMMEUBLE               <> P_ETATIMMEUBLE AND P_ETATIMMEUBLE = 'DEPLOYE') OR
          (aoi.CODERIVOLIIMMEUBLE         <> P_CODERIVOLIIMMEUBLE) OR
          (aoi.CODERIVOLIIMMEUBLE IS NULL AND P_CODERIVOLIIMMEUBLE IS NOT NULL) OR
          (aoi.CODERIVOLIIMMEUBLE IS NOT NULL AND P_CODERIVOLIIMMEUBLE IS NULL) OR
          (aoi.CODEADRESSEIMMEUBLE        <> P_CODEADRESSEIMMEUBLE)
          );
R_VERIF_DELTA C_VERIF_DELTA%ROWTYPE;
vFoundDelta   BOOLEAN;

CURSOR C_IS_FLAG_ON IS
  SELECT 1
    FROM ADR_IMM_OI a
   WHERE a.REFERENCEPM = P_REFERENCEPM_NEW
     AND a.MAJ_OSSF    = 1
     AND a.IMM_ID      = P_IMM_ID
     AND a.ETAIMMSIR   <> 'S';
R_IS_FLAG_ON C_IS_FLAG_ON%ROWTYPE;
vFoundFlag   BOOLEAN;
BEGIN
  OPEN C_VERIF_OC;
  FETCH C_VERIF_OC INTO R_VERIF_OC;
  vFoundOC := C_VERIF_OC%FOUND;
  CLOSE C_VERIF_OC;

  IF not vFoundOC THEN
    vDelta := 0;
  ELSE
    OPEN C_VERIF_DELTA;
    FETCH C_VERIF_DELTA INTO R_VERIF_DELTA;
    vFoundDelta := C_VERIF_DELTA%FOUND;
    CLOSE C_VERIF_DELTA;

    IF vFoundDelta THEN
      vDelta := 1;
    ELSE
      OPEN C_IS_FLAG_ON;
      FETCH C_IS_FLAG_ON INTO R_IS_FLAG_ON;
      vFoundFlag := C_IS_FLAG_ON%FOUND;
      CLOSE C_IS_FLAG_ON;

      IF vFoundFlag THEN
        vDelta := 1;
      ELSE
        vDelta := 0;
      END IF;
    END IF;

  END IF;

  RETURN vDelta;
END;

FUNCTION GET_REFCONSUL_OF_SMP(P_REFCONSUL             IN IPE.REFCONSUL%TYPE,
                              P_TYPZON                IN VARCHAR2,
                              P_TYPZONDET             IN VARCHAR2,
                              P_REFCONSULTATIONNATIVE IN IPE.REFERENCECONSULTATIONNATIVE%TYPE,
                              P_DATEINSTALLATIONPM    IN IPE.DATEINSTALLATIONPM%TYPE,
                              P_TYPEEMPLACEMENTPM     IN IPE.TYPEEMPLACEMENTPM%TYPE)
  RETURN VARCHAR2 IS
  P_NEWREF SOUSCRIPTION.REF_CNSLT%TYPE;
  CURSOR C_VERIF_REFCONSUL_14(vRefConsul VARCHAR2) IS
    SELECT 1
      FROM DUAL
     WHERE REGEXP_LIKE(UPPER(vRefConsul),UPPER('*.*S-*.*'));
  R_VERIF_REFCONSUL_14 C_VERIF_REFCONSUL_14%ROWTYPE;
  vFoundRefconsul14 BOOLEAN;
BEGIN
  IF P_TYPZON = 'ZSP' THEN
    IF P_TYPZONDET =  'ZTD' THEN

        -- Pour l'IPE ZTD FTEL
        -- Si le type d'emplacement est de type PME
        -- On vérifie s'il existe une référenceconsultation native ou une date d'installation
        -- Si absent, alors on prend la valeur de la référence de consultation
        IF P_TYPEEMPLACEMENTPM IN ('PME', 'PME-Armoire de rue', 'PME-Local technique') THEN
          IF (P_REFCONSULTATIONNATIVE IS NOT NULL) THEN
            P_NEWREF := P_REFCONSULTATIONNATIVE;
          ELSE
            OPEN C_VERIF_REFCONSUL_14(P_REFCONSUL);
            FETCH C_VERIF_REFCONSUL_14 INTO R_VERIF_REFCONSUL_14;
            vFoundRefconsul14 := C_VERIF_REFCONSUL_14%FOUND;
            CLOSE C_VERIF_REFCONSUL_14;
            IF vFoundRefconsul14 THEN
              -- Si présent, alors on prend les 14premiers caractère
              P_NEWREF := SUBSTR(P_REFCONSUL,0,14);
            ELSE
              -- Sinon on prend les 12 premiers caractères
              P_NEWREF := SUBSTR(P_REFCONSUL,0,12);
            END IF;
          END IF;
        ELSE
          P_NEWREF := P_REFCONSULTATIONNATIVE;
        END IF;
    ELSE --> Dans le cas ZMD
      OPEN C_VERIF_REFCONSUL_14(P_REFCONSUL);
      FETCH C_VERIF_REFCONSUL_14 INTO R_VERIF_REFCONSUL_14;
      vFoundRefconsul14 := C_VERIF_REFCONSUL_14%FOUND;
      CLOSE C_VERIF_REFCONSUL_14;
      IF vFoundRefconsul14 THEN
        -- Si présent, alors on prend les 14premiers caractère
        P_NEWREF := SUBSTR(P_REFCONSUL,0,14);
      ELSE
        -- Sinon on prend les 12 premiers caractères
        P_NEWREF := SUBSTR(P_REFCONSUL,0,12);
      END IF;
    END IF;
  ELSE
    IF P_TYPZONDET =  'ZTD' THEN
     -- Pour l'IPE ZTD FTEL
      -- Si le type d'emplacement est de type PME
        -- On vérifie s'il existe une référenceconsultation native ou une date d'installation
        -- Si absent, alors on prend la valeur de la référence de consultation
     IF P_TYPEEMPLACEMENTPM IN ('PME', 'PME-Armoire de rue', 'PME-Local technique') THEN
       IF (P_REFCONSULTATIONNATIVE IS NOT NULL OR
           P_DATEINSTALLATIONPM IS NOT NULL) THEN
         P_NEWREF := P_REFCONSULTATIONNATIVE;
       ELSE
         P_NEWREF := SUBSTR(P_REFCONSUL,0,12);
       END IF;
     ELSE
       P_NEWREF := P_REFCONSULTATIONNATIVE;
     END IF;
    ELSE --> En ZMD
      P_NEWREF := SUBSTR(P_REFCONSUL,0,12);
    END IF;
  END IF;
  RETURN P_NEWREF;
END;

-----------------------------------------------------------------------------------
-- Traitement commande unitaire
-----------------------------------------------------------------------------------
PROCEDURE TRT_CMD_UNI(P_IDPM                  IN PM.IDPM%TYPE,
                      P_TYPZON                IN VARCHAR2,
                      P_TYPZONDET             IN VARCHAR2,
                      P_CODOI                 IN REF_OI.COD_OI%TYPE,
                      P_REFCONSULTATIONNATIVE IN IPE.REFERENCECONSULTATIONNATIVE%TYPE,
                      P_REFCONSUL             IN IPE.REFCONSUL%TYPE,
                      P_DATEINSTALLATIONPM    IN IPE.DATEINSTALLATIONPM%TYPE,
                      P_NUMEROVOIEPM          IN IPE.NUMEROVOIEPM%TYPE,
                      P_TYPEVOIEPM            IN IPE.TYPEVOIEPM%TYPE,
                      P_NOMVOIEPM             IN IPE.NOMVOIEPM%TYPE,
                      P_CODEPOSTALPM          IN IPE.CODEPOSTALPM%TYPE,
                      P_COMMUNEPM             IN IPE.VILLEPM%TYPE,
                      P_TYPEEMPLACEMENTPM     IN IPE.TYPEEMPLACEMENTPM%TYPE,
                      P_CODEINSEEPM           IN IPE.CODEINSEEPM%TYPE) IS
-------------------------------------------------------
-- récupération du PM si son état fait partie des états
-- sélectionnés pour le lancement de la commande unitaire
-------------------------------------------------------
CURSOR C_GET_PM_ETAT  IS
  SELECT DISTINCT i.REFERENCEPM
    FROM IPE i
   WHERE i.REFERENCEPM = P_IDPM
     AND i.ETATPM IN (SELECT val.LIBVAL
                        FROM BDMVAL         val,
                             REF_OI_CMD_PRM prm_oi
                       WHERE prm_oi.COD_OI = P_CODOI
                         AND prm_oi.ACTIF  = 1
                         AND val.CODVAL    = prm_oi.ETAPM_IPE
                         AND val.LSTVAL_ID = 'ETAIPE'
                         );
R_GET_PM_ETAT C_GET_PM_ETAT%ROWTYPE;
vFoundPmEtat  BOOLEAN;

vREF_CNSLT SOUSCRIPTION.REF_CNSLT%TYPE;

vRunCmd           NUMBER(1);
vAdresse          PM_CMD.ADR_SIG%TYPE;
BEGIN
  OPEN C_GET_PM_ETAT;
  FETCH C_GET_PM_ETAT INTO R_GET_PM_ETAT;
  vFoundPmEtat := C_GET_PM_ETAT%FOUND;
  CLOSE C_GET_PM_ETAT;

  IF P_TYPZON = 'ZSP' THEN --> Dans le cas ZSP
    IF vFoundPmEtat THEN
      IF P_TYPZONDET =  'ZTD' THEN
        IF P_CODOI IN ('FTEL',NAT_FTTH_OI.P_CODOI_SIMPSON) THEN
          vREF_CNSLT := NAT_FTTH_OI.GET_REFCONSUL_OF_SMP(P_REFCONSUL             => P_REFCONSUL,
                                                         P_TYPZON                => P_TYPZON,
                                                         P_TYPZONDET             => P_TYPZONDET,
                                                         P_REFCONSULTATIONNATIVE => P_REFCONSULTATIONNATIVE,
                                                         P_DATEINSTALLATIONPM    => P_DATEINSTALLATIONPM,
                                                         P_TYPEEMPLACEMENTPM     => P_TYPEEMPLACEMENTPM);
        ELSE
          vREF_CNSLT := P_REFCONSULTATIONNATIVE;
        END IF;
      ELSE --> Dans le cas ZMD
        IF P_CODOI IN ('FTEL',NAT_FTTH_OI.P_CODOI_SIMPSON) THEN
          -- On doit vérifier la présence de S- dans le champ refconsul
          vREF_CNSLT := NAT_FTTH_OI.GET_REFCONSUL_OF_SMP(P_REFCONSUL             => P_REFCONSUL,
                                                         P_TYPZON                => P_TYPZON,
                                                         P_TYPZONDET             => P_TYPZONDET,
                                                         P_REFCONSULTATIONNATIVE => P_REFCONSULTATIONNATIVE,
                                                         P_DATEINSTALLATIONPM    => P_DATEINSTALLATIONPM,
                                                         P_TYPEEMPLACEMENTPM     => P_TYPEEMPLACEMENTPM);
        ELSE
          vREF_CNSLT := P_REFCONSULTATIONNATIVE;
        END IF;
      END IF;
    ELSE
      vRunCmd := 0;
    END IF;

    IF vREF_CNSLT IS NULL AND  P_DATEINSTALLATIONPM IS NULL THEN
      vRunCmd := 0;
    ELSE
      vAdresse := P_NUMEROVOIEPM || ' ' || P_TYPEVOIEPM || ' '
                    || P_NOMVOIEPM || ' ' || P_CODEPOSTALPM || ' ' || P_COMMUNEPM;
      vRunCmd := 1;
    END IF;
  ELSE -- Quand ce n'est pas la ZSP
    IF vFoundPmEtat THEN
      IF P_TYPZONDET =  'ZTD' THEN
        IF P_CODOI IN ('FTEL',NAT_FTTH_OI.P_CODOI_SIMPSON) THEN
           -- Pour l'IPE ZTD FTEL
            -- Si le type d'emplacement est de type PME
              -- On vérifie s'il existe une référenceconsultation native ou une date d'installation
              -- Si absent, alors on prend la valeur de la référence de consultation
          vREF_CNSLT := NAT_FTTH_OI.GET_REFCONSUL_OF_SMP(P_REFCONSUL             => P_REFCONSUL,
                                                         P_TYPZON                => P_TYPZON,
                                                         P_TYPZONDET             => P_TYPZONDET,
                                                         P_REFCONSULTATIONNATIVE => P_REFCONSULTATIONNATIVE,
                                                         P_DATEINSTALLATIONPM    => P_DATEINSTALLATIONPM,
                                                         P_TYPEEMPLACEMENTPM     => P_TYPEEMPLACEMENTPM);
         ELSIF P_CODOI IN ('SFRA','SFMD') THEN
           vREF_CNSLT := SUBSTR(P_REFCONSUL,0,12);
         ELSE
           vREF_CNSLT := P_REFCONSULTATIONNATIVE;
         END IF;
      ELSE
        IF P_CODOI IN ('FTEL','SFMD','SFOR',NAT_FTTH_OI.P_CODOI_SIMPSON) THEN
          vREF_CNSLT := NAT_FTTH_OI.GET_REFCONSUL_OF_SMP(P_REFCONSUL             => P_REFCONSUL,
                                                         P_TYPZON                => P_TYPZON,
                                                         P_TYPZONDET             => P_TYPZONDET,
                                                         P_REFCONSULTATIONNATIVE => P_REFCONSULTATIONNATIVE,
                                                         P_DATEINSTALLATIONPM    => P_DATEINSTALLATIONPM,
                                                         P_TYPEEMPLACEMENTPM     => P_TYPEEMPLACEMENTPM);
        ELSE
          vREF_CNSLT := P_REFCONSULTATIONNATIVE;
        END IF;
      END IF;

      IF vREF_CNSLT IS NULL AND  P_DATEINSTALLATIONPM IS NULL THEN
        vRunCmd := 0;
      ELSE
        vAdresse := P_NUMEROVOIEPM || ' ' || P_TYPEVOIEPM || ' '
                      || P_NOMVOIEPM || ' ' || P_CODEPOSTALPM || ' ' || P_COMMUNEPM;
        vRunCmd := 1;
      END IF;
    ELSE
      vRunCmd := 0;
    END IF;
  END IF;

  IF vRunCmd = 1 THEN
    APP_FF1_SCP.RUN_CMD_FROM_IPE_V2(P_COD_OI             => P_CODOI,
                                    P_TYPE               => P_TYPZONDET,
                                    P_REF_CNSLT          => vREF_CNSLT,
                                    P_COD_INSEE          => P_CODEINSEEPM,
                                    --P_DATEINSTALLATIONPM => TO_DATE(P_DATEINSTALLATIONPM,'YYYY/MM/DD'),
                                    P_DATEINSTALLATIONPM => P_DATEINSTALLATIONPM,
                                    P_REFERENCEPM        => P_IDPM,
                                    P_ADR_SIG            => vAdresse);


  END IF;

END;

------------------------------------------------------------------------------------
-- Traitement IPE 2.1 Obsolète
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_IPE_V21(P_CODOI   IN REF_OI.COD_OI%TYPE,
                          P_TYPE    IN VARCHAR2,
                          P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
-- Les informations du fichier

BEGIN
  NULL;
END;

------------------------------------------------------------------------------------
-- Traitement IPE 2.2
-----------------------------------------------------------------------------------
/*PROCEDURE POS_TRT_IPE_V22(P_CODOI   IN REF_OI.COD_OI%TYPE,
                          P_TYPE    IN VARCHAR2,
                          P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
-- Les informations du fichier
CURSOR C_INFO_FIC IS
  SELECT fio.NOM_FIC,
         fio.REP_FIC,
         fio.EMETTEUR
    FROM FILE_IO fio
   WHERE fio.FILE_ID = P_FILE_ID;
R_INFO_FIC C_INFO_FIC%ROWTYPE;

CURSOR C_PRJPM (vRefPM IPE.REFERENCEPM%TYPE) IS
  SELECT prj.PRJPM_ID,
         prj.PART_ADD,
         pm.IDPM
    FROM ETAPRJPM eta,
         PRJPM prj,
         PM    pm
   WHERE pm.IDPM         = vRefPM
     AND prj.GEO_ID      = pm.GEO_ID
     AND eta.ETAPRJPM_ID = prj.ETAPRJPM_ID
     AND eta.ETAPRJPM    <> 'ABN';

R_PRJPM   C_PRJPM%ROWTYPE;
vFoundPrj BOOLEAN;


V_CUR       SYS_REFCURSOR;
R_CUR       IPE_COVA_V22_TMP%ROWTYPE;

V_CUR_NB    SYS_REFCURSOR;


vtableName  VARCHAR2(100);
vNB_REC     NUMBER;
vCtrlNbRec  NUMBER;
vCtrlAllTol NUMBER;
vControleOC NUMBER;
vImm_id     NUMBER;
vIS_NEW_FOR_OI_ONLY NUMBER;
vIS_MAJ_OSS         NUMBER;
vNomIfcOut          VARCHAR2(100);
vId_Preparation     NUMBER;
v_Fileio_OUT        NUMBER;
vProtocol           VARCHAR2(5);
vCtrlAdr            NUMBER;
vCtrlAdrItg         NUMBER;
vCtrlAdrItg_za      NUMBER;
vCtrlAdr_za         NUMBER;
v_compt             NUMBER;
vHexacle            HEXA_BTL.HEXABTL%TYPE;
vDatMajHexaBytel    DATE;
vHexaExistingAdrBlk ADR_IMM_OI.CODEADRESSEIMMEUBLE%TYPE;
vCATRACLGMT_CAL     ADR_IMM_OI.CATRACLGMT_CAL%TYPE; --VARCHAR2(255);

-----------------------------------------
-- les variables pour synthèse traitement
vNBLGNIPE NUMBER;
vNBLGNTRT NUMBER;
-----------------------------------------
CURSOR C_VERIF_BLK(vHexa ADR_BLK.HEXACLE%TYPE) IS
  SELECT 1
    FROM ADR_BLK a
   WHERE a.HEXACLE = vHexa
     AND a.BLK_VALID = 1
     AND a.CODOI     = P_CODOI;
R_VERIF_BLK C_VERIF_BLK%ROWTYPE;
vFoundBlk   BOOLEAN;
vBlk        VARCHAR2(3);
--------------------------------------------------
-- récupération de la table temporaire
CURSOR C_GET_TMP IS
  SELECT (CASE P_TYPE
            WHEN 'ZTD' THEN
              flx.IPE_ZTD_TMP
            ELSE
              flx.IPE_ZMD_TMP
         END) AS IPE_TMP,
         flx.COD_PART_FLUX
    FROM PART_FLX   flx,
         REF_OI_PRM rop,
         REF_OI     roi
   WHERE roi.COD_OI = P_CODOI
     AND rop.COD_OI = roi.COD_OI
     AND rop.PRTCL  = '2.2'
     AND rop.OBS    = 0
     AND flx.COD_PART_FLUX = rop.COD_PART_FLUX;
R_GET_TMP C_GET_TMP%ROWTYPE;
vFoundTmp BOOLEAN;
vPartFlx  PART_FLX.COD_PART_FLUX%TYPE;

vMajOss NUMBER;

----------------------------------------------------
-- récupération du PM si son état fait partie des états
-- sélectionnés pour le lancement de la commande unitaire
CURSOR C_GET_PM_ETAT (pPmId VARCHAR2) IS
  SELECT DISTINCT i.REFERENCEPM
    FROM IPE i
   WHERE i.REFERENCEPM = pPmId
     AND i.ETATPM IN (SELECT val.LIBVAL
                        FROM REF_OI_CMD_PRM prm_oi,
                             BDMVAL         val
                       WHERE prm_oi.ETAPM_IPE = val.CODVAL
                         AND val.LSTVAL_ID = 'ETAIPE'
                         AND prm_oi.COD_OI = i.CODOI
                         AND prm_oi.ACTIF = 1);
R_GET_PM_ETAT C_GET_PM_ETAT%ROWTYPE;
vFoundPmEtat  BOOLEAN;

vRunCmd NUMBER(1);
vPmEcours IPE.REFERENCEPM%TYPE;
vREF_CNSLT SOUSCRIPTION.REF_CNSLT%TYPE;
vAdresse   PM_CMD.ADR_SIG%TYPE;

CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = P_FILE_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
BEGIN
  BEGIN
    DELETE FROM FIC_FTTH WHERE FILE_ID = P_FILE_ID;
    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => NULL,
                         P_CODOI    => P_CODOI,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
    COMMIT;
  EXCEPTION
   WHEN OTHERS THEN
     plog.info('POST TRAITEMENT IPE : Erreur FIC_FTTH',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  v_compt := 0;
  vRunCmd := 0;
  vPmEcours := 'INIT';

  CASE P_TYPE
    WHEN 'ZTD' THEN
      vProtocol := '2.2';
    ELSE
      vProtocol := 'ZMD';
  END CASE;

  -- Récupératoin de la table temporaire
  OPEN C_GET_TMP;
  FETCH C_GET_TMP INTO R_GET_TMP;
  vFoundTmp := C_GET_TMP%FOUND;
  CLOSE C_GET_TMP;

  IF vFoundTmp THEN
    vtableName :=  R_GET_TMP.IPE_TMP;
    vPartFlx   :=  R_GET_TMP.COD_PART_FLUX;
  END IF;

  V_CUR_NB := NAT_FTTH_OI.GET_FTTH_NB_REC(vtableName);
  LOOP
    FETCH V_CUR_NB INTO vNB_REC;
    EXIT WHEN V_CUR_NB%NOTFOUND;
  END LOOP;

  -- Controle IPE
  -- contrôle du nombre de lignes du nouveau fichier vs la base
  plog.info('POST TRAITEMENT IPE : Début Contrôle nombre de lignes du fichier',
                   'FILEID', P_FILE_ID,
                   'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'),
                   'Nombre de lignes dans le fichier', vNB_REC);
  vCtrlNbRec := NAT_FF1_CTRL_IPE.CTRL_NB_RECORDS_IPE (P_CODOI,
                                                      vProtocol,
                                                      vNB_REC,
                                                      P_FILE_ID);
  plog.info('POST TRAITEMENT IPE : Fin Contrôle nombre de lignes du fichier',
                   'FILEID', P_FILE_ID,
                   'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'),
                   'Résultat', (CASE WHEN vCtrlNbRec=1
                                     THEN 'OK'
                                     ELSE 'NOK'
                                END));

  vNBLGNIPE := vNB_REC;
  vNBLGNTRT := 0;
  -- contrôle tolérence sur :
    -- Code Adresse Immeuble
    -- Code Insee
    -- Code Rivoli
    -- Num Voie
    -- Ecart Date Mes/EtatPM
  plog.info('POST TRAITEMENT IPE : Début Contrôle tolérance',
                   'FILEID', P_FILE_ID,
                   'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  vCtrlAllTol := NAT_FF1_CTRL_IPE.CTRL_ALL_TOLERANCE(P_CODOI,
                                                     P_TYPE,
                                                     P_FILE_ID,
                                                     '2.2'
                                                     );
  plog.info('POST TRAITEMENT IPE : Fin Contrôle tolérance',
                   'FILEID', P_FILE_ID,
                   'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'),
                   'Résultat', (CASE WHEN vCtrlAllTol=1
                                     THEN 'OK'
                                     ELSE 'NOK'
                                END));

  IF vCtrlNbRec = 1 AND vCtrlAllTol = 1 THEN
    plog.info('POST TRAITEMENT IPE : Début Suppression IPE',
                     'FILEID', P_FILE_ID,
                     'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    DELETE FROM IPE i
           WHERE i.CODOI  = P_CODOI
             AND i.TYPZON = P_TYPE
             AND i.FORCED <> 1
             AND i.REFERENCEPM IS NULL;
    plog.info('POST TRAITEMENT IPE : Fin Suppression IPE ',
                     'FILEID', P_FILE_ID,
                     'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

    OPEN C_INFO_FIC;
    FETCH C_INFO_FIC INTO R_INFO_FIC;
    CLOSE C_INFO_FIC;

    V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(vtableName);
    plog.info('POST TRAITEMENT IPE : Début itération IPE',
                     'FILEID', P_FILE_ID,
                     'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    LOOP
      FETCH V_CUR INTO R_CUR;
      EXIT WHEN V_CUR%NOTFOUND;
      vRunCmd := 0;

      -- Vérification hexacle et remplacement
      --> l'hexa de l'IPE doit être null
      --> Sur un immeuble déployé
      --> dont le code insee du PM est dans le module souscription
      IF R_CUR.CODEADRESSEIMMEUBLE IS NULL AND
         R_CUR.ETATIMMEUBLE = 'DEPLOYE'    AND
         R_CUR.REFERENCEPM IS NOT NULL     AND
         R_CUR.IDENTIFIANTIMMEUBLE IS NOT NULL AND
         NAT_FF1_ADR.IS_CMN_BYTEL(R_CUR.REFERENCEPM) = 1 THEN
        vHexacle := APP_FF1_ADR.GET_HEXA_CLE_BYTEL(P_NUMEROVOIEIMMEUBLE     => R_CUR.NUMEROVOIEIMMEUBLE,
                                                   P_COMPLEMENTVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                   P_TYPEVOIEIMMEUBLE       => R_CUR.TYPEVOIEIMMEUBLE,
                                                   P_NOMVOIEIMMEUBLE        => R_CUR.NOMVOIEIMMEUBLE,
                                                   P_CODEINSEEIMMEUBLE      => R_CUR.CODEINSEEIMMEUBLE);
        vDatMajHexaBytel := sysdate;
      ELSE
        vHexacle := R_CUR.CODEADRESSEIMMEUBLE;
        vDatMajHexaBytel := NULL;
      END IF;

      v_compt := v_compt + 1;
      IF R_CUR.REFERENCEPM IS NOT NULL THEN
        IF vPmEcours <> R_CUR.REFERENCEPM THEN
          DELETE FROM IPE i
           WHERE i.CODOI  = P_CODOI
             AND i.TYPZON = P_TYPE
             AND i.FORCED <> 1
             AND i.REFERENCEPM = R_CUR.REFERENCEPM;
          -- Nettoyage de la base d'adresses des données CR MAD
          DELETE FROM ADR_IMM_OI a
           WHERE a.REFERENCEPM = R_CUR.REFERENCEPM
             AND a.SRCADR      = 'MAD';
          -- Alerte 2
          --> Si l'étatPM = DEPLOYE dans l'IPE et etat PM dans la base adresse = EN COURS DE DEPLOIEMENT, alors alerte
          --> Dans le module CR MAD
          --> Cloture de l'alerte à la réception du  CR MAD associé
          NAT_FF1_CR_MAD_PM.CTRL_CRMAD_ETAPM (R_CUR.REFERENCEPM,
                                              R_CUR.ETATPM);
          --  Alerte 3
          --> Si l'étatPM = EN COURS DE DEPLOIEMENT dans l'IPE et DEPLOYE dans la base adresse, alors alerte
          --> Dans le module CR MAD
          --> Cloture à la réception d'un nouvel IPE avec l'état du PM à DEPLOYE
          NAT_FF1_CR_MAD_PM.CTRL_CRMAD_ETAPM_NDPL(R_CUR.REFERENCEPM,
                                                  R_CUR.ETATPM);
        END IF;
      END IF;
      -- L'adresse peut-elle être intégrée ?
      vCtrlAdrItg := NAT_FF1_CTRL_ADR.CTRL_ITG_ADR(vHexacle,
                                                   R_CUR.CODEINSEEIMMEUBLE,
                                                   R_CUR.CODERIVOLIIMMEUBLE);
      --Tous les controles des alertes
      vCtrlAdr := 0;
      IF (vCtrlAdrItg = 1) THEN
        -- Taille code adresse (intégré ? fermé manuellement)
        -- Format code adresse (Sauf SFR, fermé manuellement)
        -- Etat Immeuble
        -- Coherence etat immeuble
        -- nombre de logements PM (doit etre intégré)
       -- Nouveaux contrôles :
       -- 6 Si le PM est à l'état déployé dans l'IPE
          -- si l'adresse associée est à l'état déployé, alors on vérifie sa présence dans le réf adresses à l'état déployé
          --> Par contre c'est une alerte non bloquante dans le module adresse
       -- 7 Si le PM de l'adresse n'est pas à l'état déployé dans l'IPE reçu,
          -- alors on vérifie que l'état de l'adresse n'est pas à l'état déployé dans l'IPE reçu
               --> Sinon alerte non bloquante dans le module adresse
        vCtrlAdr := NAT_FF1_CTRL_ADR.CTRL_ALL_ADRESSE(P_CODOI,
                                                      R_CUR.REFERENCEPM,
                                                      vHexacle,
                                                      R_CUR.CODEINSEEIMMEUBLE,
                                                      R_CUR.CODERIVOLIIMMEUBLE,
                                                      R_CUR.ETATIMMEUBLE,
                                                      R_CUR.ETATPM,
                                                      R_CUR.NOMBRELOGEMENTSPM,
                                                      R_CUR.NUMEROVOIEIMMEUBLE,
                                                      R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                      R_CUR.IDENTIFIANTIMMEUBLE,
                                                      R_CUR.BATIMENTIMMEUBLE);


        IF R_CUR.REFERENCEPM IS NOT NULL THEN
          IF vPmEcours <> R_CUR.REFERENCEPM THEN --> Si on traite le PM la première fois
             OPEN C_PRJPM(R_CUR.REFERENCEPM);
             FETCH C_PRJPM INTO R_PRJPM;
             vFoundPrj := C_PRJPM%FOUND;
             CLOSE C_PRJPM;

             IF vFoundPrj AND vProtocol <> 'ZMD'  THEN
               CASE R_PRJPM.PART_ADD
                 WHEN 'SFR' THEN
                   vControleOC := NAT_FF1_CTRL.CTRL_IPE_DATE_OC(R_PRJPM.PRJPM_ID ,R_CUR.REFERENCEPM, '2.1');
                 WHEN 'OF_' THEN
                   vControleOC := NAT_FF1_CTRL_OF.CTRL_OC_DATE_OC(R_PRJPM.PRJPM_ID ,R_CUR.REFERENCEPM, '2.1');
                 WHEN 'SEQ' THEN
                   vControleOC := NAT_FF1_CTRL_SEQ.CTRL_OC_DATE_OC(R_PRJPM.PRJPM_ID ,R_CUR.REFERENCEPM, '2.1');
                 ELSE vControleOC := 1;
               END CASE;
            ELSE
               vControleOC := 1;
               IF vProtocol = 'ZMD' AND P_CODOI IN ('FTEL','SFOR') THEN
                 -- Pas de projet, en ZMD : on essaye de le créer
                 NAT_FF1_ZA.NEW_PRJPM_ZA(R_CUR.REFERENCEPM,'AMI');
               ELSIF vProtocol = 'ZMD' AND R_GET_TMP.COD_PART_FLUX = 'AXIO' THEN
                 -- Pas de projet, en ZMD : on essaye de le créer
                 NAT_FF1_RIP.NEW_PRJPM_ZA(R_CUR.REFERENCEPM,'RIP');
               ELSIF P_TYPE = 'ZMD' AND R_GET_TMP.COD_PART_FLUX = 'COVA'  THEN
                 -- Pas de projet, en RIP ALTITUDE : on essaye de le créer
                 NAT_FF1_COV.NEW_PRJPM_COV(R_CUR.REFERENCEPM,'COV');
               END IF;
            END IF;
          END IF;
        ELSE -->Dans le cas ou l'IDPM est NULL
          vControleOC := 1 ;
        END IF;
        IF vControleOC = 1 AND vCtrlAdr = 1 THEN
          -- Contrôle de présence
          --> On vérifie si l'immeuble n'existe pas pour cette OI
            --> Si l'immeuble n'existe pas pour cette OI, on vérifie si l'immeuble existe pour une autre OI
            --> Si c'est la cas, on ne va pas insérer une nouvelle ligne dans la table des immeubles
          vImm_id := NAT_FF1_TRT_FLX.GET_IMM_FROM_ADR(P_CODOI,
                                                      R_CUR.CODEINSEEIMMEUBLE,
                                                      R_CUR.CODERIVOLIIMMEUBLE,
                                                      R_CUR.NUMEROVOIEIMMEUBLE,
                                                      R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                      R_CUR.IDENTIFIANTIMMEUBLE,
                                                      R_CUR.BATIMENTIMMEUBLE,
                                                      R_CUR.REFERENCEPM,
                                                      vHexacle,
                                                      vIS_NEW_FOR_OI_ONLY);

          IF (vImm_id IS NULL) OR (vImm_id IS NOT NULL AND vIS_NEW_FOR_OI_ONLY = 1)  THEN --> On est sure que l'immeuble n'exite pas
            IF vImm_id IS NULL THEN
              -- Création de l'immeuble
              NAT_FF1_TRT_FLX.NEW_IMMEUBLE(vImm_id,
                                           vHexacle,
                                           vtableName);
            ELSE
              -- MAJ de l'info adresse
              NAT_FF1_TRT_FLX.SET_IMMEUBLE(vImm_id,
                                           vHexacle,
                                           vtableName);
            END IF;
            -- Insertion de l'adresse :
            BEGIN
              IF vDatMajHexaBytel IS NULL THEN
                vHexaExistingAdrBlk := NAT_FF1_ADR.GET_EXISTING_ADR_HEXABTL_BLK(R_CUR.CODEINSEEIMMEUBLE,
                                                                  R_CUR.CODERIVOLIIMMEUBLE,
                                                                  R_CUR.NUMEROVOIEIMMEUBLE,
                                                                  R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                                                R_CUR.TYPEVOIEIMMEUBLE,
                                                                                R_CUR.NOMVOIEIMMEUBLE,
                                                                                R_CUR.IDENTIFIANTIMMEUBLE);

              ELSE
                vHexaExistingAdrBlk := NAT_FF1_ADR.GET_EXISTING_ADR_BLK(R_CUR.CODEINSEEIMMEUBLE,


                                                                        R_CUR.CODERIVOLIIMMEUBLE,
                                                                        R_CUR.NUMEROVOIEIMMEUBLE,
                                                                        R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                                        R_CUR.TYPEVOIEIMMEUBLE,
                                                                        R_CUR.NOMVOIEIMMEUBLE,
                                                                        R_CUR.IDENTIFIANTIMMEUBLE);


              END IF;
              IF vHexaExistingAdrBlk IS NOT NULL THEN
                 vBlk := 'OUI';
              ELSE
                OPEN C_VERIF_BLK(vHexacle);
                FETCH C_VERIF_BLK INTO R_VERIF_BLK;
                vFoundBlk := C_VERIF_BLK%FOUND;
                CLOSE C_VERIF_BLK;

                IF vFoundBlk THEN
                  vBlk := 'OUI';
                ELSE
                  vBlk := 'NON';
                END IF;
              END IF;

              vCATRACLGMT_CAL := NAT_FTTH_OI.GET_CRL(R_CUR.CODEINSEEIMMEUBLE,
                                                       R_CUR.CODERIVOLIIMMEUBLE,
                                                       R_CUR.NUMEROVOIEIMMEUBLE,
                                                       R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                       R_CUR.IDENTIFIANTIMMEUBLE,
                                                       R_CUR.BATIMENTIMMEUBLE,
                                                       R_CUR.REFERENCEPM,
                                                       R_CUR.CODEADRESSEIMMEUBLE);

              NAT_FTTH_OI.INS_ADR_IMM_OI(P_REFERENCEPM                  => R_CUR.REFERENCEPM,
                                           P_IMM_ID                       => vImm_id,
                                           P_IDENTIFIANTIMMEUBLE          => R_CUR.IDENTIFIANTIMMEUBLE,
                                           P_CODERIVOLIIMMEUBLE           => R_CUR.CODERIVOLIIMMEUBLE,
                                           P_CODEINSEEIMMEUBLE            => R_CUR.CODEINSEEIMMEUBLE,
                                           P_CODEPOSTALIMMEUBLE           => R_CUR.CODEPOSTALIMMEUBLE,
                                           P_VILLEIMMEUBLE                => R_CUR.COMMUNEIMMEUBLE,
                                           P_CODEADRESSEIMMEUBLE          => vHexacle,
                                           P_TYPEVOIEIMMEUBLE             => R_CUR.TYPEVOIEIMMEUBLE,
                                           P_NOMVOIEIMMEUBLE              => R_CUR.NOMVOIEIMMEUBLE,
                                           P_NUMEROVOIEIMMEUBLE           => R_CUR.NUMEROVOIEIMMEUBLE,
                                           P_COMPLEMENTNUMEROVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                           P_BATIMENTIMMEUBLE             => R_CUR.BATIMENTIMMEUBLE,
                                           P_NBRELOGEMENTSINFOPREALABLES  => TO_NUMBER(R_CUR.NOMBRELOGEMENTSINFOPREALABLES),
                                           P_ETATIMMEUBLE                 => R_CUR.ETATIMMEUBLE,
                                           P_ETATPM                       => R_CUR.ETATPM,
                                           P_DATEINSTALLATIONPM           => TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD') ,
                                           P_CODERIVOLIPM                 => R_CUR.CODEVOIERIVOLIPM,
                                           P_CODEINSEEPM                  => R_CUR.CODEINSEEPM,
                                           P_CODEPOSTALPM                 => R_CUR.CODEPOSTALPM,
                                           P_VILLEPM                      => R_CUR.COMMUNEPM,
                                           P_CODEADRESSEPM                => R_CUR.CODEADRESSEPM,
                                           P_TYPEVOIEPM                   => R_CUR.TYPEVOIEPM,
                                           P_NOMVOIEPM                    => R_CUR.NOMVOIEPM,
                                           P_NUMEROVOIEPM                 => R_CUR.NUMEROVOIEPM,
                                           P_COMPLEMENTVOIEPM             => R_CUR.COMPLEMENTVOIEPM,
                                           P_DATE_IMP                     => R_CUR.DATE_IMP,
                                           P_FILE_ID                      => R_CUR.FILE_ID,
                                           P_BATIMENTPM                   => R_CUR.BATIMENTPM,
                                           P_CODOI                        => P_CODOI,
                                           P_TYPZON                       => P_TYPE,
                                           P_DATENVOSSFAI                 => NULL,
                                           P_NOMBREPMTECHNIQUES           => TO_NUMBER(R_CUR.NOMBREPMTECHNIQUES),
                                           P_TYPEIMMEUBLE                 => R_CUR.TYPEIMMEUBLE,
                                           P_TYPEPROJECTIONGEOGRAPHIQUE   => R_CUR.TYPEPROJECTIONGEOGRAPHIQUE,
                                           P_COORDONNEEPMX                => ROUND(TO_NUMBER(R_CUR.COORDONNEEPMX),5),
                                           P_COORDONNEEPMY                => ROUND(TO_NUMBER(R_CUR.COORDONNEEPMY),5),
                                           P_COORDONNEEIMMEUBLEX          => ROUND(TO_NUMBER(R_CUR.COORDONNEEIMMEUBLEX),5),
                                           P_COORDONNEEIMMEUBLEY          => ROUND(TO_NUMBER(R_CUR.COORDONNEEIMMEUBLEY),5),
                                           P_TYPEZONE                     => R_CUR.TYPEZONE,
                                           P_BLACKLIST                    => vBlk,
                                           P_MAJ_OSSF                     => 1,
                                           P_ETAIMMSIR                    => 'A',
                                           P_SRCADR                       => 'IPE',
                                           P_ACRDGESTNAIREIMM             => R_CUR.ACCORDGESTIONNAIRENECESSAIRE,
                                           P_HEXABTL                      => (CASE WHEN vDatMajHexaBytel IS NOT NULL
                                                                                THEN vHexacle
                                                                                ELSE NULL
                                                                              END),
                                           P_DATEMAJHEXABTL               => vDatMajHexaBytel,
                                           P_TYPEINGENIERIE               => R_CUR.TYPEINGENIERIE,
                                           P_DATECABLAGEADRESSE           => TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD'),
                                           P_TYPRACCOPBPTO                => NULL,
                                           P_TYPPBO                       => NULL,
                                           P_DATEMISEENSERVICECOMEPM      => TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD'),
                                           P_DATMESCOMIMM                 => TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD'),
                                           P_DATDEBACPTCMDACSS            => TO_DATE(R_CUR.DATDEBACPTCMDACSS,'YYYY/MM/DD'),
                                           P_TYPEEMPLACEMENTPM            => R_CUR.TYPEEMPLACEMENTPM,
                                           P_CATRACLGMT_CAL               => vCATRACLGMT_CAL);
            IF vHexaExistingAdrBlk IS NOT NULL THEN
              NAT_FF1_ADR.INS_ADR_BLK_FROM_PREVIOUS_HEXA(vHexaExistingAdrBlk,
                                                         vHexacle,
                                                         P_CODOI);
            END IF;
            EXCEPTION
              WHEN OTHERS THEN
                plog.ERROR('Erreur lors de l''insertion adresse 1.0 dans la table finale','SQLERRM', SQLERRM);
                plog.full_error_backtrace('File_ID',P_FILE_ID);
                plog.full_call_stack('File_ID',P_FILE_ID);
            END;
          ELSE --> Dans le cas où l'immeuble existe déjà
            -- MAJ de l'info adresse
            BEGIN
              NAT_FF1_TRT_FLX.SET_IMMEUBLE(vImm_id,
                                           vHexacle,
                                           vtableName);
              vMajOss := DELTA_IPE_OSS_V2X(P_CODOI,
                                           vImm_id,
                                           R_CUR.TYPEIMMEUBLE,
                                           r_cur.ACCORDGESTIONNAIRENECESSAIRE,
                                           r_cur.REFERENCEPM,
                                           NULL,
                                           NULL,
                                           UPPER(r_cur.ETATIMMEUBLE),
                                           r_cur.CODERIVOLIIMMEUBLE,
                                           R_cur.CODEADRESSEIMMEUBLE);

              vCATRACLGMT_CAL := NAT_FTTH_OI.GET_CRL(R_CUR.CODEINSEEIMMEUBLE,
                                                       R_CUR.CODERIVOLIIMMEUBLE,
                                                       R_CUR.NUMEROVOIEIMMEUBLE,
                                                       R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                       R_CUR.IDENTIFIANTIMMEUBLE,
                                                       R_CUR.BATIMENTIMMEUBLE,
                                                       R_CUR.REFERENCEPM,
                                                       R_CUR.CODEADRESSEIMMEUBLE);

              NAT_FTTH_OI.SET_ADR_IMM_OI(P_REFERENCEPM                  => R_CUR.REFERENCEPM,
                                         P_IMM_ID                       => vImm_id,
                                         P_IDENTIFIANTIMMEUBLE          => R_CUR.IDENTIFIANTIMMEUBLE,
                                         P_CODERIVOLIIMMEUBLE           => R_CUR.CODERIVOLIIMMEUBLE,
                                         P_CODEINSEEIMMEUBLE            => R_CUR.CODEINSEEIMMEUBLE,
                                         P_CODEPOSTALIMMEUBLE           => R_CUR.CODEPOSTALIMMEUBLE,
                                         P_VILLEIMMEUBLE                => R_CUR.COMMUNEIMMEUBLE,
                                         P_CODEADRESSEIMMEUBLE          => vHexacle,
                                         P_TYPEVOIEIMMEUBLE             => R_CUR.TYPEVOIEIMMEUBLE,
                                         P_NOMVOIEIMMEUBLE              => R_CUR.NOMVOIEIMMEUBLE,
                                         P_NUMEROVOIEIMMEUBLE           => R_CUR.NUMEROVOIEIMMEUBLE,
                                         P_COMPLEMENTNUMEROVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                         P_BATIMENTIMMEUBLE             => R_CUR.BATIMENTIMMEUBLE,
                                         P_NBRELOGEMENTSINFOPREALABLES  => TO_NUMBER(R_CUR.NOMBRELOGEMENTSINFOPREALABLES),
                                         P_ETATIMMEUBLE                 => R_CUR.ETATIMMEUBLE,
                                         P_ETATPM                       => R_CUR.ETATPM,
                                         P_DATEINSTALLATIONPM           => TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD'),
                                         P_CODERIVOLIPM                 => R_CUR.CODEVOIERIVOLIPM,
                                         P_CODEINSEEPM                  => R_CUR.CODEINSEEPM,
                                         P_CODEPOSTALPM                 => R_CUR.CODEPOSTALPM,
                                         P_VILLEPM                      => R_CUR.COMMUNEPM,
                                         P_CODEADRESSEPM                => R_CUR.CODEADRESSEPM,
                                         P_TYPEVOIEPM                   => R_CUR.TYPEVOIEPM,
                                         P_NOMVOIEPM                    => R_CUR.NOMVOIEPM,
                                         P_NUMEROVOIEPM                 => R_CUR.NUMEROVOIEPM,
                                         P_COMPLEMENTVOIEPM             => R_CUR.COMPLEMENTVOIEPM,
                                         P_DATE_IMP                     => R_CUR.DATE_IMP,
                                         P_FILE_ID                      => R_CUR.FILE_ID,
                                         P_BATIMENTPM                   => R_CUR.BATIMENTPM,
                                         P_CODOI                        => P_CODOI,
                                         P_TYPZON                       => P_TYPE,
                                         P_DATENVOSSFAI                 => NULL,
                                         P_NOMBREPMTECHNIQUES           => TO_NUMBER(R_CUR.NOMBREPMTECHNIQUES),
                                         P_TYPEIMMEUBLE                 => R_CUR.TYPEIMMEUBLE,
                                         P_TYPEPROJECTIONGEOGRAPHIQUE   => R_CUR.TYPEPROJECTIONGEOGRAPHIQUE,
                                         P_COORDONNEEPMX                => ROUND(TO_NUMBER(R_CUR.COORDONNEEPMX),5),
                                         P_COORDONNEEPMY                => ROUND(TO_NUMBER(R_CUR.COORDONNEEPMY),5),
                                         P_COORDONNEEIMMEUBLEX          => ROUND(TO_NUMBER(R_CUR.COORDONNEEIMMEUBLEX),5),
                                         P_COORDONNEEIMMEUBLEY          => ROUND(TO_NUMBER(R_CUR.COORDONNEEIMMEUBLEY),5),
                                         P_TYPEZONE                     => R_CUR.TYPEZONE,
                                         P_BLACKLIST                    => 0,
                                         P_MAJ_OSSF                     => vMajOss,
                                         P_ETAIMMSIR                    => 'M',
                                         P_SRCADR                       => 'IPE',
                                         P_ACRDGESTNAIREIMM             => R_CUR.ACCORDGESTIONNAIRENECESSAIRE,
                                         P_HEXABTL                      => (CASE WHEN vDatMajHexaBytel IS NOT NULL
                                                                                THEN vHexacle
                                                                                ELSE NULL
                                                                            END),
                                         P_DATEMAJHEXABTL               => vDatMajHexaBytel,
                                         P_TYPEINGENIERIE               => R_CUR.TYPEINGENIERIE,
                                         P_DATECABLAGEADRESSE           => TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD'),
                                         P_TYPRACCOPBPTO                => NULL,
                                         P_TYPPBO                       => NULL,
                                         P_DATEMISEENSERVICECOMEPM      => TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD'),
                                         P_DATMESCOMIMM                 => TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD'),
                                         P_DATDEBACPTCMDACSS            => TO_DATE(R_CUR.DATDEBACPTCMDACSS,'YYYY/MM/DD'),
                                         P_TYPEEMPLACEMENTPM            => R_CUR.TYPEEMPLACEMENTPM,
                                         P_CATRACLGMT_CAL               => vCATRACLGMT_CAL);

            EXCEPTION
              WHEN OTHERS THEN
                plog.ERROR('Erreur lors de l''insertion adresse 2.1 dans la table finale','SQLERRM', SQLERRM);
                plog.full_error_backtrace('File_ID',P_FILE_ID);
                plog.full_call_stack('File_ID',P_FILE_ID);
            END;
          END IF;
          BEGIN
            NAT_FF1_TRT_FLX.INS_IPE(R_CUR.IDENTIFIANTIMMEUBLE,
                                  R_CUR.CODERIVOLIIMMEUBLE,
                                  R_CUR.CODEINSEEIMMEUBLE,
                                  TO_NUMBER(replace(R_CUR.CODEPOSTALIMMEUBLE,' ','')),
                                  R_CUR.COMMUNEIMMEUBLE,
                                  R_CUR.CODEADRESSEIMMEUBLE,
                                  R_CUR.TYPEVOIEIMMEUBLE,
                                  R_CUR.NOMVOIEIMMEUBLE,
                                  R_CUR.NUMEROVOIEIMMEUBLE,
                                  R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                  R_CUR.BATIMENTIMMEUBLE,
                                  TO_NUMBER(replace(R_CUR.NOMBRELOGEMENTSINFOPREALABLES,' ','')),
                                  R_CUR.ETATIMMEUBLE,
                                  TO_DATE(R_CUR.DATESIGNATURECONVENTION,'YYYY/MM/DD'),
                                  R_CUR.GESTIONNAIREIMMEUBLE,
                                  TO_NUMBER(replace(R_CUR.CODEPOSTALGESTIONNAIRE,' ','')),
                                  R_CUR.COMMUNEGESTIONNAIRE,
                                  R_CUR.TYPEVOIEGESTIONNAIRE,
                                  R_CUR.NOMVOIEGESTIONNAIRE,
                                  R_CUR.NUMEROVOIEGESTIONNAIRE,
                                  R_CUR.CPLNUMVOIEGESTIONNAIRE,
                                  TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD'),
                                  TO_DATE(R_CUR.DATEDERNIEREMODIFICATION,'YYYY/MM/DD'),
                                  R_CUR.REFERENCEPM,
                                  R_CUR.ETATPM,
                                  TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD'),
                                  R_CUR.CODEVOIERIVOLIPM,
                                  R_CUR.CODEINSEEPM,
                                  TO_NUMBER(replace(R_CUR.CODEPOSTALPM,' ','')),
                                  R_CUR.COMMUNEPM,
                                  R_CUR.CODEADRESSEPM,
                                  R_CUR.TYPEVOIEPM,
                                  R_CUR.NOMVOIEPM,
                                  R_CUR.NUMEROVOIEPM,
                                  R_CUR.COMPLEMENTVOIEPM,
                                  R_CUR.TYPEINGENIERIE,
                                  R_CUR.FIBREDEDIEELIBRE,
                                  TO_NUMBER(replace(R_CUR.NOMBRELOGEMENTSPM,' ','')),
                                  TO_NUMBER(replace(R_CUR.NOMBRECOLONNESMONTANTES,' ','')),
                                  TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD'),
                                  R_CUR.DATE_IMP,
                                  R_CUR.FILE_ID,
                                  0,
                                  R_CUR.SIRETGESTIONNAIRE,
                                  R_CUR.TYPEEMPLACEMENTPM,
                                  R_CUR.COMMENTAIREPM,
                                  TO_NUMBER(replace(R_CUR.CAPACITEMAXPM,' ','')),
                                  R_CUR.BATIMENTPM,
                                  R_CUR.REFERENCECONSULTATIONNATIVE,
                                  P_CODOI,
                                  vImm_id,
                                  \*1,
                                  'A',*\
                                  P_TYPE,
                                  TO_NUMBER(replace(R_CUR.NOMBREPMTECHNIQUES,' ','')),
                                  R_CUR.TYPEIMMEUBLE,
                                  R_CUR.TYPEPROJECTIONGEOGRAPHIQUE,
                                  ROUND(TO_NUMBER(R_CUR.COORDONNEEPMX),5),
                                  ROUND(TO_NUMBER(R_CUR.COORDONNEEPMY),5),
                                  ROUND(TO_NUMBER(R_CUR.COORDONNEEIMMEUBLEX),5),
                                  ROUND(TO_NUMBER(R_CUR.COORDONNEEIMMEUBLEY),5),
                                  NULL,-- R_CUR.REFREGROUPEMENTPM,
                                  R_CUR.EMPLACEMENTACTIFDISPONIBLE,
                                  R_CUR.QUALITEADRESSEPM,
                                  TO_DATE(R_CUR.DATEPREMIEREMADPM,'YYYY/MM/DD'),
                                  R_CUR.ACCORDGESTIONNAIRENECESSAIRE,
                                  TO_NUMBER(replace(R_CUR.TYPEZONE,' ','')),
                                  -- 2.2
                                  TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD'),--p_datmescomimm => :p_datmescomimm,
                                  R_CUR.IMMEUBLENEUF,--p_immeubleneuf => :p_immeubleneuf,
                                  TO_DATE(R_CUR.DATPRVLIVIMMNEUF,'YYYY/MM/DD'),--p_datprvlivimmneuf => :p_datprvlivimmneuf,
                                  R_CUR.BRASSAGEPMOI,--p_brassagepmoi => :p_brassagepmoi,
                                  R_CUR.REFCONSUL,--p_refconsul => :p_refconsul,
                                  R_CUR.CODHEXAVOIE,--p_codhexavoie => :p_codhexavoie,
                                  R_CUR.CODEBAN,--p_codeban => :p_codeban,
                                  R_CUR.CHMPRSV1,--p_chmprsv1 => :p_chmprsv1,
                                  R_CUR.CHMPRSV2,--p_chmprsv2 => :p_chmprsv2,
                                  R_CUR.CHMPRSV3,--p_chmprsv3 => :p_chmprsv3,
                                  TO_DATE(R_CUR.DATDEBACPTCMDACSS,'YYYY/MM/DD'),--p_datdebacptcmdacss => :p_datdebacptcmdacss,
                                  TO_DATE(R_CUR.DATDEBFOURCRCMDACSS,'YYYY/MM/DD'),--p_datdebfourcrcmdacss => :p_datdebfourcrcmdacss
                                  -- 3.0
                                  NULL, -- P_CODEOI_IPE                      IN IPE.CODEOI_IPE%TYPE,
                                  NULL, -- P_REFPRDM                         IN IPE.REFPRDM%TYPE,
                                  NULL, -- P_REFLIENPMPRDM                   IN IPE.REFLIENPMPRDM%TYPE,
                                  NULL, -- P_LONGLGNIMM                      IN IPE.LONGLGNIMM%TYPE,
                                  NULL, -- P_REFPBO                          IN IPE.REFPBO%TYPE,
                                  NULL, -- P_DATMADPBO                       IN IPE.DATMADPBO%TYPE,
                                  NULL, -- P_NBLOGMTPBO                      IN IPE.NBLOGMTPBO%TYPE,
                                  NULL, -- P_NBLOGMTMADPM                    IN IPE.NBLOGMTMADPM%TYPE,
                                  NULL, -- P_CHMPRSV4                        IN IPE.CHMPRSV4%TYPE,
                                  NULL, -- P_CHMPRSV5                        IN IPE.CHMPRSV5%TYPE,
                                  NULL, -- P_SUSRACDMD                       IN IPE.SUSRACDMD%TYPE,
                                  NULL, -- P_TYPPBO                          IN IPE.TYPPBO%TYPE,
                                  NULL, -- P_TYPRACCOPBPTO                   IN IPE.TYPRACCOPBPTO%TYPE  ,
                                  NULL -- P_CONDSYNDIC                      IN IPE.CONDSYNDIC%TYPE
                                  );

            IF R_CUR.REFERENCEPM IS NOT NULL THEN
              IF vPmEcours <> R_CUR.REFERENCEPM THEN
                BEGIN
                  IF vPmEcours IS NOT NULL THEN
                    NAT_FF1_TRT_FLX.TRT_IPE(vPmEcours);

                    -- cloture des alertes PM supprimé
                    NAT_FF1_CR_MAD_PM.CLS_ALRT_PM_SUPPR_IPE(vPmEcours);
                    -- controles FEP
                    IF R_PRJPM.PART_ADD = 'BTL' THEN
                      NAT_FF1_CTRL_FEP.CTRL_ABS_CRMAD_OK(R_PRJPM.IDPM);
                      NAT_FF1_CTRL_FEP.CTRL_ABS_PLN_MAD(R_PRJPM.IDPM);
                      NAT_FF1_CTRL_FEP.CTRL_ABS_INFO_SYN(R_PRJPM.IDPM);
                    END IF;
                  END IF;
                EXCEPTION
                  WHEN OTHERS THEN
                     plog.ERROR('Erreur lors du traitement FF de l''IPE','SQLERRM', SQLERRM);
                     plog.full_error_backtrace('File_ID',P_FILE_ID);
                     plog.full_call_stack('File_ID',P_FILE_ID);
                END;
                vPmEcours := R_CUR.REFERENCEPM;

                OPEN C_GET_PM_ETAT(vPmEcours);
                FETCH C_GET_PM_ETAT INTO R_GET_PM_ETAT;
                vFoundPmEtat := C_GET_PM_ETAT%FOUND;
                CLOSE C_GET_PM_ETAT;

                \*IF ( vPartFlx = 'FTEL' AND R_CUR.ETATPM IN ('DEPLOYE','EN COURS DE DEPLOIEMENT') OR
                     vPartFlx = 'COVA' AND R_CUR.ETATPM IN ('DEPLOYE','EN COURS DE DEPLOIEMENT') OR
                     vPartFlx NOT IN ('FTEL','COVA') AND R_CUR.ETATPM = 'DEPLOYE' ) THEN*\
                IF vFoundPmEtat THEN
                  IF P_TYPE =  'ZTD' THEN
                    vREF_CNSLT := R_CUR.REFERENCECONSULTATIONNATIVE;

                    BEGIN
                      -- contrôles alertes OI
                      NAT_FF1_CR_MAD_PM.CTRL_ALL_ALRT_SUIVI_CR_MAD(vPmEcours, P_CODOI);
                      -- contrôle création projet
                      NAT_FF1_CR_MAD_PM.CTRL_PRM_PM_SS_PRJ(vPmEcours);
                    EXCEPTION
                      WHEN OTHERS THEN
                        plog.ERROR('Echec contrôle CR MAD dans l''IPE 2.1','SQLERRM', SQLERRM);
                    END;

                  ELSE
                    IF P_CODOI IN ('FTEL', 'SFRA','SFMD','SFOR') THEN
                      vREF_CNSLT := SUBSTR(R_CUR.REFCONSUL,0,12);
                    ELSE
                      vREF_CNSLT := R_CUR.REFERENCECONSULTATIONNATIVE;
                    END IF;
                  END IF;

                  IF vREF_CNSLT IS NULL AND  R_CUR.DATEINSTALLATIONPM IS NULL THEN
                    vRunCmd := 0;
                  ELSE
                    vAdresse := R_CUR.NUMEROVOIEPM || ' ' || R_CUR.TYPEVOIEPM || ' '
                                  || R_CUR.NOMVOIEPM || ' ' || R_CUR.CODEPOSTALPM || ' ' || R_CUR.COMMUNEPM;
                    vRunCmd := 1;
                  END IF;

                ELSE
                  vRunCmd := 0;
                  BEGIN
                    -- cloture des alertes OI
                    NAT_FF1_CR_MAD_PM.CLS_ALRT_CR_MAD(vPmEcours);
                  EXCEPTION
                    WHEN OTHERS THEN
                      plog.ERROR('Echec contrôle CR MAD dans l''IPE 2.1','SQLERRM', SQLERRM);
                  END;
                END IF;
              ELSE
                vRunCmd := 0;
              END IF;
            ELSE
              vRunCmd := 0;
            END IF;

            IF vRunCmd = 1 THEN
              APP_FF1_SCP.RUN_CMD_FROM_IPE_V2(P_COD_OI             => P_CODOI,
                                              P_TYPE               => P_TYPE,
                                              P_REF_CNSLT          => vREF_CNSLT,
                                              P_COD_INSEE          => R_CUR.CODEINSEEPM,
                                              P_DATEINSTALLATIONPM => TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD'),
                                              P_REFERENCEPM        => R_CUR.REFERENCEPM,
                                              P_ADR_SIG            => vAdresse);


            END IF;
          EXCEPTION
            WHEN OTHERS THEN
              plog.ERROR('Erreur lors de l''insertion IPE 2.2 dans la table finale','SQLERRM', SQLERRM);
              plog.full_error_backtrace('File_ID',P_FILE_ID);
              plog.full_call_stack('File_ID',P_FILE_ID);
          END;

        END IF;
      END IF;
      -- Nettoyage
      DELETE FROM ADR_IMM_OI a
        WHERE a.IDENTIFIANTIMMEUBLE = r_cur.identifiantimmeuble
          and a.SRCADR              = 'MAD';
      IF (v_compt = 1000) THEN
        COMMIT;
        v_compt := 0;
      END IF;
      vNBLGNTRT := vNBLGNTRT + 1;
    END LOOP;
    CLOSE V_CUR;
    COMMIT;

    BEGIN
      IF vPmEcours IS NOT NULL THEN
        NAT_FF1_TRT_FLX.TRT_IPE(vPmEcours);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors du traitement FF de l''IPE','SQLERRM', SQLERRM);
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;
    plog.info('POST TRAITEMENT IPE : Fin itération IPE : '||vNBLGNTRT ,
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

    plog.info('POST TRAITEMENT IPE : Début Contrôle Demande d''info',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    -- Demandes d'information
    -- Controle s'il y a une demande sur un PM qui est passé à abandonné
    NAT_FF1_DMD_INFO.CTRL_PM_ABN_OI(P_CODOI);
    -- Controle sur une demande d'information absente de l'IPE
    NAT_FF1_DMD_INFO.CTRL_PM_ABS_IPE(P_CODOI);
    -- Contrôle sur l'alerte PM absent
    NAT_FF1_CTRL_IPE.CTRL_ALL_ALRT_PM_ABS;
    plog.info('POST TRAITEMENT IPE : Fin Contrôle Demande d''info',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    -- Gestion des immeubles supprimés
    plog.info('POST TRAITEMENT IPE : Début Gestion des immeubles supprimés',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    NAT_FF1_TRT_FLX.SET_IMM_DEL_OI(P_CODOI, P_FILE_ID, P_TYPE);
    plog.info('POST TRAITEMENT IPE : Fin Gestion des immeubles supprimés',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    -- Lancement du blacklistage
    plog.info('POST TRAITEMENT IPE : Début blacklistage',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    NAT_FF1_ADR.RUN_BLK_ALL(P_CODOI);
    plog.info('POST TRAITEMENT IPE : Fin blacklistage',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

     plog.info('POST TRAITEMENT IPE : Début historisation',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     NAT_FF1_CTRL_IPE.NEW_IPE_RECORDS_HIS(P_CODOI,vProtocol,vNB_REC,SYSDATE,P_FILE_ID);
     plog.info('POST TRAITEMENT IPE : Fin historisation',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    BEGIN
      CASE P_CODOI
        WHEN 'FTEL' THEN
          vNomIfcOut := 'FTTH_SIG_IPE_OUT_FT';
        WHEN 'SFRA' THEN
          vNomIfcOut := 'FTTH_SIG_HBIPE_OUT_SFR';
        WHEN 'SFMD' THEN
          vNomIfcOut := 'FTTH_SIG_HBIPE_OUT_SFR';
        WHEN 'NUME' THEN
          vNomIfcOut := 'FTTH_SIG_IPE_OUT_NC';
        WHEN 'FREE' THEN
          vNomIfcOut := 'FTTH_SIG_IPE_OUT_FREE';
        ELSE
          vNomIfcOut := 'FTTH_SIG_IPE_OUT_SEQ';
      END CASE;
      plog.info('POST TRAITEMENT IPE : Début génération et envoie fichier',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      CMN_IFC.GENERER_PREPARATION(P_ID_PREPARATION => vId_Preparation);

      CMN_IFC.ADD_FILE_PREPARATION(P_ID_PREPARATION => vId_Preparation,
                                   P_FILE_ID_SRC    => P_FILE_ID,
                                   P_INTERFACE      => NULL,
                                   P_NOM_FIC        => R_INFO_FIC.NOM_FIC,
                                   P_EMETTEUR       => 'REBOND',
                                   P_FILE_ID        => v_Fileio_OUT);

       NAT_IFC_TRT.UPDATE_LIBVAL2('NOM_FIC_OUT',R_INFO_FIC.NOM_FIC,P_FILE_ID);
       NAT_IFC_TRT.SET_FILE_ID_SRC(v_Fileio_OUT,P_FILE_ID);
       cmn_ifc.generer_interface(vNomIfcOut,
                                 1,
                                 NULL,
                                 vId_Preparation);
       plog.info('POST TRAITEMENT IPE : Fin génération et envoie fichier',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors du rebond IPE 2.2 vers le SIG','SQLERRM', SQLERRM);
     END;

     plog.info('POST TRAITEMENT IPE : Début supervision',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     NAT_FTTH_OI.POS_TRT_SPVION_IPE(P_FILE_ID      => P_FILE_ID,
                                    P_TYPZON       => P_TYPE,
                                    P_CODOI        => P_CODOI,
                                    P_NBLGNIPE     => vNBLGNIPE,
                                    P_NBLGNTRT     => vNBLGNTRT);
     plog.info('POST TRAITEMENT IPE : Fin supervision',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  ELSE
     plog.info('POST TRAITEMENT IPE : Début envoie mail rejet',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     NAT_FF1_CTRL_IPE.SEND_MAIL_REJET_IPE(P_CODOI,P_TYPE,P_FILE_ID);
     plog.info('POST TRAITEMENT IPE : Fin envoie mail rejet',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

     UPDATE SPVION_IPE
        SET NOK_TO_GEN_ELIG = 4
      WHERE FILE_ID         = P_FILE_ID;
     NAT_FTTH_OI.SEND_MAIL_REPORT_IPE(P_COD_OI  => P_CODOI,
                                     P_TYPZON  => P_TYPE,
                                     P_FILE_ID => P_FILE_ID);
  END IF;

END;*/


------------------------------------------------------------------------------------
-- Traitement IPE 3.0
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_IPE_V30(P_CODOI         IN REF_OI.COD_OI%TYPE,
                          P_TYPE          IN VARCHAR2,
                          P_FILE_ID       IN FILE_IO.FILE_ID%TYPE,
                          P_COD_PART_FLUX IN PART_FLX.COD_PART_FLUX%TYPE DEFAULT NULL) IS
-- Les informations du fichier
CURSOR C_INFO_FIC IS
  SELECT fio.NOM_FIC,
         fio.REP_FIC,
         fio.EMETTEUR
    FROM FILE_IO fio
   WHERE fio.FILE_ID = P_FILE_ID;
R_INFO_FIC C_INFO_FIC%ROWTYPE;

CURSOR C_PRJPM (vRefPM IPE.REFERENCEPM%TYPE) IS
  SELECT prj.PRJPM_ID,
         prj.PART_ADD,
         pm.IDPM
    FROM ETAPRJPM eta,
         PRJPM prj,
         PM    pm
   WHERE pm.IDPM         = vRefPM
     AND prj.GEO_ID      = pm.GEO_ID
     AND eta.ETAPRJPM_ID = prj.ETAPRJPM_ID
     AND eta.ETAPRJPM    <> 'ABN';
R_PRJPM   C_PRJPM%ROWTYPE;
vFoundPrj BOOLEAN;



CURSOR C_PMOFSFOR (vRefPM IPE.REFERENCEPM%TYPE) IS
  SELECT 1
    FROM LST_PM_OF_TO_SFOR lstp
   WHERE lstp.IDPM = vRefPM ;
R_PMOFSFOR   C_PMOFSFOR%ROWTYPE;
vFoundPMOFSFOR BOOLEAN;


V_CUR       SYS_REFCURSOR;
R_CUR       IPE_FT_ZTD_V30_TMP%ROWTYPE;

V_CUR_NB     SYS_REFCURSOR;
V_CUR_NB_DPL SYS_REFCURSOR;
V_CUR_NB_DOUBLON_IMB  SYS_REFCURSOR;


vtableName  VARCHAR2(100);
vNB_REC     NUMBER;
vNB_REC_DPL NUMBER;
vCtrlNbRec  NUMBER;
vCtrlAllTol NUMBER;
vControleOC NUMBER;
vImm_id     NUMBER;
vAdr_Imm_Oi_Id      NUMBER;
vIS_NEW_FOR_OI_ONLY NUMBER;
vIS_MAJ_OSS         NUMBER;
vNomIfcOut          VARCHAR2(100);
vId_Preparation     NUMBER;
v_Fileio_OUT        NUMBER;
vProtocol           VARCHAR2(5);
vCtrlAdr            NUMBER;
vCtrlAdrItg         NUMBER;
vCtrlAdrItg_za      NUMBER;
vCtrlAdr_za         NUMBER;
v_compt             NUMBER;
vHexacle            HEXA_BTL.HEXABTL%TYPE;
vDatMajHexaBytel    DATE;
vHexaExistingAdrBlk ADR_IMM_OI.CODEADRESSEIMMEUBLE%TYPE;
vNB_DOUBLON_IMB     NUMBER;

-----------------------------------------
-- les variables pour synthèse traitement
vNBLGNIPE NUMBER;
vNBLGNTRT NUMBER;
-----------------------------------------
CURSOR C_VERIF_BLK(P_IDENTIFIANTIMMEUBLE ADR_BLK.IDENTIFIANTIMMEUBLE%TYPE,vCodOI REF_OI.COD_OI%TYPE) IS
  SELECT 1
    FROM ADR_BLK a
   WHERE a.IDENTIFIANTIMMEUBLE   = P_IDENTIFIANTIMMEUBLE
     AND a.BLK_VALID = 1
     AND a.CODOI     = vCodOI;
R_VERIF_BLK C_VERIF_BLK%ROWTYPE;
vFoundBlk   BOOLEAN;
vBlk        VARCHAR2(3);
--------------------------------------------------
-- récupération de la table temporaire
CURSOR C_GET_TMP IS
  SELECT (CASE P_TYPE
            WHEN 'ZTD' THEN
              flx.IPE_ZTD_TMP
            WHEN 'ZSP' THEN
              flx.IPE_ZSP_TMP
            ELSE
              flx.IPE_ZMD_TMP
         END) AS IPE_TMP,
         flx.COD_PART_FLUX,
         DECODE(flx.COD_PART_FLUX, 'ZTD', 'OF_',
                                   'ZMD', 'AMI',
                                   'ZSP', 'AMI',
                                   'AXIO', 'RIP',
                                   'ALTI', 'ALT',
                                   'COVA', 'COV',
                                   'TDF', 'TDF',
                                   NAT_FTTH_OI.P_OC_SIEA, NAT_FTTH_OI.P_CODOC_SIEA,
                                   'SFRA', DECODE(roi.RIP, 1, 'RSF', 'ZAS'),
                                   flx.COD_PART_FLUX) AS PART_ADD_PRJ
    FROM PART_FLX   flx,
         REF_OI_PRM rop,
         REF_OI     roi
   WHERE roi.COD_OI = P_CODOI
     AND rop.COD_OI = roi.COD_OI
     AND rop.PRTCL  = '3.0'
     AND rop.OBS    = 0
     AND flx.COD_PART_FLUX = rop.COD_PART_FLUX;
R_GET_TMP C_GET_TMP%ROWTYPE;
vFoundTmp BOOLEAN;
vPartFlx  PART_FLX.COD_PART_FLUX%TYPE;
vPartAddPrj PRJPM.PART_ADD%TYPE;

CURSOR C_GET_PART_FLUX IS
  SELECT (CASE r.COD_PART_FLUX
            WHEN 'FTEL' THEN
               CASE WHEN r.Cod_Oi = 'FTEL' THEN
                    'AMI'
               ELSE 'OFC' END
            WHEN 'AXIO' THEN
              'RIP'
            WHEN 'ALTI' THEN
              'ALT'
            WHEN 'COVA' THEN
              'COV'
            WHEN 'TDF' THEN
              'TDF'
            WHEN 'SFRA' THEN
              CASE
                WHEN roi.RIP = 1 THEN
                  'RSF'
                WHEN r.Cod_Oi = 'SFOR' THEN
                  'AMI'
                ELSE 'ZAS'
              END
            WHEN NAT_FTTH_OI.P_OC_SIEA THEN
              NAT_FTTH_OI.P_CODOC_SIEA
          END)  AS COD_PART_ADDU
    FROM REF_OI roi,
         REF_OI_PRM r
   WHERE r.COD_OI = P_CODOI
     AND r.OBS  = 0
     AND roi.COD_OI = r.COD_OI
     AND ROWNUM = 1;
  R_GET_PART_FLUX C_GET_PART_FLUX%ROWTYPE;

----------------------------------------------------
-- récupération du PM si son état fait partie des états
-- sélectionnés pour le lancement de la commande unitaire
CURSOR C_GET_PM_ETAT (pPmId VARCHAR2) IS
  SELECT DISTINCT i.REFERENCEPM
    FROM IPE i
   WHERE i.REFERENCEPM = pPmId
     AND i.ETATPM IN (SELECT val.LIBVAL
                        FROM REF_OI_CMD_PRM prm_oi,
                             BDMVAL         val
                       WHERE prm_oi.ETAPM_IPE = val.CODVAL
                         AND val.LSTVAL_ID = 'ETAIPE'
                         AND prm_oi.COD_OI = i.CODOI
                         AND prm_oi.ACTIF = 1);
R_GET_PM_ETAT C_GET_PM_ETAT%ROWTYPE;
vFoundPmEtat  BOOLEAN;

vMajOss NUMBER;

vRunCmd NUMBER(1);
vPmEcours IPE.REFERENCEPM%TYPE;
vREF_CNSLT SOUSCRIPTION.REF_CNSLT%TYPE;
vAdresse   PM_CMD.ADR_SIG%TYPE;
vCATRACLGMT_CAL     ADR_IMM_OI.CATRACLGMT_CAL%TYPE;

CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID,
         f.NOM_FIC
    FROM FILE_IO f
   WHERE f.FILE_ID = P_FILE_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
vFromZsp NUMBER(1);

CURSOR C_IS_ZSP_ZTD(vCODEINSEEPM LST_CMN_ZTD_ZSP.CODE_INSEE%TYPE) IS
  SELECT 1
    FROM LST_CMN_ZTD_ZSP
   WHERE CODE_INSEE = vCODEINSEEPM;
R_IS_ZSP_ZTD C_IS_ZSP_ZTD%ROWTYPE;
vFoundZspZtD BOOLEAN;
vType        VARCHAR2(3);
CURSOR C_VERIF_REFCONSUL_14(vRefConsul VARCHAR2) IS
SELECT 1
  FROM DUAL
 WHERE REGEXP_LIKE(UPPER(vRefConsul),UPPER('*.*S-*.*'));
R_VERIF_REFCONSUL_14 C_VERIF_REFCONSUL_14%ROWTYPE;
vFoundRefconsul14 BOOLEAN;

vCodOI REF_OI.COD_OI%TYPE;
v_score_dep_imb NUMBER;
v_score_dep_pm NUMBER;
v_score_blk NUMBER;
v_score NUMBER;
vMotif  ADR_BLK.MTFBLK%TYPE;


BEGIN
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  BEGIN
    DELETE FROM FIC_FTTH WHERE FILE_ID = P_FILE_ID;
    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => NULL,
                         P_CODOI    => P_CODOI,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
     COMMIT;
   EXCEPTION
     WHEN OTHERS THEN
     plog.info('POST TRAITEMENT IPE : Erreur FIC_FTTH',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
   END;
  v_compt := 0;
  vRunCmd := 0;
  vPmEcours := 'INIT';

  -- Récupération de la table temporaire
  OPEN C_GET_TMP;
  FETCH C_GET_TMP INTO R_GET_TMP;
  vFoundTmp := C_GET_TMP%FOUND;
  CLOSE C_GET_TMP;

  IF vFoundTmp THEN
    vtableName :=  R_GET_TMP.IPE_TMP;
    vPartFlx   :=  R_GET_TMP.COD_PART_FLUX;
  END IF;

  IF vPartFlx IS NOT NULL THEN
    CASE vPartFlx
      -- Transfert du fichier
      WHEN 'FTEL' THEN
        GEN_REBOND( 'FTTH_SIO2_FT_IPE_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,NULL);
      WHEN 'SFRA' THEN
        GEN_REBOND( 'FTTH_SIO2_SFR_IPE_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,NULL);
      WHEN 'AXIO' THEN
        GEN_REBOND( 'FTTH_SIO2_AXNE_IPE_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,NULL);
      WHEN 'FREE' THEN
        GEN_REBOND( 'FTTH_SIO2_FREE_IPE_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,NULL);
      WHEN 'COVA' THEN
        GEN_REBOND( 'FTTH_SIO2_COVA_IPE_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,NULL);
      WHEN 'ALTI' THEN
        GEN_REBOND( 'FTTH_SIO2_ALTI_IPE_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,NULL);
      WHEN 'TDF' THEN
        GEN_REBOND( 'FTTH_SIO2_TDF_IPE_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,NULL);
      WHEN NAT_FTTH_OI.P_CODOI_SIMPSON THEN
        GEN_REBOND( 'FTTH_SIO2_SMP_IPE_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,NULL);
      WHEN NAT_FTTH_OI.P_OC_SIEA THEN
        GEN_REBOND( 'FTTH_SIO2_SIEA_IPE_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,NULL);
      END CASE;
  END IF;

  CASE P_TYPE
    WHEN 'ZTD' THEN
      vProtocol := '3.0';
      vFromZsp  := 0;
      vType     := 'ZTD';
    WHEN 'ZSP' THEN
      vProtocol := 'ZSP';
      vFromZsp  := 1;
      vType     := 'ZSP';
    ELSE
      vProtocol := 'ZMD';
      vFromZsp  := 0;
      vType     := 'ZMD';
  END CASE;

  V_CUR_NB := NAT_FTTH_OI.GET_FTTH_NB_REC(vtableName);
  LOOP
    FETCH V_CUR_NB INTO vNB_REC;
    EXIT WHEN V_CUR_NB%NOTFOUND;
  END LOOP;
  -- On récupère le nombre de lignes DEPLOYE
  V_CUR_NB_DPL := NAT_FTTH_OI.GET_FTTH_NB_REC_DPL(vtableName);
  LOOP
    FETCH V_CUR_NB_DPL INTO vNB_REC_DPL;
    EXIT WHEN V_CUR_NB_DPL%NOTFOUND;
  END LOOP;

  -- On récupère le nombre de doublon IMB
  V_CUR_NB_DOUBLON_IMB := NAT_FTTH_OI.GET_FTTH_NB_IMB_EN_DOUBLON(vtableName);
  LOOP
    FETCH V_CUR_NB_DOUBLON_IMB INTO vNB_DOUBLON_IMB;
    EXIT WHEN V_CUR_NB_DOUBLON_IMB%NOTFOUND;
  END LOOP;

  plog.info('POST TRAITEMENT IPE : Calcul nombre des IMB en doublon du fichier',
                     'FILEID', P_FILE_ID,
                     'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'),
                     'Nombre des IMB en doublons dans le fichier', vNB_DOUBLON_IMB);

  -- Controle IPE
  -- contrôle du nombre de lignes du nouveau fichier vs la base
  IF P_TYPE = 'ZSP' THEN
    vCtrlNbRec := 1;
    plog.info('POST TRAITEMENT IPE : Pas de Contrôle nombre de lignes DEPLOYE du fichier',
                   'FILEID', P_FILE_ID,
                   'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'),
                   'Résultat', 'OK');
  ELSE
    plog.info('POST TRAITEMENT IPE : Début Contrôle nombre de lignes DEPLOYE du fichier',
                     'FILEID', P_FILE_ID,
                     'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'),
                     'Nombre de lignes DEPLOYE dans le fichier', vNB_REC_DPL);
    vCtrlNbRec := NAT_FF1_CTRL_IPE.CTRL_NB_RECORDS_IPE (P_CODOI,
                                                        vProtocol,
                                                        vNB_REC_DPL,
                                                        P_FILE_ID);
    plog.info('POST TRAITEMENT IPE : Fin Contrôle nombre de lignes DEPLOYE du fichier',
                     'FILEID', P_FILE_ID,
                     'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'),
                     'Résultat', (CASE WHEN vCtrlNbRec=1
                                       THEN 'OK'
                                       ELSE 'NOK'
                                  END));
  END IF;
  vNBLGNIPE := vNB_REC;
  vNBLGNTRT := 0;
  -- contrôle tolérence sur :
    -- Code Adresse Immeuble
    -- Code Insee
    -- Code Rivoli
    -- Num Voie
    -- Ecart Date Mes/EtatPM
  plog.info('POST TRAITEMENT IPE : Début Contrôle tolérance',
                   'FILEID', P_FILE_ID,
                   'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

  vCtrlAllTol := NAT_FF1_CTRL_IPE.CTRL_ALL_TOLERANCE(P_CODOI,
                                                     P_TYPE,
                                                     P_FILE_ID,
                                                     '3.0',
                                                     vNB_REC_DPL
                                                     );

  plog.info('POST TRAITEMENT IPE : Fin Contrôle tolérance',
                   'FILEID', P_FILE_ID,
                   'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'),
                   'Résultat', (CASE WHEN vCtrlAllTol=1
                                     THEN 'OK'
                                     ELSE 'NOK'
                                END));


  IF vCtrlNbRec = 1 AND vCtrlAllTol = 1 THEN
      plog.info('POST TRAITEMENT IPE : Début Suppression IPE IDPM NULL',
                     'FILEID', P_FILE_ID,
                     'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    CASE P_TYPE
      WHEN 'ZSP' THEN
        DELETE FROM IPE i
         WHERE i.CODOI    = NAT_FTTH_OI.P_CODOI_SIMPSON
           AND i.FROM_ZSP = 1
           AND i.REFERENCEPM IS NULL;
      ELSE
        DELETE FROM IPE i
         WHERE i.CODOI  = P_CODOI
           AND i.TYPZON = P_TYPE
           AND i.FORCED <> 1
           AND (i.FROM_ZSP IS NULL OR i.FROM_ZSP = 0)
           AND i.REFERENCEPM IS NULL;
     END CASE;
     plog.info('POST TRAITEMENT IPE : Fin Suppression IPE IDPM NULL',
                     'FILEID', P_FILE_ID,
                     'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

      OPEN C_INFO_FIC;
      FETCH C_INFO_FIC INTO R_INFO_FIC;
      CLOSE C_INFO_FIC;

      -- Récupérer le partenaire
      OPEN C_GET_PART_FLUX;
      FETCH C_GET_PART_FLUX INTO R_GET_PART_FLUX;
      CLOSE C_GET_PART_FLUX;

      V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(vtableName);
      plog.info('POST TRAITEMENT IPE : Début itération IPE',
                       'FILEID', P_FILE_ID,
                       'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    LOOP
      FETCH V_CUR INTO R_CUR;
      EXIT WHEN V_CUR%NOTFOUND;
      BEGIN
      ----- Vérif dans le cas ZSP
      IF P_TYPE = 'ZSP' THEN
        OPEN C_IS_ZSP_ZTD(R_CUR.CODEINSEEPM);
        FETCH C_IS_ZSP_ZTD INTO R_IS_ZSP_ZTD;
        vFoundZspZtD := C_IS_ZSP_ZTD%FOUND;
        CLOSE C_IS_ZSP_ZTD;

        IF vFoundZspZtD THEN
          vType := 'ZTD';
        ELSE
          vType := 'ZMD';
        END IF;
      ELSE
        vType := P_TYPE;
      END IF;

      vCodOI := P_CODOI;


      -- Vérification hexacle et remplacement
      --> l'hexa de l'IPE doit être null
      --> Sur un immeuble déployé
      --> dont le code insee du PM est dans le module souscription
      IF R_CUR.CODEADRESSEIMMEUBLE IS NULL AND
         R_CUR.IDENTIFIANTIMMEUBLE IS NOT NULL AND
         R_CUR.CODEINSEEIMMEUBLE   IS NOT NULL THEN
        vHexacle := APP_FF1_ADR.GET_HEXA_CLE_BYTEL(P_NUMEROVOIEIMMEUBLE     => R_CUR.NUMEROVOIEIMMEUBLE,
                                                   P_COMPLEMENTVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                   P_TYPEVOIEIMMEUBLE       => R_CUR.TYPEVOIEIMMEUBLE,
                                                   P_NOMVOIEIMMEUBLE        => R_CUR.NOMVOIEIMMEUBLE,
                                                   P_CODEINSEEIMMEUBLE      => R_CUR.CODEINSEEIMMEUBLE,
                                                   P_CODERIVOLIIMMEUBLE     => R_CUR.CODERIVOLIIMMEUBLE);
        vDatMajHexaBytel := sysdate;
      ELSE
        vHexacle := R_CUR.CODEADRESSEIMMEUBLE;
        vDatMajHexaBytel := NULL;
      END IF;

      v_compt := v_compt + 1;
      IF R_CUR.REFERENCEPM IS NOT NULL THEN
        IF vPmEcours <> R_CUR.REFERENCEPM THEN
          -- Nettoyage de la table IPE pour le PM Concerné
          DELETE FROM IPE i
           WHERE i.CODOI       = vCodOI
             AND i.TYPZON      = vTYPE
             AND i.REFERENCEPM = R_CUR.REFERENCEPM;
          -- Alerte 2
            --> Si l'étatPM = DEPLOYE dans l'IPE et etat PM dans la base adresse = EN COURS DE DEPLOIEMENT, alors alerte
            --> Dans le module CR MAD
            --> Cloture de l'alerte à la réception du  CR MAD associé
         NAT_FF1_CR_MAD_PM.CTRL_CRMAD_ETAPM (R_CUR.REFERENCEPM,
                                             R_CUR.ETATPM);
          --  Alerte 3
            --> Si l'étatPM = EN COURS DE DEPLOIEMENT dans l'IPE et DEPLOYE dans la base adresse, alors alerte
            --> Dans le module CR MAD
            --> Cloture à la réception d'un nouvel IPE avec l'état du PM à DEPLOYE
         NAT_FF1_CR_MAD_PM.CTRL_CRMAD_ETAPM_NDPL(R_CUR.REFERENCEPM,
                                                 R_CUR.ETATPM);
        END IF;
      END IF;

      -- L'adresse peut-elle être intégrée ?
      vCtrlAdrItg := NAT_FF1_CTRL_ADR.CTRL_ITG_ADR(vHexacle,
                                                   R_CUR.CODEINSEEIMMEUBLE,
                                                   R_CUR.IDENTIFIANTIMMEUBLE);
      --Tous les controles des alertes
      vCtrlAdr := 0;
      IF (vCtrlAdrItg = 1) THEN
        -- Taille code adresse (intégré ? fermé manuellement)
        -- Format code adresse (Sauf SFR, fermé manuellement)
        -- Etat Immeuble
        -- Coherence etat immeuble
        -- nombre de logements PM (doit etre intégré)
       -- Nouveaux contrôles :
       -- 6 Si le PM est à l'état déployé dans l'IPE
          -- si l'adresse associée est à l'état déployé, alors on vérifie sa présence dans le réf adresses à l'état déployé
          --> Par contre c'est une alerte non bloquante dans le module adresse
       -- 7 Si le PM de l'adresse n'est pas à l'état déployé dans l'IPE reçu,
          -- alors on vérifie que l'état de l'adresse n'est pas à l'état déployé dans l'IPE reçu
               --> Sinon alerte non bloquante dans le module adresse
        vCtrlAdr := NAT_FF1_CTRL_ADR.CTRL_ALL_ADRESSE(vCodOI,
                                                      R_CUR.REFERENCEPM,
                                                      vHexacle,
                                                      R_CUR.CODEINSEEIMMEUBLE,
                                                      R_CUR.CODERIVOLIIMMEUBLE,
                                                      R_CUR.ETATIMMEUBLE,
                                                      R_CUR.ETATPM,
                                                      R_CUR.NOMBRELOGEMENTSPM,
                                                      R_CUR.NUMEROVOIEIMMEUBLE,
                                                      R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                      R_CUR.IDENTIFIANTIMMEUBLE,
                                                      R_CUR.BATIMENTIMMEUBLE);

        IF R_CUR.REFERENCEPM IS NOT NULL THEN
          IF vPmEcours <> R_CUR.REFERENCEPM THEN --> Si on traite le PM la première fois
            OPEN C_PRJPM(R_CUR.REFERENCEPM);
            FETCH C_PRJPM INTO R_PRJPM;
            vFoundPrj := C_PRJPM%FOUND;
            CLOSE C_PRJPM;

            IF vFoundPrj THEN
              IF vType = 'ZTD' THEN
                CASE R_PRJPM.PART_ADD
                  WHEN 'SFR' THEN
                    vControleOC := NAT_FF1_CTRL.CTRL_IPE_DATE_OC(R_PRJPM.PRJPM_ID ,R_CUR.REFERENCEPM, '2.1');
                  WHEN 'OF_' THEN
                    vControleOC := NAT_FF1_CTRL_OF.CTRL_OC_DATE_OC(R_PRJPM.PRJPM_ID ,R_CUR.REFERENCEPM, '2.1');
                  WHEN 'SEQ' THEN
                    vControleOC := NAT_FF1_CTRL_SEQ.CTRL_OC_DATE_OC(R_PRJPM.PRJPM_ID ,R_CUR.REFERENCEPM, '2.1');
                  ELSE vControleOC := 1;
                END CASE;
              ELSE
                vControleOC := 1;
              END IF;
            ELSE
              vControleOC := 1;
              --IF vType = 'ZMD' AND vCodOI = 'FTEL' AND P_COD_PART_FLUX IN ('FTEL',NAT_FTTH_OI.P_CODOI_SIMPSON) THEN
                -- Pas de projet, en ZMD : on essaye de le créer
                --NAT_FF1_ZA.NEW_PRJPM_ZA(R_CUR.REFERENCEPM,'AMI');
              IF vType = 'ZMD' AND vCodOI = 'SFOR' AND P_COD_PART_FLUX = 'SFRA' THEN
                -- Pas de projet, en ZMD : on essaye de le créer
                OPEN C_PMOFSFOR(R_CUR.REFERENCEPM);
                FETCH C_PMOFSFOR INTO R_PMOFSFOR;
                vFoundPMOFSFOR := C_PMOFSFOR%FOUND;
                CLOSE C_PMOFSFOR;

                IF  vFoundPMOFSFOR THEN
                  -- PM existe dans la table LST_PM_OF_TO_SFOR
                  NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,'AMI');
                ELSE
                  NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,'ZSF');
                END IF;
              ELSIF vType = 'ZMD' AND vCodOI = NAT_FTTH_OI.P_CODOI_SIMPSON AND P_COD_PART_FLUX = NAT_FTTH_OI.P_CODOI_SIMPSON THEN
                -- Pas de projet, en ZMD : on essaye de le créer
                NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,NAT_FTTH_OI.P_CODOC_SIMPSON);
              ELSIF vType = 'ZMD' AND P_CODOI <> 'FTEL' AND P_COD_PART_FLUX = 'FTEL' THEN
                -- Pas de projet, en ZMD : on essaye de le créer
                NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,'OFC');
              ELSIF vType = 'ZMD' AND P_COD_PART_FLUX = 'AXIO'  THEN
                -- Pas de projet, en RIP : on essaye de le créer
                NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,'RIP');
              ELSIF vType = 'ZMD' AND P_COD_PART_FLUX = 'ALTI'  THEN
                -- Pas de projet, en RIP ALTITUDE : on essaye de le créer
                NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,'ALT');
              ELSIF vType = 'ZMD' AND P_COD_PART_FLUX = 'COVA'  THEN
                -- Pas de projet, en RIP ALTITUDE : on essaye de le créer
                NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,'COV');
              ELSIF vType = 'ZMD' AND P_COD_PART_FLUX = 'TDF'  THEN
                -- Pas de projet, en RIP : on essaye de le créer
                NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,'TDF');
              ELSIF vType = 'ZMD' AND vCodOI = 'SFMD'  AND P_COD_PART_FLUX = 'SFRA' THEN
                --  On essaye de créer un projet ZSF
                NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,'ZSF');
              ELSIF vType = 'ZMD' AND P_COD_PART_FLUX = 'SFRA'  THEN
                IF R_GET_PART_FLUX.COD_PART_ADDU = 'RSF' THEN
                  -- Création du projet RIPSFR
                  NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,'RSF');
                ELSE
                  NULL;
                END IF;
              ELSIF vType = 'ZMD' AND P_COD_PART_FLUX = NAT_FTTH_OI.P_OC_SIEA  THEN
                -- Pas de projet, en RIP SIEA : on essaye de le créer
                NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM, 'SIA');
              END IF;
            END IF;
          END IF;
        ELSE -->Dans le cas ou l'IDPM est NULL
          vControleOC := 1 ;
        END IF;
        IF vControleOC = 1 AND vCtrlAdr = 1 THEN

          -- Contrôle de présence
          --> On vérifie si l'immeuble n'existe pas pour cette OI
            --> Si l'immeuble n'existe pas pour cette OI, on vérifie si l'immeuble existe pour une autre OI
            --> Si c'est la cas, on ne va pas insérer une nouvelle ligne dans la table des immeubles
          vImm_id := NAT_FF1_TRT_FLX.GET_IMM_FROM_ADR(P_CODOI,
                                                      R_CUR.IDENTIFIANTIMMEUBLE,
                                                      vAdr_Imm_Oi_Id);
           -- Récupération des Scores
           v_score_dep_imb := NAT_FF1_ADR.GET_SCORE_DEP_IMB(P_ETAT_IMMEUBLE => R_CUR.ETATIMMEUBLE ,
                                                            P_DATE_MESC => TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD') );
           -- Score deploiement PM
           v_score_dep_pm := NAT_FF1_ADR.GET_SCORE_DEP_PM(P_REFERENCEPM => R_CUR.REFERENCEPM,
                                                          P_TYPE_ZONE   => vType);
           --Score blacklistage
           v_score_blk := NAT_FF1_ADR.GET_SCORE_BLK(P_IDENTIFIANTIMMEUBLE => R_CUR.IDENTIFIANTIMMEUBLE,
                                                    P_HEXACLE => vHexacle,
                                                    P_CODOI                => vCodOI);

           --Score final
           v_score := NAT_FF1_ADR.GET_SCORE(P_SOCRE_DEP_IMM => v_score_dep_imb,
                                            P_SOCRE_DEP_PM => v_score_dep_pm,
                                            P_SOCRE_BLK    => v_score_blk);

          /*IF (vImm_id IS NULL) OR (vImm_id IS NOT NULL AND vIS_NEW_FOR_OI_ONLY = 1)  THEN --> On est sure que l'immeuble n'exite pas*/
            IF vImm_id IS NULL THEN
              -- Création de l'immeuble
              NAT_FF1_TRT_FLX.NEW_IMMEUBLE(vImm_id,
                                           vHexacle,
                                           vtableName);
            ELSE
              -- MAJ de l'info adresse
              NAT_FF1_TRT_FLX.SET_IMMEUBLE(vImm_id,
                                           vHexacle,
                                           vtableName);
            END IF;
          /*END IF;*/

          IF vDatMajHexaBytel IS NULL THEN
            vHexaExistingAdrBlk := NAT_FF1_ADR.GET_EXISTING_ADR_HEXABTL_BLK(R_CUR.IDENTIFIANTIMMEUBLE,R_CUR.REFERENCEPM);
          ELSE
            vHexaExistingAdrBlk := NAT_FF1_ADR.GET_EXISTING_ADR_BLK(R_CUR.IDENTIFIANTIMMEUBLE,R_CUR.REFERENCEPM);
          END IF;

          IF vHexaExistingAdrBlk IS NOT NULL THEN
            vBlk := 'OUI';
            vMotif := NAT_FF1_ADR.GET_PIRE_MOTIF(P_HEXACLE             => vHexacle ,
                                                   P_IDENTIFIANTIMMEUBLE => R_CUR.IDENTIFIANTIMMEUBLE,
                                                   P_BLOCAGEELIGIBILITE  => NULL,
                                                   P_DATPREVDEBLOCAGE    => NULL,
                                                   P_FOR_CALCUL_PIRE_MTF => 1,
                                                   P_CODOI               => vCodOI);
          ELSE
            OPEN C_VERIF_BLK(R_CUR.IDENTIFIANTIMMEUBLE, vCodoi);
            FETCH C_VERIF_BLK INTO R_VERIF_BLK;
            vFoundBlk := C_VERIF_BLK%FOUND;
            CLOSE C_VERIF_BLK;

              IF vFoundBlk THEN
                vBlk := 'OUI';
                vMotif := NAT_FF1_ADR.GET_PIRE_MOTIF(P_HEXACLE           => vHexacle ,
                                                   P_IDENTIFIANTIMMEUBLE => R_CUR.IDENTIFIANTIMMEUBLE,
                                                   P_BLOCAGEELIGIBILITE  => NULL,
                                                   P_DATPREVDEBLOCAGE    => NULL,
                                                   P_FOR_CALCUL_PIRE_MTF => 1,
                                                   P_CODOI               => vCodOI);
              ELSE
                vBlk := 'NON';
                vMotif := NULL;
              END IF;
           END IF;

          IF vAdr_Imm_Oi_Id IS NULL THEN
            -- Insertion de l'adresse :
            BEGIN

              NAT_FTTH_OI.INS_ADR_IMM_OI(P_REFERENCEPM                  => R_CUR.REFERENCEPM,
                                           P_IMM_ID                       => vImm_id,
                                           P_IDENTIFIANTIMMEUBLE          => R_CUR.IDENTIFIANTIMMEUBLE,
                                           P_CODERIVOLIIMMEUBLE           => R_CUR.CODERIVOLIIMMEUBLE,
                                           P_CODEINSEEIMMEUBLE            => R_CUR.CODEINSEEIMMEUBLE,
                                           P_CODEPOSTALIMMEUBLE           => R_CUR.CODEPOSTALIMMEUBLE,
                                           P_VILLEIMMEUBLE                => R_CUR.COMMUNEIMMEUBLE,
                                           P_CODEADRESSEIMMEUBLE          => vHexacle,
                                           P_TYPEVOIEIMMEUBLE             => R_CUR.TYPEVOIEIMMEUBLE,
                                           P_NOMVOIEIMMEUBLE              => R_CUR.NOMVOIEIMMEUBLE,
                                           P_NUMEROVOIEIMMEUBLE           => R_CUR.NUMEROVOIEIMMEUBLE,
                                           P_COMPLEMENTNUMEROVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                           P_BATIMENTIMMEUBLE             => R_CUR.BATIMENTIMMEUBLE,
                                           P_NBRELOGEMENTSINFOPREALABLES  => TO_NUMBER(R_CUR.NOMBRELOGEMENTSINFOPREALABLES),
                                           P_ETATIMMEUBLE                 => R_CUR.ETATIMMEUBLE,
                                           P_ETATPM                       => R_CUR.ETATPM,
                                           P_DATEINSTALLATIONPM           => TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD') ,
                                           P_CODERIVOLIPM                 => R_CUR.CODEVOIERIVOLIPM,
                                           P_CODEINSEEPM                  => R_CUR.CODEINSEEPM,
                                           P_CODEPOSTALPM                 => R_CUR.CODEPOSTALPM,
                                           P_VILLEPM                      => R_CUR.COMMUNEPM,
                                           P_CODEADRESSEPM                => R_CUR.CODEADRESSEPM,
                                           P_TYPEVOIEPM                   => R_CUR.TYPEVOIEPM,
                                           P_NOMVOIEPM                    => R_CUR.NOMVOIEPM,
                                           P_NUMEROVOIEPM                 => R_CUR.NUMEROVOIEPM,
                                           P_COMPLEMENTVOIEPM             => R_CUR.COMPLEMENTVOIEPM,
                                           P_DATE_IMP                     => R_CUR.DATE_IMP,
                                           P_FILE_ID                      => R_CUR.FILE_ID,
                                           P_BATIMENTPM                   => R_CUR.BATIMENTPM,
                                           P_CODOI                        => vCodOI,
                                           P_TYPZON                       => vType,
                                           P_DATENVOSSFAI                 => NULL,
                                           P_NOMBREPMTECHNIQUES           => TO_NUMBER(R_CUR.NOMBREPMTECHNIQUES),
                                           P_TYPEIMMEUBLE                 => R_CUR.TYPEIMMEUBLE,
                                           P_TYPEPROJECTIONGEOGRAPHIQUE   => R_CUR.TYPEPROJECTIONGEOGRAPHIQUE,
                                           P_COORDONNEEPMX                => ROUND(TO_NUMBER(R_CUR.COORDONNEEPMX),5),
                                           P_COORDONNEEPMY                => ROUND(TO_NUMBER(R_CUR.COORDONNEEPMY),5),
                                           P_COORDONNEEIMMEUBLEX          => ROUND(TO_NUMBER(R_CUR.COORDONNEEIMMEUBLEX),5),
                                           P_COORDONNEEIMMEUBLEY          => ROUND(TO_NUMBER(R_CUR.COORDONNEEIMMEUBLEY),5),
                                           P_TYPEZONE                     => R_CUR.TYPEZONE,
                                           P_BLACKLIST                    => vBlk,
                                           P_MAJ_OSSF                     => 1,
                                           P_ETAIMMSIR                    => 'A',
                                           P_SRCADR                       => 'IPE',
                                           P_ACRDGESTNAIREIMM             => R_CUR.ACCORDGESTIONNAIRENECESSAIRE,
                                           P_HEXABTL                      => (CASE WHEN vDatMajHexaBytel IS NOT NULL
                                                                                THEN vHexacle
                                                                                ELSE NULL
                                                                              END),
                                           P_DATEMAJHEXABTL               => vDatMajHexaBytel,
                                           P_TYPEINGENIERIE               => R_CUR.TYPEINGENIERIE,
                                           P_DATECABLAGEADRESSE           => TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD') ,
                                           P_TYPRACCOPBPTO                => R_CUR.TYPRACCOPBPTO,
                                           P_TYPPBO                       => R_CUR.TYPPBO,
                                           P_DATEMISEENSERVICECOMEPM      => TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD') ,
                                           P_DATMESCOMIMM                 => TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD') ,
                                           P_DATDEBACPTCMDACSS            => TO_DATE(R_CUR.DATDEBACPTCMDACSS,'YYYY/MM/DD') ,
                                           P_TYPEEMPLACEMENTPM            => R_CUR.TYPEEMPLACEMENTPM,
                                           P_CATRACLGMT_CAL               => vCATRACLGMT_CAL,
                                           P_CODEHEXACLEVOIE              => R_CUR.CODHEXAVOIE,
                                           P_ADR_IMM_OI_ID                => vAdr_Imm_Oi_Id,
                                           P_SCORE_DEPL_IMB               => v_score_dep_imb,
                                           P_SCORE_DEPL_PM                => v_score_dep_pm ,
                                           P_SCORE_BLK                    => v_score_blk,
                                           P_SCORE                        => v_score,
                                           P_BLOCAGEELIGIBILITE           => NULL,
                                           P_ORIGINEBLOCAGE               => NULL,
                                           P_MOTIFBLOCAGE                 => NULL,
                                           P_DATPREVDEBLOCAGE             => NULL,
                                           P_DATDEBUTBLOCAGEELIG          => NULL,
                                           P_RACCORDEMENTLONG             => NULL,
                                           P_REFPRDM                      => R_CUR.REFPRDM,
                                           P_SUPPORTINFRAFTTE             => NULL,
                                           P_ETATIMMPBSPECIFIQUE          => NULL);
            IF vHexaExistingAdrBlk IS NOT NULL THEN
              NAT_FF1_ADR.INS_ADR_BLK_FROM_PREVIOUS_HEXA(vHexaExistingAdrBlk,
                                                         vHexacle,
                                                         vCodOI,
                                                         R_CUR.IDENTIFIANTIMMEUBLE);
            END IF;
            EXCEPTION
              WHEN OTHERS THEN
                plog.ERROR('Erreur lors de l''insertion adresse 3.0 dans la table finale','SQLERRM', SQLERRM);
                plog.full_error_backtrace('File_ID',P_FILE_ID);
                plog.full_call_stack('File_ID',P_FILE_ID);
            END;
          ELSE --> Dans le cas où l'immeuble existe déjà
            -- MAJ de l'info adresse
            BEGIN
              /*NAT_FF1_TRT_FLX.SET_IMMEUBLE(vImm_id,
                                           vHexacle,
                                           vtableName);*/
              vMajOss := DELTA_IPE_OSS_V2X(vCodOI,
                                           vImm_id,
                                           R_CUR.TYPEIMMEUBLE,
                                           R_CUR.ACCORDGESTIONNAIRENECESSAIRE,
                                           R_CUR.REFERENCEPM,
                                           R_CUR.TYPPBO,
                                           R_CUR.TYPRACCOPBPTO,
                                           R_CUR.ETATIMMEUBLE,
                                           R_CUR.CODERIVOLIIMMEUBLE,
                                           R_CUR.CODEADRESSEIMMEUBLE);

              NAT_FTTH_OI.SET_ADR_IMM_OI(P_REFERENCEPM                  => R_CUR.REFERENCEPM,
                                         P_IMM_ID                       => vImm_id,
                                         P_IDENTIFIANTIMMEUBLE          => R_CUR.IDENTIFIANTIMMEUBLE,
                                         P_CODERIVOLIIMMEUBLE           => R_CUR.CODERIVOLIIMMEUBLE,
                                         P_CODEINSEEIMMEUBLE            => R_CUR.CODEINSEEIMMEUBLE,
                                         P_CODEPOSTALIMMEUBLE           => R_CUR.CODEPOSTALIMMEUBLE,
                                         P_VILLEIMMEUBLE                => R_CUR.COMMUNEIMMEUBLE,
                                         P_CODEADRESSEIMMEUBLE          => vHexacle,
                                         P_TYPEVOIEIMMEUBLE             => R_CUR.TYPEVOIEIMMEUBLE,
                                         P_NOMVOIEIMMEUBLE              => R_CUR.NOMVOIEIMMEUBLE,
                                         P_NUMEROVOIEIMMEUBLE           => R_CUR.NUMEROVOIEIMMEUBLE,
                                         P_COMPLEMENTNUMEROVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                         P_BATIMENTIMMEUBLE             => R_CUR.BATIMENTIMMEUBLE,
                                         P_NBRELOGEMENTSINFOPREALABLES  => TO_NUMBER(R_CUR.NOMBRELOGEMENTSINFOPREALABLES),
                                         P_ETATIMMEUBLE                 => R_CUR.ETATIMMEUBLE,
                                         P_ETATPM                       => R_CUR.ETATPM,
                                         P_DATEINSTALLATIONPM           => TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD'),
                                         P_CODERIVOLIPM                 => R_CUR.CODEVOIERIVOLIPM,
                                         P_CODEINSEEPM                  => R_CUR.CODEINSEEPM,
                                         P_CODEPOSTALPM                 => R_CUR.CODEPOSTALPM,
                                         P_VILLEPM                      => R_CUR.COMMUNEPM,
                                         P_CODEADRESSEPM                => R_CUR.CODEADRESSEPM,
                                         P_TYPEVOIEPM                   => R_CUR.TYPEVOIEPM,
                                         P_NOMVOIEPM                    => R_CUR.NOMVOIEPM,
                                         P_NUMEROVOIEPM                 => R_CUR.NUMEROVOIEPM,
                                         P_COMPLEMENTVOIEPM             => R_CUR.COMPLEMENTVOIEPM,
                                         P_DATE_IMP                     => R_CUR.DATE_IMP,
                                         P_FILE_ID                      => R_CUR.FILE_ID,
                                         P_BATIMENTPM                   => R_CUR.BATIMENTPM,
                                         P_CODOI                        => vCodOI,
                                         P_TYPZON                       => vType,
                                         P_DATENVOSSFAI                 => NULL,
                                         P_NOMBREPMTECHNIQUES           => TO_NUMBER(R_CUR.NOMBREPMTECHNIQUES),
                                         P_TYPEIMMEUBLE                 => R_CUR.TYPEIMMEUBLE,
                                         P_TYPEPROJECTIONGEOGRAPHIQUE   => R_CUR.TYPEPROJECTIONGEOGRAPHIQUE,
                                         P_COORDONNEEPMX                => ROUND(TO_NUMBER(R_CUR.COORDONNEEPMX),5),
                                         P_COORDONNEEPMY                => ROUND(TO_NUMBER(R_CUR.COORDONNEEPMY),5),
                                         P_COORDONNEEIMMEUBLEX          => ROUND(TO_NUMBER(R_CUR.COORDONNEEIMMEUBLEX),5),
                                         P_COORDONNEEIMMEUBLEY          => ROUND(TO_NUMBER(R_CUR.COORDONNEEIMMEUBLEY),5),
                                         P_TYPEZONE                     => R_CUR.TYPEZONE,
                                         P_BLACKLIST                    => vBlk,
                                         P_MAJ_OSSF                     => vMajOss,
                                         P_ETAIMMSIR                    => 'M',
                                         P_SRCADR                       => 'IPE',
                                         P_ACRDGESTNAIREIMM             => R_CUR.ACCORDGESTIONNAIRENECESSAIRE,
                                         P_HEXABTL                      => (CASE WHEN vDatMajHexaBytel IS NOT NULL
                                                                                THEN vHexacle
                                                                                ELSE NULL
                                                                            END),
                                         P_DATEMAJHEXABTL               => vDatMajHexaBytel,
                                         P_TYPEINGENIERIE               => R_CUR.TYPEINGENIERIE,
                                         P_DATECABLAGEADRESSE           => TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD') ,
                                         P_TYPRACCOPBPTO                => R_CUR.TYPRACCOPBPTO,
                                         P_TYPPBO                       => R_CUR.TYPPBO,
                                         P_DATEMISEENSERVICECOMEPM      => TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD') ,
                                         P_DATMESCOMIMM                 => TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD') ,
                                         P_DATDEBACPTCMDACSS            => TO_DATE(R_CUR.DATDEBACPTCMDACSS,'YYYY/MM/DD') ,
                                         P_TYPEEMPLACEMENTPM            => R_CUR.TYPEEMPLACEMENTPM,
                                         P_CATRACLGMT_CAL               => vCATRACLGMT_CAL,
                                         P_CODEHEXACLEVOIE              => R_CUR.CODHEXAVOIE,
                                         P_ADR_IMM_OI_ID                => vAdr_Imm_Oi_Id,
                                         P_SCORE_DEPL_IMB               => v_score_dep_imb,
                                         P_SCORE_DEPL_PM                => v_score_dep_pm,
                                         P_SCORE_BLK                    => v_score_blk,
                                         P_SCORE                        => v_score,
                                         P_BLOCAGEELIGIBILITE           => NULL,
                                         P_ORIGINEBLOCAGE               => (CASE vBlk
                                                                               WHEN 'OUI'
                                                                              THEN 'BYTEL'
                                                                               ELSE NULL
                                                                              END),
                                         P_MOTIFBLOCAGE                 => vMotif,
                                         P_DATPREVDEBLOCAGE             => NULL,
                                         P_DATDEBUTBLOCAGEELIG          => NULL,
                                         P_RACCORDEMENTLONG             => NULL,
                                         P_REFPRDM                      => R_CUR.REFPRDM,
                                         P_SUPPORTINFRAFTTE             => NULL,
                                         P_ETATIMMPBSPECIFIQUE          => NULL);

            EXCEPTION
              WHEN OTHERS THEN
                plog.ERROR('Erreur lors de l''insertion adresse 3.0 dans la table finale','SQLERRM', SQLERRM);
                plog.full_error_backtrace('File_ID',P_FILE_ID);
                plog.full_call_stack('File_ID',P_FILE_ID);
            END;
          END IF;
        END IF;
       END IF;
          BEGIN
            NAT_FF1_TRT_FLX.INS_IPE(R_CUR.IDENTIFIANTIMMEUBLE,
                                  R_CUR.CODERIVOLIIMMEUBLE,
                                  R_CUR.CODEINSEEIMMEUBLE,
                                  TO_NUMBER(replace(R_CUR.CODEPOSTALIMMEUBLE,' ','')),
                                  R_CUR.COMMUNEIMMEUBLE,
                                  R_CUR.CODEADRESSEIMMEUBLE,
                                  R_CUR.TYPEVOIEIMMEUBLE,
                                  R_CUR.NOMVOIEIMMEUBLE,
                                  R_CUR.NUMEROVOIEIMMEUBLE,
                                  R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                  R_CUR.BATIMENTIMMEUBLE,
                                  TO_NUMBER(replace(R_CUR.NOMBRELOGEMENTSINFOPREALABLES,' ','')),
                                  R_CUR.ETATIMMEUBLE,
                                  TO_DATE(R_CUR.DATESIGNATURECONVENTION,'YYYY/MM/DD'),
                                  R_CUR.GESTIONNAIREIMMEUBLE,
                                  TO_NUMBER(replace(R_CUR.CODEPOSTALGESTIONNAIRE,' ','')),
                                  R_CUR.COMMUNEGESTIONNAIRE,
                                  R_CUR.TYPEVOIEGESTIONNAIRE,
                                  R_CUR.NOMVOIEGESTIONNAIRE,
                                  R_CUR.NUMEROVOIEGESTIONNAIRE,
                                  R_CUR.CPLNUMVOIEGESTIONNAIRE,
                                  TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD'),
                                  TO_DATE(R_CUR.DATEDERNIEREMODIFICATION,'YYYYMMDDHH24MI'),
                                  R_CUR.REFERENCEPM,
                                  R_CUR.ETATPM,
                                  TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD'),
                                  R_CUR.CODEVOIERIVOLIPM,
                                  R_CUR.CODEINSEEPM,
                                  TO_NUMBER(replace(R_CUR.CODEPOSTALPM,' ','')),
                                  R_CUR.COMMUNEPM,
                                  R_CUR.CODEADRESSEPM,
                                  R_CUR.TYPEVOIEPM,
                                  R_CUR.NOMVOIEPM,
                                  R_CUR.NUMEROVOIEPM,
                                  R_CUR.COMPLEMENTVOIEPM,
                                  R_CUR.TYPEINGENIERIE,
                                  R_CUR.FIBREDEDIEELIBRE,
                                  TO_NUMBER(replace(R_CUR.NOMBRELOGEMENTSPM,' ','')),
                                  TO_NUMBER(replace(R_CUR.NOMBRECOLONNESMONTANTES,' ','')),
                                  TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD'),
                                  R_CUR.DATE_IMP,
                                  R_CUR.FILE_ID,
                                  0,
                                  R_CUR.SIRETGESTIONNAIRE,
                                  R_CUR.TYPEEMPLACEMENTPM,
                                  R_CUR.COMMENTAIREPM,
                                  TO_NUMBER(replace(R_CUR.CAPACITEMAXPM,' ','')),
                                  R_CUR.BATIMENTPM,
                                  R_CUR.REFERENCECONSULTATIONNATIVE,
                                  vCodOI,
                                  vImm_id,
                                  /*1,
                                  'A',*/
                                  vType,
                                  TO_NUMBER(replace(R_CUR.NOMBREPMTECHNIQUES,' ','')),
                                  R_CUR.TYPEIMMEUBLE,
                                  R_CUR.TYPEPROJECTIONGEOGRAPHIQUE,
                                  ROUND(TO_NUMBER(R_CUR.COORDONNEEPMX),5),
                                  ROUND(TO_NUMBER(R_CUR.COORDONNEEPMY),5),
                                  ROUND(TO_NUMBER(R_CUR.COORDONNEEIMMEUBLEX),5),
                                  ROUND(TO_NUMBER(R_CUR.COORDONNEEIMMEUBLEY),5),
                                  NULL,-- R_CUR.REFREGROUPEMENTPM,
                                  R_CUR.EMPLACEMENTACTIFDISPONIBLE,
                                  R_CUR.QUALITEADRESSEPM,
                                  TO_DATE(R_CUR.DATEPREMIEREMADPM,'YYYY/MM/DD'),
                                  R_CUR.ACCORDGESTIONNAIRENECESSAIRE,
                                  TO_NUMBER(replace(R_CUR.TYPEZONE,' ','')),
                                  -- 2.2
                                  TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD'),--p_datmescomimm => :p_datmescomimm,
                                  R_CUR.IMMEUBLENEUF,--p_immeubleneuf => :p_immeubleneuf,
                                  TO_DATE(R_CUR.DATPRVLIVIMMNEUF,'YYYY/MM/DD'),--p_datprvlivimmneuf => :p_datprvlivimmneuf,
                                  R_CUR.BRASSAGEPMOI,--p_brassagepmoi => :p_brassagepmoi,
                                  R_CUR.REFCONSUL,--p_refconsul => :p_refconsul,
                                  R_CUR.CODHEXAVOIE,--p_codhexavoie => :p_codhexavoie,
                                  R_CUR.CODEBAN,--p_codeban => :p_codeban,
                                  R_CUR.CHMPRSV1,--p_chmprsv1 => :p_chmprsv1,
                                  R_CUR.CHMPRSV2,--p_chmprsv2 => :p_chmprsv2,
                                  R_CUR.CHMPRSV3,--p_chmprsv3 => :p_chmprsv3,
                                  TO_DATE(R_CUR.DATDEBACPTCMDACSS,'YYYY/MM/DD'),--p_datdebacptcmdacss => :p_datdebacptcmdacss,
                                  TO_DATE(R_CUR.DATDEBFOURCRCMDACSS,'YYYY/MM/DD'),--p_datdebfourcrcmdacss => :p_datdebfourcrcmdacss
                                  -- 3.0
                                  R_CUR.CODEOI_IPE,
                                  R_CUR.REFPRDM,
                                  R_CUR.REFLIENPMPRDM,
                                  TO_NUMBER(REPLACE(R_CUR.LONGLGNIMM,',','.' )),
                                  R_CUR.REFPBO,
                                  R_CUR.DATMADPBO,
                                  R_CUR.NBLOGMTPBO,
                                  TO_NUMBER(R_CUR.NBLOGMTMADPM),
                                  R_CUR.CHMPRSV4,
                                  R_CUR.CHMPRSV5,
                                  R_CUR.SUSRACDMD,
                                  R_CUR.TYPPBO,
                                  R_CUR.TYPRACCOPBPTO,
                                  R_CUR.CONDSYNDIC,
                                  -- 3.1
                                  NULL, -- R_CUR.RACCORDEMENTLONG,
                                  NULL, -- R_CUR.ETATZAPM,
                                  NULL, -- TO_DATE(R_CUR.DATEZAPMCIBLE,'YYYY/MM/DD'),
                                  NULL, -- R_CUR.SUPPORTINFRAFTTE,
                                  NULL, -- R_CUR.ETATIMMPBSPECIFIQUE,
                                  NULL, -- R_CUR.BLOCAGEELIGIBILITE,
                                  NULL, -- R_CUR.MOTIFBLOCAGE,
                                  NULL, -- TO_DATE(R_CUR.DATPREVDEBLOCAGE,'YYYY/MM/DD'),
                                  NULL, -- TO_DATE(R_CUR.DATDEBUTBLOCAGEELIG,'YYYY/MM/DD'),
                                  NULL, -- R_CUR.CHMPRSV6,
                                  NULL -- R_CUR.CHMPRSV7
                                  );
            IF R_CUR.REFERENCEPM IS NOT NULL THEN
             /* BEGIN
                vCATRACLGMT_CAL := SUBSTR(NAT_FTTH_OI.GET_CRL(R_CUR.CODEINSEEIMMEUBLE,
                                                              R_CUR.CODERIVOLIIMMEUBLE,
                                                              R_CUR.NUMEROVOIEIMMEUBLE,
                                                              R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                              R_CUR.IDENTIFIANTIMMEUBLE,
                                                              R_CUR.BATIMENTIMMEUBLE,
                                                              R_CUR.REFERENCEPM,
                                                              R_CUR.CODEADRESSEIMMEUBLE),0,100);
              EXCEPTION
                WHEN OTHERS THEN
                  vCATRACLGMT_CAL := NULL;
              END;*/
              /*IF vCATRACLGMT_CAL IS NOT NULL AND vAdr_Imm_Oi_Id IS NOT NULL THEN
                UPDATE ADR_IMM_OI a
                   SET a.CATRACLGMT_CAL = vCATRACLGMT_CAL
                 WHERE a.ADR_IMM_OI_ID  = vAdr_Imm_Oi_Id;
              END IF;
*/
              IF vPmEcours <> R_CUR.REFERENCEPM THEN
                BEGIN
                  IF vPmEcours IS NOT NULL THEN
                    BEGIN
                      NAT_FF1.UPD_INFO_ADR_PM_IPE(R_CUR.REFERENCEPM,P_FILE_ID,'IPE','3.0');
                    EXCEPTION
                      WHEN OTHERS THEN
                        plog.ERROR('Erreur lors de la mise à jour de la table ADR_PM','SQLERRM', SQLERRM,'','');
                    END;

                    NAT_FF1_TRT_FLX.TRT_IPE(vPmEcours);
                    NAT_FTTH_OI.TRT_CMD_UNI(P_IDPM      => R_CUR.REFERENCEPM,
                                P_TYPZON                => P_TYPE,
                                P_TYPZONDET             => vType,
                                P_CODOI                 => vCodOI,
                                P_REFCONSULTATIONNATIVE => R_CUR.REFERENCECONSULTATIONNATIVE,
                                P_REFCONSUL             => R_CUR.REFCONSUL,
                                P_DATEINSTALLATIONPM    => TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYYMMDD'),
                                P_NUMEROVOIEPM          => R_CUR.NUMEROVOIEPM,
                                P_TYPEVOIEPM            => R_CUR.TYPEVOIEPM,
                                P_NOMVOIEPM             => R_CUR.NOMVOIEPM,
                                P_CODEPOSTALPM          => R_CUR.CODEPOSTALPM,
                                P_COMMUNEPM             => R_CUR.COMMUNEPM,
                                P_TYPEEMPLACEMENTPM     => R_CUR.TYPEEMPLACEMENTPM,
                                P_CODEINSEEPM           => R_CUR.CODEINSEEPM);
                    -- controles FEP
                    IF R_PRJPM.PART_ADD = 'BTL' THEN
                      NAT_FF1_CTRL_FEP.CTRL_ABS_PLN_MAD(R_PRJPM.IDPM);
                      NAT_FF1_CTRL_FEP.CTRL_ABS_INFO_SYN(R_PRJPM.IDPM);
                    END IF;
                    -- cloture des alertes PM supprimé
                    NAT_FF1_CR_MAD_PM.CLS_ALRT_PM_SUPPR_IPE(vPmEcours);

                  END IF;
                EXCEPTION
                  WHEN OTHERS THEN
                     plog.ERROR('Erreur lors du traitement FF de l''IPE','SQLERRM', SQLERRM);
                     plog.full_error_backtrace('File_ID',P_FILE_ID);
                     plog.full_call_stack('File_ID',P_FILE_ID);
                END;
                vPmEcours := R_CUR.REFERENCEPM;

                OPEN C_GET_PM_ETAT(vPmEcours);
                FETCH C_GET_PM_ETAT INTO R_GET_PM_ETAT;
                vFoundPmEtat := C_GET_PM_ETAT%FOUND;
                CLOSE C_GET_PM_ETAT;

                IF vFoundPmEtat THEN
                  IF vType =  'ZTD' THEN
                    BEGIN
                      -- contrôles alertes OI
                      NAT_FF1_CR_MAD_PM.CTRL_ALL_ALRT_SUIVI_CR_MAD(vPmEcours, vCodOI);
                      -- contrôle création projet
                      NAT_FF1_CR_MAD_PM.CTRL_PRM_PM_SS_PRJ(vPmEcours);
                    EXCEPTION
                      WHEN OTHERS THEN
                        plog.ERROR('Echec contrôle CR MAD dans l''IPE 3.0','SQLERRM', SQLERRM);
                    END;
                  END IF;

                ELSE
                  BEGIN
                    -- cloture des alertes OI
                    NAT_FF1_CR_MAD_PM.CLS_ALRT_CR_MAD(vPmEcours);
                  EXCEPTION
                    WHEN OTHERS THEN
                      plog.ERROR('Echec contrôle CR MAD dans l''IPE 3.0','SQLERRM', SQLERRM);
                  END;
                END IF;
             END IF;
           END IF;

         EXCEPTION
           WHEN OTHERS THEN
             plog.ERROR('Erreur lors de l''insertion IPE 3.0 dans la table finale','SQLERRM', SQLERRM);
             plog.full_error_backtrace('File_ID',P_FILE_ID);
             plog.full_call_stack('File_ID',P_FILE_ID);
         END;
     -- On passe l'adresse en provenance du CR MAD à Supprimer
     IF r_cur.identifiantimmeuble IS NOT NULL THEN
     UPDATE ADR_IMM_OI a
        SET a.ETAIMMSIR = 'S',
            a.DATSUP = SYSDATE,
            a.FILE_ID_SRC_SUP = P_FILE_ID,
            a.maj_ossf = 1
       WHERE a.IDENTIFIANTIMMEUBLE = R_CUR.IDENTIFIANTIMMEUBLE
         AND a.CODOI               = vCodOI
         AND a.SRCADR              = 'MAD';
     END IF;

     IF (v_compt = 1000) THEN
       COMMIT;
       v_compt := 0;
     END IF;
     vNBLGNTRT := vNBLGNTRT + 1;
    EXCEPTION
      WHEN OTHERS THEN
        -- On incrémente pour correspondre au nombre de ligne de la table temporaire
        vNBLGNTRT := vNBLGNTRT + 1;
        plog.ERROR('Erreur lors de l''insertion IPE 3.0 dans traitement','SQLERRM', SQLERRM);
        plog.full_error_backtrace('File_ID',P_FILE_ID);
        plog.full_call_stack('File_ID',P_FILE_ID);
    END;
    END LOOP;
    CLOSE V_CUR;

    COMMIT;
    BEGIN
      IF vPmEcours IS NOT NULL THEN
        NAT_FF1_TRT_FLX.TRT_IPE(vPmEcours);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors du traitement FF de l''IPE','SQLERRM', SQLERRM);
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;

    COMMIT;
    plog.info('POST TRAITEMENT IPE : Fin itération IPE : '||vNBLGNTRT,
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));      -- Gestion des immeubles supprimés

    plog.info('POST TRAITEMENT IPE : Début Contrôle Demande d''info',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    -- Demandes d'information
    -- Controle s'il y a une demande sur un PM qui est passé à abandonné
    NAT_FF1_DMD_INFO.CTRL_PM_ABN_OI(vCodOI);
    -- Controle sur une demande d'information absente de l'IPE
    NAT_FF1_DMD_INFO.CTRL_PM_ABS_IPE(vCodOI);

    -- Contrôle sur l'alerte PM absent
    NAT_FF1_CTRL_IPE.CTRL_ALL_ALRT_PM_ABS;
    /*Traitement propre à ZMD*/
    IF vType <> 'ZTD' THEN
      -- Contrôle Multi-PM
      NAT_FF1_CTRL_ZMD.CTRL_ALL_MULTI_PM(R_GET_PART_FLUX.COD_PART_ADDU);
    END IF;

    plog.info('POST TRAITEMENT IPE : Fin Contrôle Demande d''info',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

    IF vPartAddPrj IN ('AMI','RIP','ALT','COV','TDF','OFC', NAT_FTTH_OI.P_CODOC_SIEA, 'RSF') THEN

    plog.info('POST TRAITEMENT IPE : Début Contrôle date MESC',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    -- contrôle sur les PMs OT
    vControleOC := NAT_FF1_CTRL_ZMD.CTRL_OVT_DAT_MESC(P_PART_ADD => vPartAddPrj);
    plog.info('POST TRAITEMENT IPE : Fin Contrôle date MESC',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

    END IF;

    IF P_TYPE <> 'ZSP' THEN
      -- Gestion des immeubles supprimés
      plog.info('POST TRAITEMENT IPE : Début Gestion des immeubles supprimés',
                'FILEID', P_FILE_ID,
                'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      NAT_FF1_TRT_FLX.SET_IMM_DEL_OI(P_CODOI, P_FILE_ID, P_TYPE); --> a adapter
      plog.info('POST TRAITEMENT IPE : Fin Gestion des immeubles supprimés',
                'FILEID', P_FILE_ID,
                'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    ELSE
      UPDATE IPE i
         SET i.FROM_ZSP = 1
       WHERE i.FILE_ID = P_FILE_ID;

      UPDATE ADR_IMM_OI a
         SET a.FROM_ZSP = 1
       WHERE a.FILE_ID = P_FILE_ID;
      plog.info('POST TRAITEMENT IPE : Pas de Gestion des immeubles supprimés en ZSP',
                'FILEID', P_FILE_ID,
                'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    END IF;

    -- Lancement du blacklistage
    plog.info('POST TRAITEMENT IPE : Début blacklistage',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    NAT_FF1_ADR.RUN_BLK_ALL(P_CODOI); --> a adapter
    plog.info('POST TRAITEMENT IPE : Fin blacklistage',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

     plog.info('POST TRAITEMENT IPE : Début historisation',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     NAT_FF1_CTRL_IPE.NEW_IPE_RECORDS_HIS(P_CODOI,vProtocol,vNB_REC,SYSDATE,P_FILE_ID,vNB_REC_DPL); --> a adapter
     plog.info('POST TRAITEMENT IPE : Fin historisation',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

    BEGIN
      CASE P_CODOI
        WHEN 'FTEL' THEN
          vNomIfcOut := 'FTTH_SIG_IPE_OUT_FT';
        WHEN 'SFRA' THEN
          vNomIfcOut := 'FTTH_SIG_HBIPE_OUT_SFR';
        WHEN 'SFMD' THEN
          vNomIfcOut := 'FTTH_SIG_HBIPE_OUT_SFR';
        WHEN 'NUME' THEN
          vNomIfcOut := 'FTTH_SIG_IPE_OUT_NC';
        WHEN 'FREE' THEN
          vNomIfcOut := 'FTTH_SIG_IPE_OUT_FREE';
        ELSE
          vNomIfcOut := 'FTTH_SIG_IPE_OUT_SEQ';
      END CASE;
      plog.info('POST TRAITEMENT IPE : Début génération et envoie fichier',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      CMN_IFC.GENERER_PREPARATION(P_ID_PREPARATION => vId_Preparation);
      CMN_IFC.ADD_FILE_PREPARATION(P_ID_PREPARATION => vId_Preparation,
                                   P_FILE_ID_SRC    => P_FILE_ID,
                                   P_INTERFACE      => NULL,
                                   P_NOM_FIC        => R_INFO_FIC.NOM_FIC,
                                   P_EMETTEUR       => 'REBOND',
                                   P_FILE_ID        => v_Fileio_OUT);

       NAT_IFC_TRT.UPDATE_LIBVAL2('NOM_FIC_OUT',R_INFO_FIC.NOM_FIC,P_FILE_ID);
       NAT_IFC_TRT.SET_FILE_ID_SRC(v_Fileio_OUT,P_FILE_ID);
       cmn_ifc.generer_interface(vNomIfcOut,
                                 1,
                                 NULL,
                                 vId_Preparation);
     plog.info('POST TRAITEMENT IPE : Fin génération et envoie fichier',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors du rebond IPE 3.0 vers le SIG','SQLERRM', SQLERRM);
     END;

     plog.info('POST TRAITEMENT IPE : Début supervision',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     NAT_FTTH_OI.POS_TRT_SPVION_IPE(P_FILE_ID      => P_FILE_ID,
                                    P_TYPZON         => P_TYPE,
                                    P_CODOI          => P_CODOI,
                                    P_NBLGNIPE       => vNBLGNIPE,
                                    P_NBLGNTRT       => vNBLGNTRT,
                                    P_NB_DOUBLON_IMB => vNB_DOUBLON_IMB);
     plog.info('POST TRAITEMENT IPE : Fin supervision',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

  ELSE
     plog.info('POST TRAITEMENT IPE : Début envoie mail rejet',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     NAT_FF1_CTRL_IPE.SEND_MAIL_REJET_IPE(P_CODOI,P_TYPE,P_FILE_ID);
     plog.info('POST TRAITEMENT IPE : Fin envoie mail rejet',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     UPDATE SPVION_IPE
        SET NOK_TO_GEN_ELIG = 4
      WHERE FILE_ID         = P_FILE_ID;
     NAT_FTTH_OI.SEND_MAIL_REPORT_IPE(P_COD_OI  => P_CODOI,
                                      P_TYPZON  => P_TYPE,
                                      P_FILE_ID => P_FILE_ID);

  END IF;
  COMMIT;
END;

----------------------------------------------------------
-- Post traitement IPE FT ZTD 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPE_IN_FT_ZTD_V30 (FILEIO_ID INTEGER) IS
vCod_Oi REF_OI.COD_OI%TYPE;
vTypzon VARCHAR2(3);
BEGIN
  plog.info('POST TRAITEMENT IPE ZTD FT : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    update IPE_FT_ZTD_V30_TMP t set t.condsyndic=substr(condsyndic,1,instr(condsyndic, chr(13))-1)
           where   instr(condsyndic, chr(13))>0 ;

  vCod_Oi := GET_OI(FILEIO_ID);
  vTypzon := 'ZTD';

  POS_TRT_IPE_V30(vCod_Oi,vTypzon,FILEIO_ID,'FTEL' );
  plog.info('POST TRAITEMENT IPE ZTD FT : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
END;

----------------------------------------------------------
-- Post traitement IPE DELTA FT ZTD 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPEDEL_IN_FT_ZTD_V30 (FILEIO_ID INTEGER) IS
  CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
vCod_Oi REF_OI.COD_OI%TYPE;
BEGIN
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  vCod_Oi := GET_OI(FILEIO_ID);

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => vCod_Oi,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;


----------------------------------------------------------
-- Post traitement IPE HISTO FT ZTD 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPEHISTO_IN_FT_ZTD_V30 (FILEIO_ID INTEGER) IS
CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
vCod_Oi REF_OI.COD_OI%TYPE;
BEGIN
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  vCod_Oi := GET_OI(FILEIO_ID);

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => vCod_Oi,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;

----------------------------------------------------------
-- Post traitement IPE HISTO SFR ZTD 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPEHIS_IN_SFRA_ZTD_V30 (FILEIO_ID INTEGER) IS
CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
vCod_Oi REF_OI.COD_OI%TYPE;
BEGIN
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;
  vCod_Oi := GET_OI(FILEIO_ID);

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => vCod_Oi,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);

END;


----------------------------------------------------------
-- Post traitement IPE HISTO ALTI 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPEHISTO_IN_ALTI_V30 (FILEIO_ID INTEGER) IS
CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
vCodOi  REF_OI.COD_OI%TYPE;
BEGIN
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  vCodOi := GET_OI(FILEIO_ID);
  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => vCodOi,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;

----------------------------------------------------------
-- Post traitement IPE HISTO FREE 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPEHISTO_IN_FREE_V30 (FILEIO_ID INTEGER) IS
CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
BEGIN
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => 'FREE',
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;

----------------------------------------------------------
-- Post traitement IPE HISTO NUME 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPEHISTO_IN_NUME_V30 (FILEIO_ID INTEGER) IS
CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
BEGIN
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => 'NUME',
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;

----------------------------------------------------------
-- Post traitement IPE HISTO TDF 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPEHISTO_IN_TDF_V30 (FILEIO_ID INTEGER) IS
CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => vCodOi,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;

----------------------------------------------------------
-- Post traitement IPE DELTA ALTI 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPEDEL_IN_ALTI_V30 (FILEIO_ID INTEGER) IS
CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  vCodOi := GET_OI(FILEIO_ID);
  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => vCodOi,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;

----------------------------------------------------------
-- Post traitement IPE DELTA FREE 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPEDEL_IN_FREE_V30 (FILEIO_ID INTEGER) IS
CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
BEGIN
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => 'FREE',
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;

----------------------------------------------------------
-- Post traitement IPE DELTA NUME 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPEDEL_IN_NUME_V30 (FILEIO_ID INTEGER) IS
CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
BEGIN
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => 'NUME',
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;

----------------------------------------------------------
-- Post traitement IPE DELTA SFR ZTD 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPEDEL_IN_SFRA_ZTD_V30 (FILEIO_ID INTEGER) IS
  CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
vCod_Oi REF_OI.COD_OI%TYPE;
BEGIN
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;
  vCod_Oi := GET_OI(FILEIO_ID);

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => vCod_Oi,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;

----------------------------------------------------------
-- Post traitement IPE DELTA TDF 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPEDEL_IN_TDF_V30 (FILEIO_ID INTEGER) IS
CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  vCodOi := GET_OI(FILEIO_ID);
  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => vCodOi,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;

----------------------------------------------------------
-- Post traitement IPE ZMD FT 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPE_IN_FT_ZMD_V30 (FILEIO_ID INTEGER) IS
vCod_Oi REF_OI.COD_OI%TYPE;
vTypzon VARCHAR2(3);
vIsConf NUMBER;
BEGIN
  plog.info('POST TRAITEMENT IPE ZMD FT : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    update IPE_FT_ZMD_V30_TMP set condsyndic=substr(condsyndic,1,instr(condsyndic, chr(13))-1)
           where   instr(condsyndic, chr(13))>0 ;

    vCod_Oi := GET_OI(FILEIO_ID);
    vTypzon := 'ZMD';

    vIsConf := IS_OI_CONF(vCod_Oi, 'FTEL');
    IF vIsConf = 1 THEN
    IF vCod_Oi = 'FTEL' THEN
      CLEAN_IPE_ZMD_FT_V30;
    END IF;

    CHK_N_CREATE_PM_FTEL_ZMD_30(vCod_Oi);

    POS_TRT_IPE_V30(vCod_Oi,vTypzon,FILEIO_ID,'FTEL');
    -- Controles commandes ZMD
    -- Apres réception IPE, comparaison sur le nombre de logements PM
    BEGIN
      NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
    EXCEPTION
      WHEN OTHERS THEN
           plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                      'FILEID', FILEIO_ID,
                      'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    END;
    ELSE
      plog.info('POST TRAITEMENT IPE : Début envoie mail rejet',
               'FILEID', FILEIO_ID,
               'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      NAT_FF1_CTRL_IPE.SEND_MAIL_REJET_IPE('FTEL','ZMD',FILEIO_ID);
      plog.info('POST TRAITEMENT IPE : Fin envoie mail rejet',
               'FILEID', FILEIO_ID,
               'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

      UPDATE SPVION_IPE
         SET NOK_TO_GEN_ELIG = 0
       WHERE FILE_ID         = FILEIO_ID;
    END IF;
  plog.info('POST TRAITEMENT IPE ZMD FT : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
END;

----------------------------------------------------------
-- Post traitement IPE ZSP FT 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPE_IN_FT_ZSP_V30 (FILEIO_ID INTEGER) IS
BEGIN
  plog.info('POST TRAITEMENT IPE ZSP FT : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    update IPE_FT_ZSP_V30_TMP set condsyndic=substr(condsyndic,1,instr(condsyndic, chr(13))-1)
           where   instr(condsyndic, chr(13))>0 ;

    CLEAN_IPE_ZSP_FT_V30;
    CHK_N_CREATE_PM_FTEL_ZSP_30;

    POS_TRT_IPE_V30('FTEL','ZSP',FILEIO_ID,'FTEL' );
    -- Controles commandes ZMD
    -- Apres réception IPE, comparaison sur le nombre de logements PM
    BEGIN
      NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
    EXCEPTION
      WHEN OTHERS THEN
           plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                      'FILEID', FILEIO_ID,
                      'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    END;
  plog.info('POST TRAITEMENT IPE ZSP FT : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
END;

----------------------------------------------------------
-- Post traitement IPE DELTA ZMD FT 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPEDEL_IN_FT_ZMD_V30 (FILEIO_ID INTEGER) IS
CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
vCod_Oi REF_OI.COD_OI%TYPE;
BEGIN
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  vCod_Oi := GET_OI(FILEIO_ID);

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => vCod_Oi,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;

----------------------------------------------------------
-- Post traitement IPE HISTO ZMD FT 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPEHISTO_IN_FT_ZMD_V30 (FILEIO_ID INTEGER) IS
CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
vCod_Oi REF_OI.COD_OI%TYPE;
BEGIN
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  vCod_Oi := GET_OI(FILEIO_ID);

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => vCod_Oi,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;



----------------------------------------------------------
-- Post traitement IPE DELTA ZMD SFR 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPEDEL_IN_SFRA_ZMD_V30 (FILEIO_ID INTEGER) IS
CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
vCod_Oi REF_OI.COD_OI%TYPE;
BEGIN
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;
  vCod_Oi := GET_OI(FILEIO_ID);

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => vCod_Oi,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;

----------------------------------------------------------
-- Post traitement IPE HISTO ZMD SFR 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPEHIS_IN_SFRA_ZMD_V30 (FILEIO_ID INTEGER) IS
CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
vCod_Oi REF_OI.COD_OI%TYPE;
BEGIN
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;
  vCod_Oi := GET_OI(FILEIO_ID);

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => vCod_Oi,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;

----------------------------------------------------------
-- Post traitement IPE DELTA AXIO 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPEDEL_IN_AXIO_V30 (FILEIO_ID INTEGER) IS
CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := NAT_FTTH_OI.GET_OI(FILEIO_ID);
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => vCodOi,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;

----------------------------------------------------------
-- Post traitement IPE HISTO AXIO 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPEHISTO_IN_AXIO_V30 (FILEIO_ID INTEGER) IS
CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := NAT_FTTH_OI.GET_OI(FILEIO_ID);
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => NULL,
                       P_CODOI    => vCodOi,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;




----------------------------------------------------------
-- Post traitement IPE SFR ZTD 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPE_IN_SFRA_ZTD_V30 (FILEIO_ID INTEGER) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  vTypzon VARCHAR2(3);
BEGIN
  plog.info('POST TRAITEMENT IPE ZTD SFRA : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    update IPE_SFRA_ZTD_V30_TMP t set t.condsyndic=substr(condsyndic,1,instr(condsyndic, chr(13))-1)
           where   instr(condsyndic, chr(13))>0 ;

  vCod_Oi := GET_OI(FILEIO_ID);
  vTypzon := 'ZTD';

  POS_TRT_IPE_V30(vCod_Oi,vTypzon,FILEIO_ID,'SFRA');
  plog.info('POST TRAITEMENT IPE ZTD SFRA : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
END;

----------------------------------------------------------
-- Post traitement IPE ZMD SFRA 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPE_IN_SFRA_ZMD_V30 (FILEIO_ID INTEGER) IS
  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID
      FROM FILE_IO f
     WHERE f.FILE_ID = FILEIO_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
  vCodOi REF_OI.COD_OI%TYPE;
  vIsConf NUMBER;

  CURSOR C_REF_OI(codOI VARCHAR2) IS
    SELECT r.RIP
      FROM REF_OI r
     WHERE r.COD_OI = codOI;
  R_REF_OI C_REF_OI%ROWTYPE;

BEGIN
  plog.info('POST TRAITEMENT IPE ZMD SFRA : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    update IPE_SFRA_ZMD_V30_TMP set CONDSYNDIC=substr(CONDSYNDIC,1,instr(CONDSYNDIC, chr(13))-1)
           where   instr(CONDSYNDIC, chr(13))>0 ;

    vCodOi := GET_OI(FILEIO_ID);
    vIsConf := IS_OI_CONF(vCodOi, 'SFRA');
    IF vIsConf = 1 THEN
      OPEN C_REF_OI(vCodOi);
        FETCH C_REF_OI INTO R_REF_OI;
      CLOSE C_REF_OI;
      IF vCodOi = 'SFOR' OR R_REF_OI.RIP = 1 THEN
        CHK_N_CREATE_PM_SFOR_ZMD_30(vCodOi);
      ELSE
        CHK_N_CREATE_PM_SFRA_ZMD_30(vCodOi);
      END IF;

      POS_TRT_IPE_V30(vCodOi,'ZMD',FILEIO_ID,'SFRA' );
      -- Controles commandes ZMD
      -- Apres réception IPE, comparaison sur le nombre de logements PM
    BEGIN
      NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
    EXCEPTION
      WHEN OTHERS THEN
           plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                      'FILEID', FILEIO_ID,
                      'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    END;
    ELSE
      plog.info('POST TRAITEMENT IPE : Début envoie mail rejet',
                'FILEID', FILEIO_ID,
                'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      NAT_FF1_CTRL_IPE.SEND_MAIL_REJET_IPE('SFMD','ZMD',FILEIO_ID);
      plog.info('POST TRAITEMENT IPE : Fin envoie mail rejet',
                'FILEID', FILEIO_ID,
                'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

     UPDATE SPVION_IPE
        SET NOK_TO_GEN_ELIG = 0
      WHERE FILE_ID         = FILEIO_ID;

      OPEN C_INFO_IFC;
      FETCH C_INFO_IFC INTO R_INFO_IFC;
      CLOSE C_INFO_IFC;

      NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                           P_TYP_IFC  => 'IN',
                           P_DATTRT   => SYSDATE,
                           P_IDPM     => NULL,
                           P_CODOI    => vCodOi,
                           P_COD_PART => NULL,
                           P_IFC_ID   => R_INFO_IFC.IFC_ID,
                           P_PRM_ID   => R_INFO_IFC.PRM_ID);
    END IF;

   plog.info('POST TRAITEMENT IPE ZMD SFRA : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
END;

----------------------------------------------------------
-- Post traitement IPE NUME 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPE_IN_NUME_V30 (FILEIO_ID INTEGER) IS
BEGIN
    plog.info('POST TRAITEMENT IPE NUME : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    POS_TRT_IPE_V30('NUME','ZTD',FILEIO_ID,'SFRA' );
    plog.info('POST TRAITEMENT IPE NUME : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
END;


----------------------------------------------------------
-- Post traitement IPE SEQU 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPE_IN_SEQU_V30 (FILEIO_ID INTEGER) IS
BEGIN
    plog.info('POST TRAITEMENT IPE SEQU : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    POS_TRT_IPE_V30('SEQU','ZTD',FILEIO_ID,NULL );
    plog.info('POST TRAITEMENT IPE SEQU : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
END;



----------------------------------------------------------
-- Post traitement IPE AXIO 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
  PROCEDURE POS_TRT_IPE_IN_AXIO_V30 (FILEIO_ID INTEGER) IS
  vCodOi REF_OI.COD_OI%TYPE;
  vIsConf NUMBER;
  BEGIN
    plog.info('POST TRAITEMENT IPE AXIO : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    vCodOi := NAT_FTTH_OI.GET_OI(FILEIO_ID);
    vIsConf := IS_OI_CONF(vCodOi, 'AXIO');
    IF vIsConf = 1 THEN
      --CLEAN_IPE_ZMD_AXIO_V22;
      CHK_N_CREATE_PM_AXIO_ZMD_30(vCodOi);

      POS_TRT_IPE_V30(vCodOi,'ZMD',FILEIO_ID, 'AXIO' );
      -- Controles commandes ZMD
      -- Apres réception IPE, comparaison sur le nombre de logements PM
      BEGIN
        NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
      EXCEPTION
        WHEN OTHERS THEN
             plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                        'FILEID', FILEIO_ID,
                        'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      END;
    ELSE
     plog.info('POST TRAITEMENT IPE : Début envoie mail rejet',
              'FILEID', FILEIO_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     NAT_FF1_CTRL_IPE.SEND_MAIL_REJET_IPE('AXIO','ZMD',FILEIO_ID);
     plog.info('POST TRAITEMENT IPE : Fin envoie mail rejet',
              'FILEID', FILEIO_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

     UPDATE SPVION_IPE
        SET NOK_TO_GEN_ELIG = 0
      WHERE FILE_ID         = FILEIO_ID;
    END IF;

    plog.info('POST TRAITEMENT IPE AXIO : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;


----------------------------------------------------------
-- Post traitement IPE FREE 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPE_IN_FREE_V30 (FILEIO_ID INTEGER) IS
BEGIN
    plog.info('POST TRAITEMENT IPE FREE : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    update IPE_FREE_V30_TMP i set i.condsyndic=substr(i.condsyndic,1,instr(i.condsyndic, chr(13))-1)
           where   instr(i.condsyndic, chr(13))>0 ;

    POS_TRT_IPE_V30('FREE','ZTD',FILEIO_ID,'FREE' );
    plog.info('POST TRAITEMENT IPE FREE : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
END;


----------------------------------------------------------
-- Post traitement IPE COVA 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPE_IN_COVA_V30 (FILEIO_ID INTEGER) IS
vCodOi REF_OI.COD_OI%TYPE;
vIsConf NUMBER;
BEGIN
  plog.info('POST TRAITEMENT IPE COVAGE : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  vCodOi := NAT_FTTH_OI.GET_OI(FILEIO_ID);
  IF vCodOi = 'SEQU' THEN
    POS_TRT_IPE_V30('SEQU','ZTD',FILEIO_ID,'COVA' );
  ELSE
    vIsConf := IS_OI_CONF(vCodOi, 'COVA');
    IF vIsConf = 1 THEN
      --CLEAN_IPE_COVA_V30_TMP;
      CHK_N_CREATE_PM_COVA_ZMD_30(vCodOi);

      POS_TRT_IPE_V30(vCodOi,'ZMD',FILEIO_ID,'COVA' );
      -- Controles commandes ZMD
      -- Apres réception IPE, comparaison sur le nombre de logements PM
      BEGIN
        NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
      EXCEPTION
        WHEN OTHERS THEN
             plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                        'FILEID', FILEIO_ID,
                        'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      END;
    ELSE
     plog.info('POST TRAITEMENT IPE : Début envoie mail rejet',
              'FILEID', FILEIO_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     NAT_FF1_CTRL_IPE.SEND_MAIL_REJET_IPE('COVA','ZMD',FILEIO_ID);
     plog.info('POST TRAITEMENT IPE : Fin envoie mail rejet',
              'FILEID', FILEIO_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

     UPDATE SPVION_IPE
        SET NOK_TO_GEN_ELIG = 0
      WHERE FILE_ID         = FILEIO_ID;
    END IF;
  END IF;
  plog.info('POST TRAITEMENT IPE COVAGE : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
END;
----------------------------------------------------------
-- Post traitement IPE ALTI 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPE_IN_ALTI_V30 (FILEIO_ID INTEGER) IS
vCodOi REF_OI.COD_OI%TYPE;
vIsConf NUMBER;
BEGIN
  plog.info('POST TRAITEMENT IPE ALTI : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  vCodOi := NAT_FTTH_OI.GET_OI(FILEIO_ID);
  vIsConf := IS_OI_CONF(vCodOi, 'ALTI');
  IF vIsConf = 1 THEN

    UPDATE IPE_ALTI_V30_TMP i
       SET i.COORDONNEEPMX       = replace(COORDONNEEPMX,',','.'),
           i.COORDONNEEPMY       = replace(COORDONNEEPMY,',','.'),
           i.COORDONNEEIMMEUBLEX = replace(COORDONNEEIMMEUBLEX,',','.'),
           i.COORDONNEEIMMEUBLEY = replace(COORDONNEEIMMEUBLEY,',','.');
    COMMIT;

    CHK_N_CREATE_PM_ALTI_ZMD_30(vCodOi);

    POS_TRT_IPE_V30(vCodOi,'ZMD',FILEIO_ID, 'ALTI' );
    -- Controles commandes ZMD
    -- Apres réception IPE, comparaison sur le nombre de logements PM
    BEGIN
      NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
    EXCEPTION
      WHEN OTHERS THEN
           plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                      'FILEID', FILEIO_ID,
                      'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    END;

  ELSE
   plog.info('POST TRAITEMENT IPE : Début envoie mail rejet',
            'FILEID', FILEIO_ID,
            'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
   NAT_FF1_CTRL_IPE.SEND_MAIL_REJET_IPE('ALTI','ZMD',FILEIO_ID);
   plog.info('POST TRAITEMENT IPE : Fin envoie mail rejet',
            'FILEID', FILEIO_ID,
            'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

   UPDATE SPVION_IPE
      SET NOK_TO_GEN_ELIG = 0
    WHERE FILE_ID         = FILEIO_ID;
  END IF;
  plog.info('POST TRAITEMENT IPE ALTI : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
END;


----------------------------------------------------------
-- Post traitement IPE TDF 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPE_IN_TDF_V30 (FILEIO_ID INTEGER) IS
vCodOi REF_OI.COD_OI%TYPE;
vIsConf NUMBER;
BEGIN
  plog.info('POST TRAITEMENT IPE TDF : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  vCodOi := NAT_FTTH_OI.GET_OI(FILEIO_ID);
  vIsConf := IS_OI_CONF(vCodOi, 'TDF');
  IF vIsConf = 1 THEN
    CHK_N_CREATE_PM_TDF_ZMD_30(vCodOi);

    POS_TRT_IPE_V30(vCodOi,'ZMD',FILEIO_ID, 'TDF' );
    -- Controles commandes ZMD
    -- Apres réception IPE, comparaison sur le nombre de logements PM
    BEGIN
      NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
    EXCEPTION
      WHEN OTHERS THEN
           plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                      'FILEID', FILEIO_ID,
                      'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    END;
    plog.info('POST TRAITEMENT IPE TDF : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  ELSE
   plog.info('POST TRAITEMENT IPE : Début envoie mail rejet',
            'FILEID', FILEIO_ID,
            'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
   NAT_FF1_CTRL_IPE.SEND_MAIL_REJET_IPE('TDF','ZMD',FILEIO_ID);
   plog.info('POST TRAITEMENT IPE : Fin envoie mail rejet',
            'FILEID', FILEIO_ID,
            'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

   UPDATE SPVION_IPE
      SET NOK_TO_GEN_ELIG = 0
    WHERE FILE_ID         = FILEIO_ID;
  END IF;
  plog.info('POST TRAITEMENT IPE TDF : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
END;

----------------------------------------------------------
-- Post traitement IPE ZMD Simpson 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPE_ZMD_IN_SMP_V30 (FILEIO_ID INTEGER) IS
vCod_Oi REF_OI.COD_OI%TYPE;
vTypzon VARCHAR2(3);
CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID,
         f.NOM_FIC
    FROM FILE_IO f
   WHERE f.FILE_ID = FILEIO_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
BEGIN
  IF NAT_FTTH_SMP.CAN_RUN_CTRL_FACTU('ZMD') = 1 THEN
    NAT_FTTH_SMP.NEW_IPE_FACT_ZMD;
    IF NAT_FF1.CAN_RUN_TRT_IPE(NAT_FTTH_OI.P_CODOI_SIMPSON) <> 1 THEN
      OPEN C_INFO_IFC;
      FETCH C_INFO_IFC INTO R_INFO_IFC;
      CLOSE C_INFO_IFC;
      GEN_REBOND( 'FTTH_SIO2_SMP_IPE_OUT', R_INFO_IFC.NOM_FIC, FILEIO_ID,NULL);
    END IF;
  END IF;

  IF NAT_FF1.CAN_RUN_TRT_IPE(NAT_FTTH_OI.P_CODOI_SIMPSON) = 1 THEN --> On lance uniquement si possible
  plog.info('POST TRAITEMENT IPE ZMD Simpson : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    update IPE_SMP_ZMD_V30_TMP set condsyndic=substr(condsyndic,1,instr(condsyndic, chr(13))-1)
           where   instr(condsyndic, chr(13))>0 ;

    vCod_Oi := GET_OI(FILEIO_ID);
    vTypzon := 'ZMD';

    CLEAN_IPE_ZMD_SMP_V30;
    CHK_N_CREATE_PM_SMP_ZMD_30(NAT_FTTH_OI.P_CODOI_SIMPSON/*,R_CUR.REFERENCEPM*/);
    POS_TRT_IPE_V30(vCod_Oi,vTypzon,FILEIO_ID,NAT_FTTH_OI.P_CODOI_SIMPSON);
    -- Controles commandes ZMD
    -- Apres réception IPE, comparaison sur le nombre de logements PM
    BEGIN
      NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
    EXCEPTION
      WHEN OTHERS THEN
           plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                      'FILEID', FILEIO_ID,
                      'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    END;
  plog.info('POST TRAITEMENT IPE ZMD Simpson : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END IF;
END;

----------------------------------------------------------
-- Post traitement IPE ZSP Simpson 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPE_ZSP_IN_SMP_V30 (FILEIO_ID INTEGER) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID,
           f.NOM_FIC
      FROM FILE_IO f
     WHERE f.FILE_ID = FILEIO_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
BEGIN
  IF NAT_FTTH_SMP.CAN_RUN_CTRL_FACTU('ZSP') = 1 THEN
    NAT_FTTH_SMP.NEW_IPE_FACT_ZSP;
    IF NAT_FF1.CAN_RUN_TRT_IPE(NAT_FTTH_OI.P_CODOI_SIMPSON) <> 1 THEN
      OPEN C_INFO_IFC;
      FETCH C_INFO_IFC INTO R_INFO_IFC;
      CLOSE C_INFO_IFC;
      GEN_REBOND( 'FTTH_SIO2_SMP_IPE_OUT', R_INFO_IFC.NOM_FIC, FILEIO_ID,NULL);
    END IF;
  END IF;

  IF NAT_FF1.CAN_RUN_TRT_IPE(NAT_FTTH_OI.P_CODOI_SIMPSON) = 1 THEN
  plog.info('POST TRAITEMENT IPE ZSP Simpson : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    update IPE_FT_ZSP_V30_TMP set condsyndic=substr(condsyndic,1,instr(condsyndic, chr(13))-1)
           where   instr(condsyndic, chr(13))>0 ;

    vCod_Oi := GET_OI(FILEIO_ID);

    --CLEAN_IPE_ZSP_FT_V30; --> Comment gère t on ?

    CHK_N_CREATE_PM_SMP_ZSP_30(NAT_FTTH_OI.P_CODOI_SIMPSON/*,R_CUR.REFERENCEPM*/);
    POS_TRT_IPE_V30(vCod_Oi,'ZSP',FILEIO_ID,NAT_FTTH_OI.P_CODOI_SIMPSON );
    -- Controles commandes ZMD
    -- Apres réception IPE, comparaison sur le nombre de logements PM

    BEGIN
      NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
    EXCEPTION
      WHEN OTHERS THEN
           plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                      'FILEID', FILEIO_ID,
                      'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    END;
    plog.info('POST TRAITEMENT IPE ZSP Simpson : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END IF;
END;

----------------------------------------------------------
-- Post traitement IPE SIEA 3.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
----------------------------------------------------------
PROCEDURE POS_TRT_IPE_IN_SIEA_V30 (FILEIO_ID INTEGER) IS
  vCodOi REF_OI.COD_OI%TYPE;
  vIsConf NUMBER;
BEGIN
  plog.info('POST TRAITEMENT IPE SIEA : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  vCodOi := NAT_FTTH_OI.GET_OI(FILEIO_ID);
  vIsConf := IS_OI_CONF(vCodOi, NAT_FTTH_OI.P_OC_SIEA);
  IF vIsConf = 1 THEN
    CHK_N_CREATE_PM_SIEA_ZMD_30(vCodOi);

    POS_TRT_IPE_V30(vCodOi,'ZMD',FILEIO_ID, NAT_FTTH_OI.P_OC_SIEA );
    -- Controles commandes ZMD
    -- Apres réception IPE, comparaison sur le nombre de logements PM
    BEGIN
      NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
    EXCEPTION
      WHEN OTHERS THEN
           plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                      'FILEID', FILEIO_ID,
                      'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    END;
    plog.info('POST TRAITEMENT IPE SIEA : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  ELSE
   plog.info('POST TRAITEMENT IPE : Début envoie mail rejet',
            'FILEID', FILEIO_ID,
            'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
   NAT_FF1_CTRL_IPE.SEND_MAIL_REJET_IPE(NAT_FTTH_OI.P_OC_SIEA,'ZMD',FILEIO_ID);
   plog.info('POST TRAITEMENT IPE : Fin envoie mail rejet',
            'FILEID', FILEIO_ID,
            'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

   UPDATE SPVION_IPE
      SET NOK_TO_GEN_ELIG = 0
    WHERE FILE_ID         = FILEIO_ID;
  END IF;
  plog.info('POST TRAITEMENT IPE SIEA : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
END;

---------------------------------------------------------
-- Post-traitement de la sous-interface CR Infosyndic 1.0
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
-- Obsolète
---------------------------------------------------------
PROCEDURE POS_TRT_CRSYN_V10 (P_FILE_ID IN INTEGER,
                             P_CODOI   IN REF_OI.COD_OI%TYPE) IS
BEGIN
  NULL;
END;
-----------------------------------------------------------------------------------
-- Post Traitement CR Infosyndic 2.1
-- Obsolète
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRSYN_V21(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                            P_CODOI   IN REF_OI.COD_OI%TYPE) IS
BEGIN
  NULL;
END;

-----------------------------------------------------------------------------------
-- Post Traitement CR Infosyndic 2.2
-----------------------------------------------------------------------------------
/*PROCEDURE POS_TRT_CRSYN_V22(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                            P_CODOI   IN REF_OI.COD_OI%TYPE) IS
V_CUR       SYS_REFCURSOR;
R_CUR       CR_INFSYN_COVA_22_TMP%ROWTYPE;
v_idpm      VARCHAR2(100);
vGeneratedName VARCHAR2(255);
v_opr          VARCHAR2(100);
vRegExp        VARCHAR2(100);
-- récupération de la table temporaire
CURSOR C_GET_TMP IS
  SELECT flx.INFSYN_TMP
    FROM PART_FLX   flx,
         REF_OI_PRM rop,
         REF_OI     roi
   WHERE roi.COD_OI = P_CODOI
     AND rop.COD_OI = roi.COD_OI
     AND rop.PRTCL  = '2.2'
     AND rop.OBS    = 0
     AND flx.COD_PART_FLUX = rop.COD_PART_FLUX;
R_GET_TMP C_GET_TMP%ROWTYPE;
vFoundTmp BOOLEAN;

CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = P_FILE_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
BEGIN
  OPEN C_GET_TMP;
  FETCH C_GET_TMP INTO R_GET_TMP;
  vFoundTmp := C_GET_TMP%FOUND;
  CLOSE C_GET_TMP;

  IF vFoundTmp THEN
    V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(R_GET_TMP.INFSYN_TMP);
    LOOP
      FETCH V_CUR INTO R_CUR;
      EXIT WHEN V_CUR%NOTFOUND;
      DELETE FROM CR_INFOSYNDIC p WHERE p.REFERENCEPM = R_CUR.REFERENCEPM;
      BEGIN
        INSERT INTO CR_INFOSYNDIC VALUES (R_CUR.REFERENCEPM,
                                          TO_DATE(R_CUR.DATENOTIFCRINFOGESTIONNAIRE,'YYYY/MM/DD' ),
                                          R_CUR.REFERENCECOMMANDEPMINTERNEOC,
                                          R_CUR.REFERENCEPRESTATIONPM,
                                          R_CUR.DATE_IMP,
                                          R_CUR.FILE_ID,
                                          R_CUR.TYPEINFOSYNDIC);
         NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_CUR.REFERENCEPM,P_FILE_ID);
         v_idpm := R_CUR.REFERENCEPM;
         NAT_FF1_TRT_FLX.TRT_CR_INFOSYN_IN(P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors L''insertion du fichier INFO SYNNDIC dans la table finale','SQLERRM', SQLERRM);
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_CUR.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_CUR.REFERENCEPM);
      END;
    END LOOP;
    CLOSE V_CUR;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => R_CUR.REFERENCEPM,
                         P_CODOI    => P_CODOI,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
    --
    -- Traitement du rebond des fichiers
    --
    BEGIN
      SELECT NOM_FIC
        INTO vGeneratedName
        FROM FILE_IO
       WHERE FILE_ID =  P_FILE_ID;
      v_opr := PKG_FTTH.GET_OPERATEUR(vGeneratedName);
      SELECT 'INFOSY_'||v_opr||'_'||v_idpm
        INTO vRegExp
        FROM DUAL;
      NAT_IFC_TRT.UPDATE_FILE_REGEXP(P_FILE_ID,UPPER(vRegExp));
      COMMIT;

      GEN_REBOND( 'FTTH_HBCRIS_OUT_SFR', vGeneratedName, P_FILE_ID,R_CUR.REFERENCEPM);
      NAT_FF1_TRT_FLX.TRT_CR_INFOSYN_OUT(P_FILE_ID);
     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors du rebond HBCRIS SFR vers l''OI','SQLERRM', SQLERRM);
     END;
  END IF;


END;*/

-----------------------------------------------------------------------------------
-- Post Traitement CR Infosyndic 3.0
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRSYN_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                            P_CODOI   IN REF_OI.COD_OI%TYPE) IS
V_CUR       SYS_REFCURSOR;
R_CUR       CR_INFSYN_FT_30_TMP%ROWTYPE;
v_idpm      VARCHAR2(100);
vGeneratedName VARCHAR2(255);
v_opr          VARCHAR2(100);
vRegExp        VARCHAR2(100);
-- récupération de la table temporaire
CURSOR C_GET_TMP IS
  SELECT flx.INFSYN_TMP
    FROM PART_FLX   flx,
         REF_OI_PRM rop,
         REF_OI     roi
   WHERE roi.COD_OI = P_CODOI
     AND rop.COD_OI = roi.COD_OI
     AND rop.PRTCL  = '3.0'
     AND rop.OBS    = 0
     AND flx.COD_PART_FLUX = rop.COD_PART_FLUX;
R_GET_TMP C_GET_TMP%ROWTYPE;
vFoundTmp BOOLEAN;

CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = P_FILE_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
BEGIN
  OPEN C_GET_TMP;
  FETCH C_GET_TMP INTO R_GET_TMP;
  vFoundTmp := C_GET_TMP%FOUND;
  CLOSE C_GET_TMP;

  IF vFoundTmp THEN
    V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(R_GET_TMP.INFSYN_TMP);
    LOOP
      FETCH V_CUR INTO R_CUR;
      EXIT WHEN V_CUR%NOTFOUND;
      DELETE FROM CR_INFOSYNDIC p WHERE p.REFERENCEPM = R_CUR.REFERENCEPM;
      BEGIN
        INSERT INTO CR_INFOSYNDIC VALUES (R_CUR.REFERENCEPM,
                                          TO_DATE(R_CUR.DATENOTIFCRINFOGESTIONNAIRE,'YYYY/MM/DD' ),
                                          R_CUR.REFERENCECOMMANDEPMINTERNEOC,
                                          R_CUR.REFERENCEPRESTATIONPM,
                                          R_CUR.DATE_IMP,
                                          R_CUR.FILE_ID,
                                          R_CUR.TYPEINFOSYNDIC);
         NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_CUR.REFERENCEPM,P_FILE_ID);
         v_idpm := R_CUR.REFERENCEPM;
         NAT_FF1_TRT_FLX.TRT_CR_INFOSYN_IN(P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors L''insertion du fichier INFO SYNNDIC dans la table finale','SQLERRM', SQLERRM);
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_CUR.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_CUR.REFERENCEPM);
      END;
    END LOOP;
    CLOSE V_CUR;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => v_idpm,
                         P_CODOI    => P_CODOI,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
    --
    -- Traitement du rebond des fichiers
    --
    BEGIN
      SELECT NOM_FIC
        INTO vGeneratedName
        FROM FILE_IO
       WHERE FILE_ID =  P_FILE_ID;
      v_opr := PKG_FTTH.GET_OPERATEUR(vGeneratedName);
      SELECT 'INFOSY_'||v_opr||'_'||v_idpm
        INTO vRegExp
        FROM DUAL;
      NAT_IFC_TRT.UPDATE_FILE_REGEXP(P_FILE_ID,UPPER(vRegExp));
      COMMIT;

      GEN_REBOND( 'FTTH_REBOND_CRINFOSYN_HB', vGeneratedName, P_FILE_ID,R_CUR.REFERENCEPM);
      NAT_FF1_TRT_FLX.TRT_CR_INFOSYN_OUT(P_FILE_ID);
     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors du rebond HBCRIS SFR vers l''OI','SQLERRM', SQLERRM);
     END;
  END IF;


END;



------------------------------------------------------------------------------------------------
-- Post traitement du CR Info syn COVA 3.0
-- %Param P_FILE_ID    Identifiant informatique du fichier
------------------------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRSYN_IN_COVA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_CRSYN_V30(P_FILE_ID, vCodOi);
END;
------------------------------------------------------------------------------------------------
-- Post traitement du CR Info syn FTEL 3.0
-- %Param P_FILE_ID    Identifiant informatique du fichier
------------------------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRSYN_IN_FTEL_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_CRSYN_V30(P_FILE_ID, vCodOi);
END;

------------------------------------------------------------------------------------------------
-- Post traitement du CR Info syn SFRA 3.0
-- %Param P_FILE_ID    Identifiant informatique du fichier
------------------------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRSYN_IN_SFRA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
BEGIN
  vCod_Oi := GET_OI(P_FILE_ID);
  POS_TRT_CRSYN_V30(P_FILE_ID, vCod_Oi);
END;

------------------------------------------------------------------------------------------------
-- Post traitement du CR Info syn NUME 3.0
-- %Param P_FILE_ID    Identifiant informatique du fichier
------------------------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRSYN_IN_NUME_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  POS_TRT_CRSYN_V30(P_FILE_ID, 'NUME');
END;

------------------------------------------------------------------------------------------------
-- Post traitement du CR Info syn SEQU 3.0
-- %Param P_FILE_ID    Identifiant informatique du fichier
------------------------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRSYN_IN_AXIO_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_CRSYN_V30(P_FILE_ID, vCodOi);
END;

------------------------------------------------------------------------------------------------
-- Post traitement du CR Info syn FREE 3.0
-- %Param P_FILE_ID    Identifiant informatique du fichier
------------------------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRSYN_IN_FREE_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  POS_TRT_CRSYN_V30(P_FILE_ID, 'FREE');
END;

------------------------------------------------------------------------------------------------
-- Post traitement du CR Info syn ALTI 3.0
-- %Param P_FILE_ID    Identifiant informatique du fichier
------------------------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRSYN_IN_ALTI_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_CRSYN_V30(P_FILE_ID, vCodOi);
END;

------------------------------------------------------------------------------------------------
-- Post traitement du CR Info syn TDF 3.0
-- %Param P_FILE_ID    Identifiant informatique du fichier
------------------------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRSYN_IN_TDF_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_CRSYN_V30(P_FILE_ID, vCodOi);
END;

------------------------------------------------------------------------------------------------
-- Post traitement du CR Info syn Simpson 3.0
-- %Param P_FILE_ID    Identifiant informatique du fichier
------------------------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRSYN_IN_SMP_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_CRSYN_V30(P_FILE_ID, vCodOi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement Lettre Infosyndic 2.1
-----------------------------------------------------------------------------------
/*PROCEDURE POS_TRT_LTRSYN_V21(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                             P_CODOI   IN REF_OI.COD_OI%TYPE) IS
CURSOR C_FILE_INFO IS
  SELECT fio.NOM_FIC,
         regexp_replace(REGEXP_SUBSTR(fio.NOM_FIC,'PM_(.*.)_INFOSY_V21'),'(PM_|_INFOSY_V21)','') AS IDPM
    FROM FILE_IO fio
   WHERE fio.FILE_ID = P_FILE_ID;
R_FILE_INFO C_FILE_INFO%ROWTYPE;
BEGIN
  OPEN C_FILE_INFO;
  FETCH C_FILE_INFO INTO R_FILE_INFO;
  CLOSE C_FILE_INFO;

  NAT_IFC_TRT.UPDATE_FILE_REGEXP(P_FILE_ID,UPPER('INFOSY_PJ_'||P_CODOI||'_'||R_FILE_INFO.IDPM));

  -- Insertion des dans la table PJ
  INSERT INTO FTH_PJ (FTH_PJ_ID,
                      TYP,
                      DATPJ,
                      FILE_ID,
                      IDPM,
                      FILE_ID_PRT,
                      FILE_NET_ID,
                      NOMPJ)
  VALUES(SEQ_FTH_PJ.NEXTVAL,
         'SYN',
         sysdate,
         P_FILE_ID,
         R_FILE_INFO.IDPM,
         NULL,
         NULL,
         R_FILE_INFO.NOM_FIC);

  BEGIN
    NAT_FF1_TRT_FLX.TRT_FTH_PJ(P_FILE_ID);
    GEN_REBOND( 'FTTH_HBCRIS_OUT_SFR', R_FILE_INFO.NOM_FIC, P_FILE_ID);
  EXCEPTION
    WHEN OTHERS THEN
      plog.ERROR('Erreur lors du du traitement de la lettre Info syndic','SQLERRM', SQLERRM);
  END;

END;

-----------------------------------------------------------------------------------
-- Post Traitement Lettre Infosyndic 2.2
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_LTRSYN_V22(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                             P_CODOI   IN REF_OI.COD_OI%TYPE) IS
CURSOR C_FILE_INFO IS
  SELECT fio.NOM_FIC,
         regexp_replace(REGEXP_SUBSTR(fio.NOM_FIC,'_PM_(.*.)_INFOSY_V22'),'(_PM_|_INFOSY_V22)','') AS IDPM,
         fio.IFC_ID,
         fio.PRM_ID
    FROM FILE_IO fio
   WHERE fio.FILE_ID = P_FILE_ID;
R_FILE_INFO C_FILE_INFO%ROWTYPE;

BEGIN
  OPEN C_FILE_INFO;
  FETCH C_FILE_INFO INTO R_FILE_INFO;
  CLOSE C_FILE_INFO;

  NAT_IFC_TRT.UPDATE_FILE_REGEXP(P_FILE_ID,UPPER('INFOSY_PJ_'||P_CODOI||'_'||R_FILE_INFO.IDPM));

  -- Insertion des dans la table PJ
  INSERT INTO FTH_PJ (FTH_PJ_ID,
                      TYP,
                      DATPJ,
                      FILE_ID,
                      IDPM,
                      FILE_ID_PRT,
                      FILE_NET_ID,
                      NOMPJ)
  VALUES(SEQ_FTH_PJ.NEXTVAL,
         'SYN',
         sysdate,
         P_FILE_ID,
         R_FILE_INFO.IDPM,
         NULL,
         NULL,
         R_FILE_INFO.NOM_FIC);


  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => R_FILE_INFO.IDPM,
                       P_CODOI    => P_CODOI,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_FILE_INFO.IFC_ID,
                       P_PRM_ID   => R_FILE_INFO.PRM_ID);

  BEGIN
    NAT_FF1_TRT_FLX.TRT_FTH_PJ(P_FILE_ID);
    --Contrôle de la présence de la lettre Info Syndic
    NAT_FF1_CTRL_FEP.CTRL_ABS_INFO_SYN (R_FILE_INFO.IDPM);

    GEN_REBOND( 'FTTH_HBCRIS_OUT_SFR', R_FILE_INFO.NOM_FIC, P_FILE_ID, R_FILE_INFO.IDPM);
  EXCEPTION
    WHEN OTHERS THEN
      plog.ERROR('Erreur lors du du traitement de la lettre Info syndic','SQLERRM', SQLERRM);
  END;

END;*/

-----------------------------------------------------------------------------------
-- Post Traitement Lettre Infosyndic 3.0
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_LTRSYN_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                             P_CODOI   IN REF_OI.COD_OI%TYPE) IS
CURSOR C_FILE_INFO IS
  SELECT fio.NOM_FIC,
         regexp_replace(REGEXP_SUBSTR(fio.NOM_FIC,'_PM_(.*.)_INFOSY_V30'),'(_PM_|_INFOSY_V30)','') AS IDPM,
         fio.IFC_ID,
         fio.PRM_ID
    FROM FILE_IO fio
   WHERE fio.FILE_ID = P_FILE_ID;
R_FILE_INFO C_FILE_INFO%ROWTYPE;

CURSOR C_PRJPM (vIDPM PM.IDPM%TYPE) IS
  SELECT p.PRJPM_ID
    FROM PRJPM p,
         PM pm
   WHERE pm.IDPM = vIDPM
     AND p.GEO_ID = pm.GEO_ID;
vPRJPM_ID PRJPM.PRJPM_ID%TYPE;

BEGIN
  OPEN C_FILE_INFO;
  FETCH C_FILE_INFO INTO R_FILE_INFO;
  CLOSE C_FILE_INFO;

  OPEN C_PRJPM(R_FILE_INFO.IDPM);
  FETCH C_PRJPM INTO vPRJPM_ID;
  CLOSE C_PRJPM;

  NAT_IFC_TRT.UPDATE_FILE_REGEXP(P_FILE_ID,UPPER('INFOSY_PJ_'||P_CODOI||'_'||R_FILE_INFO.IDPM));

  -- Insertion des dans la table PJ
  INSERT INTO FTH_PJ (FTH_PJ_ID,
                      TYP,
                      DATPJ,
                      FILE_ID,
                      IDPM,
                      FILE_ID_PRT,
                      FILE_NET_ID,
                      NOMPJ)
  VALUES(SEQ_FTH_PJ.NEXTVAL,
         'SYN',
         sysdate,
         P_FILE_ID,
         R_FILE_INFO.IDPM,
         NULL,
         NULL,
         R_FILE_INFO.NOM_FIC);

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => R_FILE_INFO.IDPM,
                       P_CODOI    => P_CODOI,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_FILE_INFO.IFC_ID,
                       P_PRM_ID   => R_FILE_INFO.PRM_ID);

  BEGIN
    NAT_FF1_TRT_FLX.TRT_FTH_PJ(P_FILE_ID);
    --Contrôle de la présence de la lettre Info Syndic
    NAT_FF1_CTRL_FEP.CTRL_ABS_INFO_SYN (R_FILE_INFO.IDPM);

    --GEN_REBOND( 'FTTH_HBCRIS_OUT_SFR', R_FILE_INFO.NOM_FIC, P_FILE_ID,R_FILE_INFO.IDPM); 20/02 --> mail Albert
  EXCEPTION
    WHEN OTHERS THEN
      plog.ERROR('Erreur lors du du traitement de la lettre Info syndic','SQLERRM', SQLERRM);
  END;

  IF vPRJPM_ID IS NOT NULL THEN
    NAT_FF1.AVANCMT_PRJ(vPRJPM_ID);
  END IF;
END;

-----------------------------------------------------------------------------------
-- Post Traitement Lettre COVAGE Infosyndic 3.0
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_LTRSYN_IN_COVA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_LTRSYN_V30(P_FILE_ID,vCodOi);
END;
-----------------------------------------------------------------------------------
-- Post Traitement Lettre FTEL Infosyndic 3.0
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_LTRSYN_IN_FTEL_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_LTRSYN_V30(P_FILE_ID,vCodOi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement Lettre SFRA Infosyndic 3.0
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_LTRSYN_IN_SFRA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
BEGIN
  vCod_Oi := GET_OI(P_FILE_ID);
  POS_TRT_LTRSYN_V30(P_FILE_ID,vCod_Oi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement Lettre NUME Infosyndic 3.0
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_LTRSYN_IN_NUME_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  POS_TRT_LTRSYN_V30(P_FILE_ID,'NUME');
END;

-----------------------------------------------------------------------------------
-- Post Traitement Lettre AXIONE Infosyndic 3.0
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_LTRSYN_IN_AXIO_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_LTRSYN_V30(P_FILE_ID,vCodOi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement Lettre FREE Infosyndic 3.0
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_LTRSYN_IN_FREE_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  POS_TRT_LTRSYN_V30(P_FILE_ID,'FREE');
END;

-----------------------------------------------------------------------------------
-- Post Traitement Lettre ALTI Infosyndic 3.0
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_LTRSYN_IN_ALTI_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_LTRSYN_V30(P_FILE_ID,vCodOi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement Lettre TDF Infosyndic 3.0
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_LTRSYN_IN_TDF_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_LTRSYN_V30(P_FILE_ID,vCodOi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement Lettre Simpson Infosyndic 3.0
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_LTRSYN_IN_SMP_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_LTRSYN_V30(P_FILE_ID,vCodOi);
END;

----------------------------------------------------------
-- CLEAN_CRMAD_ZMD : Source CR MAD
----------------------------------------------------------

PROCEDURE CLEAN_CRMAD_ZMD_OF_V30 (P_COD_OI PM.COD_OI%TYPE) IS

BEGIN
  DELETE FROM CRD_MAD_PM_FT_30_TMP it
        WHERE NOT EXISTS (SELECT 1
                            FROM SOUSCRIPTION s
                           WHERE it.CODEINSEEPM = s.COD_INSEE
                             AND s.COD_OI       = P_COD_OI);

    DELETE FROM CRD_MAD_PM_FT_30_TMP it
          WHERE it.ETATPM IS NULL;
END;

PROCEDURE CLEAN_CRMAD_ZMD_SMP_V30 (P_COD_OI PM.COD_OI%TYPE) IS

BEGIN
  DELETE FROM CRD_MAD_PM_SMP_30_TMP it
        WHERE NOT EXISTS (SELECT 1
                            FROM SOUSCRIPTION s
                           WHERE it.CODEINSEEPM = s.COD_INSEE
                             AND s.COD_OI       = P_COD_OI);

    DELETE FROM CRD_MAD_PM_SMP_30_TMP it
          WHERE it.ETATPM IS NULL;
END;

-----------------------------------------------------------------------------------
-- Post Traitement CRMAD PM
-----------------------------------------------------------------------------------
-- 1.0
-- Obsolète
PROCEDURE POS_TRT_CRMADPM_V10 (P_FILE_ID IN INTEGER,
                               P_COD_OI  IN REF_OI.COD_OI%TYPE)IS
BEGIN
  NULL;
END;

-- 2.1
-- Obsolète
PROCEDURE POS_TRT_CRMADPM_V21(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                              P_CODOI   IN REF_OI.COD_OI%TYPE,
                              P_TYPZON  IN VARCHAR2) IS
BEGIN
  NULL;
END;

-- 2.2
/*PROCEDURE POS_TRT_CRMADPM_V22(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                              P_CODOI   IN REF_OI.COD_OI%TYPE,
                              P_TYPZON  IN VARCHAR2) IS

rep                 VARCHAR2(255);
vRegExp             VARCHAR2(100);
v_idpm              VARCHAR2(100);
v_refint            CRD_MAD_PM.REFERENCECOMMANDEPMNTERNEOC%TYPE;
vETATCRCOMMANDEPM   CRD_MAD_PM.ETATCRCOMMANDEPM%TYPE;
V_CUR               SYS_REFCURSOR;
R_CUR               CRD_MAD_PM_COVA_22_TMP%ROWTYPE;
vCOD_OI             PM.COD_OI%TYPE;
vTYPECOMMANDEPM     CRD_MAD_PM.TYPECOMMANDEPM%TYPE;
vidTrt              NUMBER;
vIndice             NUMBER;
vNomFic             FILE_IO.NOM_FIC%TYPE;
vIdPmTrt            CRD_MAD_PM_COVA_22_TMP.REFERENCEPM%TYPE;
vImm_id             IMMEUBLE.IMM_ID%TYPE;
vIS_NEW_FOR_OI_ONLY NUMBER;
vAlerteOpenId6      NUMBER;
vAlerteOpenId7      NUMBER;
vInseePM            CRD_MAD_PM.CODEINSEEPM%TYPE;
vCATRACLGMT_CAL     ADR_IMM_OI.CATRACLGMT_CAL%TYPE;
CURSOR C_DMD_INFO(P_IDPM IN DMD_INFO.IDPM%TYPE) IS
  SELECT dmd.DMD_INFO_ID
    FROM ETA_DMD_INFO   eta,
         DMD_INFO       dmd
   WHERE dmd.IDPM            = P_IDPM
     AND eta.ETA_DMD_INFO_ID = dmd.ETA_DMD_INFO_ID
     AND eta.ETA_DMD_INFO NOT IN(NAT_FF1_DMD_INFO.A_DEMANDER,NAT_FF1_DMD_INFO.MIS_A_JOUR);
vDMD_INFO_ID    DMD_INFO.DMD_INFO_ID%TYPE;
vPM_DPL_MADKO NUMBER;
vCTRL_ADR_REG_CRMAD NUMBER;
vCtrl_ABN_OI NUMBER;
-- récupération de la table temporaire
CURSOR C_GET_TMP IS
  SELECT flx.CRMADPM_TMP,
         flx.COD_PART_FLUX
    FROM PART_FLX   flx,
         REF_OI_PRM rop,
         REF_OI     roi
   WHERE roi.COD_OI = P_CODOI
     AND rop.COD_OI = roi.COD_OI
     AND rop.PRTCL  = '2.2'
     AND rop.OBS    = 0
     AND flx.COD_PART_FLUX = rop.COD_PART_FLUX;
R_GET_TMP C_GET_TMP%ROWTYPE;
vFoundTmp BOOLEAN;
vIfcOutSig VARCHAR2(50);
-- Vérification du Partenaire flux et récupération du SIREN
CURSOR C_VERIF_AXIO IS
  SELECT r.COD_OI,
         r.SIREN
    FROM REF_OI_PRM rp,
         REF_OI     r
   WHERE r.COD_OI  = P_CODOI
     AND rp.COD_OI = r.COD_OI
     AND rp.OBS    = 0
     AND rp.COD_PART_FLUX = 'AXIO';
R_VERIF_AXIO C_VERIF_AXIO%ROWTYPE;
vFoundAxio   BOOLEAN;

CURSOR C_VERIF_COVA IS
  SELECT r.COD_OI,
         r.SIREN
    FROM REF_OI_PRM rp,
         REF_OI     r
   WHERE r.COD_OI  = P_CODOI
     AND rp.COD_OI = r.COD_OI
     AND rp.OBS    = 0
     AND rp.COD_PART_FLUX = 'COVA';
R_VERIF_COVA C_VERIF_COVA%ROWTYPE;
vFoundCova   BOOLEAN;


CURSOR C_VERIF_PRJ (vIDPM VARCHAR2) IS
SELECT prj.PART_ADD
  FROM ETAPRJPM eta,
       PRJPM    prj,
       PM       pm
 WHERE pm.IDPM         = vIDPM
   AND prj.GEO_ID      = pm.GEO_ID
   AND eta.ETAPRJPM_ID = prj.ETAPRJPM_ID
   AND eta.ETAPRJPM    <> 'ABN';
R_VERIF_PRJ C_VERIF_PRJ%ROWTYPE;
vFoundPrj BOOLEAN;

CURSOR C_PART_FLUX IS
  SELECT oi_prm.COD_PART_FLUX
    FROM REF_OI_PRM oi_prm
   WHERE oi_prm.COD_OI = P_CODOI
     AND oi_prm.obs = 0;
R_PART_FLUX C_PART_FLUX%ROWTYPE;
vCodPartFlux PART_FLX.COD_PART_FLUX%TYPE;

CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = P_FILE_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;

CURSOR C_INFO_IFC_OUT(v_id_trt_ifc NUMBER) IS
  SELECT f.FILE_ID,
         f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.ID_TRT_IFC = v_id_trt_ifc;
R_INFO_IFC_OUT C_INFO_IFC_OUT%ROWTYPE;

vId_Preparation NUMBER;
v_Fileio_OUT    FILE_IO.FILE_ID%TYPE;

vNomIfc         VARCHAR2(255);
BEGIN
  -- Récupération des infos sur le fichier
  SELECT NOM_FIC,
         REP_FIC
    INTO vNomFic,
         rep
    FROM FILE_IO
   WHERE FILE_ID =  P_FILE_ID;
  -- Récupératoin de la table temporaire
  OPEN C_GET_TMP;
  FETCH C_GET_TMP INTO R_GET_TMP;
  vFoundTmp := C_GET_TMP%FOUND;
  CLOSE C_GET_TMP;

  IF vFoundTmp THEN
    V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(R_GET_TMP.CRMADPM_TMP);
    LOOP
      FETCH V_CUR INTO R_CUR;
      EXIT WHEN V_CUR%NOTFOUND;
      v_idpm            := R_CUR.REFERENCEPM;
      v_refint          := R_CUR.REFERENCECOMMANDEPMNTERNEOC;
      vETATCRCOMMANDEPM := R_CUR.ETATCRCOMMANDEPM;
      vTYPECOMMANDEPM   := R_CUR.TYPECOMMANDEPM ;
    END LOOP;
  END IF;

  V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(R_GET_TMP.CRMADPM_TMP);

  IF v_idpm IS NOT NULL THEN
    -- Suppression des informations CRMAD du referentiel pour ce PM/extension (attention il n'y a qu'un CR MAD pour tout le PM)
    DELETE FROM CRD_MAD_PM P
     WHERE P.REFERENCEPM = v_idpm;

     --Les contôles
      -------------------Alerte 5--------------------------------------------------------------------
      -- Si létat CR MAD est KO et le PM est à l'état déployé dans la bsse Adresse (à partir de l'IPE)
        --> Aors création l'alerte
      IF vETATCRCOMMANDEPM = 'KO' THEN
        vPM_DPL_MADKO := NAT_FF1_CR_MAD_PM.CTRL_PM_DPL_MADKO(v_idpm);
        IF P_TYPZON = 'ZMD' AND P_CODOI = 'FTEL' THEN
          -- Fermeture alerte si on reçoit un CR MAD KO sur ce PM
          NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS_CLS(v_idpm, 'AMI');
        END IF;
      END IF;

    LOOP
      FETCH V_CUR INTO R_CUR;
      EXIT WHEN V_CUR%NOTFOUND;
      BEGIN
        -------------------------------------------------------------------------------------------------
        -- Contrôle de présence
        --> On vérifie si l'immeuble n'existe pas pour cette OI
          --> Si l'immeuble n'existe pas pour cette OI, on vérifie si l'immeuble existe pour une autre OI
          --> Si c'est la cas, on ne va pas insérer une nouvelle ligne dans la table des immeubles
        vImm_id := NAT_FF1_TRT_FLX.GET_IMM_FROM_ADR(P_CODOI,
                                                    R_CUR.CODEINSEEIMMEUBLE,
                                                    R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                                    R_CUR.NUMEROVOIEIMMEUBLE,
                                                    R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                    R_CUR.IDENTIFIANTIMMEUBLE,
                                                    R_CUR.BATIMENTIMMEUBLE,
                                                    R_CUR.REFERENCEPM,
                                                    R_CUR.CODEADRESSEIMMEUBLE,
                                                    vIS_NEW_FOR_OI_ONLY);

        IF (vImm_id IS NULL) OR (vImm_id IS NOT NULL AND vIS_NEW_FOR_OI_ONLY = 1)  THEN --> On est sure que l'immeuble n'exite pas
          IF vImm_id IS NULL THEN
            -- Création de l'immeuble
            NAT_FF1_TRT_FLX.NEW_IMMEUBLE(vImm_id,
                                         R_CUR.CODEADRESSEIMMEUBLE,
                                         R_GET_TMP.CRMADPM_TMP);
          ELSE
            -- MAJ de l'info adresse
            NAT_FF1_TRT_FLX.SET_IMMEUBLE(vImm_id,
                                         R_CUR.CODEADRESSEIMMEUBLE,
                                         R_GET_TMP.CRMADPM_TMP);
          END IF;

          vCATRACLGMT_CAL := NAT_FTTH_OI.GET_CRL(R_CUR.CODEINSEEIMMEUBLE,
                                                       R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                                       R_CUR.NUMEROVOIEIMMEUBLE,
                                                       R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                       R_CUR.IDENTIFIANTIMMEUBLE,
                                                       R_CUR.BATIMENTIMMEUBLE,
                                                       R_CUR.REFERENCEPM,
                                                       R_CUR.CODEADRESSEIMMEUBLE);

          -- Insertion de l'adresse :
          NAT_FTTH_OI.INS_ADR_IMM_OI(P_REFERENCEPM                    => R_CUR.REFERENCEPM,
                                       P_IMM_ID                       => vImm_id,
                                       P_IDENTIFIANTIMMEUBLE          => R_CUR.IDENTIFIANTIMMEUBLE,
                                       P_CODERIVOLIIMMEUBLE           => R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                       P_CODEINSEEIMMEUBLE            => R_CUR.CODEINSEEIMMEUBLE,
                                       P_CODEPOSTALIMMEUBLE           => R_CUR.CODEPOSTALIMMEUBLE,
                                       P_VILLEIMMEUBLE                => R_CUR.COMMUNEIMMEUBLE,
                                       P_CODEADRESSEIMMEUBLE          => R_CUR.CODEADRESSEIMMEUBLE,
                                       P_TYPEVOIEIMMEUBLE             => R_CUR.TYPEVOIEIMMEUBLE,
                                       P_NOMVOIEIMMEUBLE              => R_CUR.NOMVOIEIMMEUBLE,
                                       P_NUMEROVOIEIMMEUBLE           => R_CUR.NUMEROVOIEIMMEUBLE,
                                       P_COMPLEMENTNUMEROVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                       P_BATIMENTIMMEUBLE             => R_CUR.BATIMENTIMMEUBLE,
                                       P_NBRELOGEMENTSINFOPREALABLES  => TO_NUMBER(R_CUR.NOMBRELOGEMENTSADRESSEIPE),
                                       P_ETATIMMEUBLE                 => R_CUR.ETATIMMEUBLE,
                                       P_ETATPM                       => R_CUR.ETATPM,
                                       P_DATEINSTALLATIONPM           => TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD') ,
                                       P_CODERIVOLIPM                 => R_CUR.CODEVOIERIVOLIPM,
                                       P_CODEINSEEPM                  => R_CUR.CODEINSEEPM,
                                       P_CODEPOSTALPM                 => R_CUR.CODEPOSTALPM,
                                       P_VILLEPM                      => R_CUR.COMMUNEPM,
                                       P_CODEADRESSEPM                => R_CUR.CODEADRESSEPM,
                                       P_TYPEVOIEPM                   => R_CUR.TYPEVOIEPM,
                                       P_NOMVOIEPM                    => R_CUR.NOMVOIEPM,
                                       P_NUMEROVOIEPM                 => R_CUR.NUMEROVOIEPM,
                                       P_COMPLEMENTVOIEPM             => R_CUR.COMPLEMENTVOIEPM,
                                       P_DATE_IMP                     => R_CUR.DATE_IMP,
                                       P_FILE_ID                      => R_CUR.FILE_ID,
                                       P_BATIMENTPM                   => R_CUR.BATIMENTPM,
                                       P_CODOI                        => P_CODOI,
                                       P_TYPZON                       => P_TYPZON,
                                       P_DATENVOSSFAI                 => NULL,
                                       P_NOMBREPMTECHNIQUES           => TO_NUMBER(R_CUR.NOMBREPMTECHNIQUES),
                                       P_TYPEIMMEUBLE                 => R_CUR.TYPEIMMEUBLE,
                                       P_TYPEPROJECTIONGEOGRAPHIQUE   => R_CUR.TYPEPROJECTIONGEOGRAPHIQUE,
                                       P_COORDONNEEPMX                => R_CUR.COORDONNEEPMX,
                                       P_COORDONNEEPMY                => R_CUR.COORDONNEEPMY,
                                       P_COORDONNEEIMMEUBLEX          => R_CUR.COORDONNEEIMMEUBLEX,
                                       P_COORDONNEEIMMEUBLEY          => R_CUR.COORDONNEEIMMEUBLEY,
                                       P_TYPEZONE                     => R_CUR.TYPEZONE,
                                       P_BLACKLIST                    => 'NON',
                                       P_MAJ_OSSF                     => 1,
                                       P_ETAIMMSIR                    => 'A',
                                       P_SRCADR                       => 'MAD',
                                       P_ACRDGESTNAIREIMM             => R_CUR.ACCORDGESTIONNAIREIMMEUBLE,
                                       P_HEXABTL                      => NULL,
                                       P_DATEMAJHEXABTL               => NULL,
                                       P_TYPEINGENIERIE               => R_CUR.TYPEINGENIERIE,
                                       P_DATECABLAGEADRESSE           => TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD'),
                                       P_TYPRACCOPBPTO                => R_CUR.TYPRACCOPBPTO,
                                       P_TYPPBO                       => R_CUR.TYPEPBO,
                                       P_DATEMISEENSERVICECOMEPM      => TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD'),
                                       P_DATMESCOMIMM                 => TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD'),
                                       P_DATDEBACPTCMDACSS            => TO_DATE(R_CUR.DATDEBACPTCMDACSS,'YYYY/MM/DD'),
                                       P_TYPEEMPLACEMENTPM            => NULL,
                                       P_CATRACLGMT_CAL               => vCATRACLGMT_CAL);

          NAT_FF1_CTRL_ADR.CLS_ADR_REG(P_COD_OI              => P_CODOI,
                                       P_IDPM                => R_CUR.REFERENCEPM,
                                       P_CODEADRESSEIMMEUBLE => R_CUR.CODEADRESSEIMMEUBLE,
                                       P_CODEINSEEIMMEUBLE   => R_CUR.CODEINSEEIMMEUBLE,
                                       P_CODERIVOLIIMMEUBLE  => R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                       P_ETATIMMEUBLE        => PKG_TOOLS.TRANSLATE(UPPER(R_CUR.ETATIMMEUBLE)),
                                       P_ETATPM              => PKG_TOOLS.TRANSLATE(UPPER(R_CUR.ETATPM)),
                                       P_NUMEROVOIEIMMEUBLE  => R_CUR.NUMEROVOIEIMMEUBLE,
                                       P_CPLMTNUMVOIEIMM     => PKG_TOOLS.TRANSLATE(UPPER(R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE)),
                                       P_IDENTIFIANTIMMEUBLE => R_CUR.IDENTIFIANTIMMEUBLE,
                                       P_BATIMENTIMMEUBLE    => PKG_TOOLS.TRANSLATE(UPPER(R_CUR.BATIMENTIMMEUBLE)));

        ELSE --> Dans le cas où l'immeuble existe déjà
          -- MAJ de l'info adresse
          -------------------------------Cloture des alertes----------------------------------
          --> alerte 6 : Cloture si l'adresse fait l'objet de cette alerte
          vAlerteOpenId6 := NAT_FF1_ADR.VERIF_ALRT_OPEN(R_CUR.CODEADRESSEIMMEUBLE,
                                                        R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                                        R_CUR.CODEINSEEIMMEUBLE,
                                                        NAT_FF1_CTRL_ADR.ID_PRM_DPL_ECD,
                                                        R_CUR.NUMEROVOIEIMMEUBLE,
                                                        R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                        R_CUR.IDENTIFIANTIMMEUBLE,
                                                        R_CUR.BATIMENTIMMEUBLE);
          IF vAlerteOpenId6 <> 0 THEN --> On crée une alerte que s'il n'existe pas déjà une alerte
               NAT_FF1_ADR.CLOSE_ALRT_ADR(vAlerteOpenId6,
                                          'MAD'
                                          );
          END IF;
          --> alerte 7 : Cloture si l'adresse fait l'objet de cette alerte
          vAlerteOpenId7 := NAT_FF1_ADR.VERIF_ALRT_OPEN(R_CUR.CODEADRESSEIMMEUBLE,
                                                        R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                                        R_CUR.CODEINSEEIMMEUBLE,
                                                        NAT_FF1_CTRL_ADR.ID_PRM_DPL_ABS,
                                                        R_CUR.NUMEROVOIEIMMEUBLE,
                                                        R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                        R_CUR.IDENTIFIANTIMMEUBLE,
                                                        R_CUR.BATIMENTIMMEUBLE);
          IF vAlerteOpenId7 <> 0 THEN --> On crée une alerte que s'il n'existe pas déjà une alerte
            NAT_FF1_ADR.CLOSE_ALRT_ADR(vAlerteOpenId7,
                                       'MAD'
                                       );
          END IF;
          --------------------------------------------------------------------------------------
          NAT_FF1_TRT_FLX.SET_IMMEUBLE(vImm_id,
                                       R_CUR.CODEADRESSEIMMEUBLE,
                                       R_GET_TMP.CRMADPM_TMP);
          NAT_FTTH_OI.SET_ADR_IMM_OI(P_REFERENCEPM                  => R_CUR.REFERENCEPM,
                                     P_IMM_ID                       => vImm_id,
                                     P_IDENTIFIANTIMMEUBLE          => R_CUR.IDENTIFIANTIMMEUBLE,
                                     P_CODERIVOLIIMMEUBLE           => R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                     P_CODEINSEEIMMEUBLE            => R_CUR.CODEINSEEIMMEUBLE,
                                     P_CODEPOSTALIMMEUBLE           => R_CUR.CODEPOSTALIMMEUBLE,
                                     P_VILLEIMMEUBLE                => R_CUR.COMMUNEIMMEUBLE,
                                     P_CODEADRESSEIMMEUBLE          => R_CUR.CODEADRESSEIMMEUBLE,
                                     P_TYPEVOIEIMMEUBLE             => R_CUR.TYPEVOIEIMMEUBLE,
                                     P_NOMVOIEIMMEUBLE              => R_CUR.NOMVOIEIMMEUBLE,
                                     P_NUMEROVOIEIMMEUBLE           => R_CUR.NUMEROVOIEIMMEUBLE,
                                     P_COMPLEMENTNUMEROVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                     P_BATIMENTIMMEUBLE             => R_CUR.BATIMENTIMMEUBLE,
                                     P_NBRELOGEMENTSINFOPREALABLES  => TO_NUMBER(R_CUR.NOMBRELOGEMENTSADRESSEIPE),
                                     P_ETATIMMEUBLE                 => R_CUR.ETATIMMEUBLE,
                                     P_ETATPM                       => R_CUR.ETATPM,
                                     P_DATEINSTALLATIONPM           => TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD'),
                                     P_CODERIVOLIPM                 => R_CUR.CODEVOIERIVOLIPM,
                                     P_CODEINSEEPM                  => R_CUR.CODEINSEEPM,
                                     P_CODEPOSTALPM                 => R_CUR.CODEPOSTALPM,
                                     P_VILLEPM                      => R_CUR.COMMUNEPM,
                                     P_CODEADRESSEPM                => R_CUR.CODEADRESSEPM,
                                     P_TYPEVOIEPM                   => R_CUR.TYPEVOIEPM,
                                     P_NOMVOIEPM                    => R_CUR.NOMVOIEPM,
                                     P_NUMEROVOIEPM                 => R_CUR.NUMEROVOIEPM,
                                     P_COMPLEMENTVOIEPM             => R_CUR.COMPLEMENTVOIEPM,
                                     P_DATE_IMP                     => R_CUR.DATE_IMP,
                                     P_FILE_ID                      => R_CUR.FILE_ID,
                                     P_BATIMENTPM                   => R_CUR.BATIMENTPM,
                                     P_CODOI                        => P_CODOI,
                                     P_TYPZON                       => P_TYPZON,
                                     P_DATENVOSSFAI                 => NULL,
                                     P_NOMBREPMTECHNIQUES           => TO_NUMBER(R_CUR.NOMBREPMTECHNIQUES),
                                     P_TYPEIMMEUBLE                 => R_CUR.TYPEIMMEUBLE,
                                     P_TYPEPROJECTIONGEOGRAPHIQUE   => R_CUR.TYPEPROJECTIONGEOGRAPHIQUE,
                                     P_COORDONNEEPMX                => R_CUR.COORDONNEEPMX,
                                     P_COORDONNEEPMY                => R_CUR.COORDONNEEPMY,
                                     P_COORDONNEEIMMEUBLEX          => R_CUR.COORDONNEEIMMEUBLEX,
                                     P_COORDONNEEIMMEUBLEY          => R_CUR.COORDONNEEIMMEUBLEY,
                                     P_TYPEZONE                     => R_CUR.TYPEZONE,
                                     P_BLACKLIST                    => 0,
                                     P_MAJ_OSSF                     => 1,
                                     P_ETAIMMSIR                    => 'M',
                                     P_SRCADR                       => 'MAD',
                                     P_ACRDGESTNAIREIMM             => R_CUR.ACCORDGESTIONNAIREIMMEUBLE,
                                     P_HEXABTL                      => NULL,
                                     P_DATEMAJHEXABTL               => NULL,
                                     P_TYPEINGENIERIE               => R_CUR.TYPEINGENIERIE,
                                     P_DATECABLAGEADRESSE           => TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD'),
                                     P_TYPRACCOPBPTO                => R_CUR.TYPRACCOPBPTO,
                                     P_TYPPBO                       => R_CUR.TYPEPBO,
                                     P_DATEMISEENSERVICECOMEPM      => TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD'),
                                     P_DATMESCOMIMM                 => TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD'),
                                     P_DATDEBACPTCMDACSS            => TO_DATE(R_CUR.DATDEBACPTCMDACSS,'YYYY/MM/DD'),
                                     P_TYPEEMPLACEMENTPM            => NULL,
                                     P_CATRACLGMT_CAL               => vCATRACLGMT_CAL);

        END IF;

        NAT_FF1_TRT_FLX.INS_CRMAD(TO_NUMBER(replace(R_CUR.NOMBRELOGEMENTSMADPM,' ','')),
                                  R_CUR.REFERENCEPM,
                                  NULL, -- NombreLogementsibleMadPM supprimé
                                  TO_NUMBER(replace(R_CUR.NOMBRECOLONNESMONTANTES,' ','')),
                                  R_CUR.TYPEINGENIERIE,
                                  TO_NUMBER(replace(R_CUR.NOMBREOPERATEURSFIBREDEDIEE,' ','')),
                                  TO_NUMBER(replace(R_CUR.NOMBREOPERATEURSFIBREPARTAGEAB,' ','')),
                                  R_CUR.CHOIXTECHNIQUEOC,
                                  TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD'),
                                  TO_DATE(R_CUR.DATECRCOMMANDEPM,'YYYY/MM/DD'),
                                  R_CUR.REFERENCEPRESTATIONPM,
                                  R_CUR.TYPECOMMANDEPM,
                                  R_CUR.REFERENCECOMMANDEPMNTERNEOC,
                                  R_CUR.ETATCRCOMMANDEPM,
                                  R_CUR.MOTIFKOCRCOMMANDEPM,
                                  TO_DATE(R_CUR.DATEMADPRESTATIONPM,'YYYY/MM/DD'),
                                  R_CUR.CODEACCESIMMEUBLE,
                                  R_CUR.CONTACTSIMMEUBLE,
                                  R_CUR.REFERENCEPMTECHNIQUE,
                                  R_CUR.PMACCESSIBLE,
                                  R_CUR.INFOOBTENTIONCLE,
                                  NULL,
                                  R_CUR.CODEACCESSOUSSOL,
                                  R_CUR.CODELOCALPM,
                                  R_CUR.AUTRESINFORMATIONS,
                                  R_CUR.CONTACTSSYNDIC,
                                  R_CUR.DATE_IMP,
                                  R_CUR.FILE_ID,
                                  R_CUR.IDENTIFIANTIMMEUBLE,
                                  R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                  R_CUR.CODEINSEEIMMEUBLE,
                                  TO_NUMBER(replace(R_CUR.CODEPOSTALIMMEUBLE,' ','')),
                                  R_CUR.COMMUNEIMMEUBLE,
                                  R_CUR.CODEADRESSEIMMEUBLE,
                                  R_CUR.TYPEVOIEIMMEUBLE,
                                  R_CUR.NOMVOIEIMMEUBLE,
                                  TO_NUMBER(replace(R_CUR.NUMEROVOIEIMMEUBLE,' ','')),
                                  R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                  R_CUR.BATIMENTIMMEUBLE,
                                  TO_NUMBER(replace(R_CUR.NOMBRELOGEMENTSADRESSEIPE,' ','')),
                                  R_CUR.ETATIMMEUBLE,
                                  TO_DATE(R_CUR.DATESIGNATURECONVENTION,'YYYY/MM/DD'),
                                  R_CUR.GESTIONNAIREIMMEUBLE          ,
                                  TO_NUMBER(replace(R_CUR.CODEPOSTALGESTIONNAIRE,' ','')),
                                  R_CUR.COMMUNEGESTIONNAIRE,
                                  R_CUR.TYPEVOIEGESTIONNAIRE,
                                  R_CUR.NOMVOIEGESTIONNAIRE,
                                  TO_NUMBER(replace(R_CUR.NUMEROVOIEGESTIONNAIRE,' ','')),
                                  R_CUR.COMPLEMENTNUMGESTIONNAIRE ,
                                  R_CUR.SIRETGESTIONNAIRE,
                                  TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD'),
                                  TO_DATE(R_CUR.DATEDERNIEREMODIFICATION,'YYYY/MM/DD'),
                                  R_CUR.TYPEHEBERGEMENTPM,
                                  R_CUR.COMMENTAIREPM,
                                  TO_NUMBER(replace(R_CUR.CAPACITEMAXPM,' ','')),
                                  R_CUR.CODEVOIERIVOLIPM,
                                  R_CUR.CODEINSEEPM,
                                  TO_NUMBER(replace(R_CUR.CODEPOSTALPM,' ','')),
                                  R_CUR.COMMUNEPM,
                                  R_CUR.CODEADRESSEPM,
                                  R_CUR.TYPEVOIEPM,
                                  R_CUR.NOMVOIEPM,
                                  TO_NUMBER(replace(R_CUR.NUMEROVOIEPM,' ','')),
                                  R_CUR.COMPLEMENTVOIEPM,
                                  R_CUR.BATIMENTPM,
                                  R_CUR.FIBREDEDIEELIBRE,
                                  TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD'),
                                  R_CUR.REFERENCECONSULTATIONNATIVE,
                                  NULL, -- DatePublicationJ3M supprimé
                                  R_CUR.TYPEMATERIELPM,
                                  substr(R_CUR.REFERENCECONTRAT,1,instr(R_CUR.REFERENCECONTRAT, chr(13))-1),
                                  R_CUR.CODEADRESSEGESTIONNAIRE,
                                  R_CUR.ETATPM,
                                  TO_NUMBER(replace(R_CUR.NOMBRELOGEMENTSPM,' ','')),
                                  TO_NUMBER(replace(R_CUR.NOMBREPMTECHNIQUES,' ','')),
                                  R_CUR.TYPEIMMEUBLE,
                                  R_CUR.TYPEPROJECTIONGEOGRAPHIQUE,
                                  TO_NUMBER(replace(R_CUR.COORDONNEEPMX,' ','')),
                                  TO_NUMBER(replace(R_CUR.COORDONNEEPMY,' ','')),
                                  TO_NUMBER(replace(R_CUR.COORDONNEEIMMEUBLEX,' ','')),
                                  TO_NUMBER(replace(R_CUR.COORDONNEEIMMEUBLEY,' ','')),
                                  NULL, --R_CUR.REFREGROUPEMENTPM, Supprimé en 2.2
                                  R_CUR.EMPLACEMENTACTIFDISPONIBLE,
                                  R_CUR.QUALITEADRESSEPM,
                                  TO_DATE(R_CUR.DATEPREMIEREMADPM,'YYYY/MM/DD'),
                                  R_CUR.ACCORDGESTIONNAIREIMMEUBLE,
                                  TO_NUMBER(replace(R_CUR.TYPEZONE,' ','')),
                                  R_CUR.REFERENCEPMTECHNIQUE,
                                  NULL, --R_CUR.CATEGORIERACCOLOGEMENT, Supprimé en 2.2
                                  R_CUR.REFPRESTATIONPBS,
                                  TO_NUMBER(replace(R_CUR.NBLOGEMENTPRESTATIONPBS,' ','')),
                                  TO_DATE(R_CUR.DATEMADPRESTATIONPBS,'YYYY/MM/DD'),
                                  R_CUR.REFOFFRECOMMERCIALE,
                                  R_CUR.NATURECR,
                                  TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD'),
                                  R_CUR.IMMEUBLENEUF,
                                  TO_DATE(R_CUR.DATPRVLIVIMMNEUF,'YYYY/MM/DD'),
                                  R_CUR.BRASSAGEPMOI,
                                  R_CUR.REFCONSUL,
                                  R_CUR.CODHEXAVOIE,
                                  R_CUR.CODEBAN,
                                  R_CUR.CHMPRSV1,
                                  R_CUR.CHMPRSV2,
                                  R_CUR.CHMPRSV3,
                                  R_CUR.COLMONTPROPOI,
                                  R_CUR.TYPEPBO,
                                  R_CUR.TYPRACCOPBPTO,
                                  TO_DATE(R_CUR.DATDEBACPTCMDACSS,'YYYY/MM/DD'),
                                  TO_DATE(R_CUR.DATDEBFOURCRCMDACSS,'YYYY/MM/DD'),
                                  NULL,--P_CODEOI_MAD
                                  NULL,--P_REFPRDM
                                  NULL,--P_REFLIENPMPRDM
                                  NULL,--P_LONGLGNIMM
                                  NULL,--P_REFPBO
                                  NULL,--P_DATMADPBO
                                  NULL,--P_NBLOGMTPBO
                                  NULL,--P_CHMPRSV4
                                  NULL,--P_CHMPRSV5
                                  NULL,--P_SUSRACDMD
                                  NULL --P_CONDSYNDIC
                                  );

      END;
      IF R_CUR.CODEINSEEPM IS NOT NULL THEN
        vInseePM := R_CUR.CODEINSEEPM;
      ELSE
        vInseePM := 'Insee';
      END IF;
    END LOOP;
  END IF;
  IF v_idpm IS NOT NULL THEN
    NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',v_idpm,P_FILE_ID);
    BEGIN
      NAT_FF1_TRT_FLX.TRT_CRMAD_IN(P_FILE_ID);
    EXCEPTION
      WHEN OTHERS THEN
        plog.ERROR('Erreur lors du traitement In FF','SQLERRM', SQLERRM,'','');
    END;
    -- cloture alerte PM Créé à l¿état déployé sans CR MAD
    NAT_FF1_CR_MAD_PM.CLS_CRMAD_PM_DPL(v_idpm);
    -- cloture alerte CR MAD non Présent : PM déployé dans IPE
    NAT_FF1_CR_MAD_PM.CLS_CRMAD_ETAPM(v_idpm);

    -- S'il y a une demande d'info associé, passer l'état à "MIS A JOUR"
    OPEN C_DMD_INFO(v_idpm);
      FETCH C_DMD_INFO INTO vDMD_INFO_ID;
      IF C_DMD_INFO%FOUND THEN
        NAT_FF1_DMD_INFO.SET_DMD_INFO_MAJ(vDMD_INFO_ID);
      END IF;
    CLOSE C_DMD_INFO;

    -- Controles CR MAD
    NAT_FF1_CR_MAD_PM.CTRL_NON_RCP_CRMAD_PM(v_idpm);
    NAT_FF1_CR_MAD_PM.CTRL_ABS_MOD_SCP(v_idpm);
    NAT_FF1_CR_MAD_PM.CTRL_ABS_REF_PRS(v_idpm);
    NAT_FF1_CR_MAD_PM.CTRL_INC_MOD_SCP(v_idpm);
    NAT_FF1_CR_MAD_PM.CTRL_CRMAD_KO(v_idpm);
    --Contrôle CR MAD prjet FEP
    NAT_FF1_CTRL_FEP.CTRL_ABS_CRMAD_OK(v_idpm);

    -- Controles Demandes d'info
    NAT_FF1_DMD_INFO.CTRL_AR_RECU_PM(v_idpm);
    -- Contrôle adresse
    vCTRL_ADR_REG_CRMAD := NAT_FF1_CTRL_ADR.CTRL_ADR_REG_CRMAD(v_idpm);
    OPEN C_VERIF_PRJ(v_idpm);
    FETCH C_VERIF_PRJ INTO R_VERIF_PRJ;
    vFoundPrj := C_VERIF_PRJ%FOUND;
    CLOSE C_VERIF_PRJ;

    IF not vFoundPrj THEN
      -- Pas de projet, en ZMD : on essaye de le créer
      IF P_TYPZON = 'ZMD' AND P_CODOI = 'FTEL' THEN
        NAT_FF1_ZA.NEW_PRJPM_ZA(v_idpm,'AMI');
        -- Controle si réception sur un PM abandonné OI
        vCtrl_ABN_OI := NAT_FF1_CTRL_ZMD.CTRL_CMN_MAD_PM_ABN_OI(v_idpm, 'AMI');
      ELSIF P_TYPZON = 'ZMD' AND R_GET_TMP.COD_PART_FLUX = 'AXIO' THEN
        NAT_FF1_RIP.NEW_PRJPM_ZA(v_idpm, 'RIP');
        vCtrl_ABN_OI := NAT_FF1_CTRL_ZMD.CTRL_CMN_MAD_PM_ABN_OI(v_idpm, 'RIP');
      ELSIF P_TYPZON = 'ZMD' AND R_GET_TMP.COD_PART_FLUX = 'COVA' THEN
        NAT_FF1_COV.NEW_PRJPM_COV(v_idpm, 'COV');
        -- Controle si réception sur un PM abandonné OI
        vCtrl_ABN_OI := NAT_FF1_CTRL_ZMD.CTRL_CMN_MAD_PM_ABN_OI(v_idpm, 'COV');
      END IF;
    END IF;
  END IF;

  SELECT 'MAD_'||P_CODOI||'_'||v_idpm
    INTO vRegExp
    FROM DUAL;
  NAT_IFC_TRT.UPDATE_FILE_REGEXP(P_FILE_ID,UPPER(vRegExp));

  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => v_idpm,
                       P_CODOI    => P_CODOI,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);

  COMMIT;

  -- Rebond vers l'OC SFR
  IF R_VERIF_PRJ.PART_ADD = 'SFR' THEN
    BEGIN
      GEN_REBOND( 'FTTH_CRDMADPM_OUT_SFR_FT', vNomFic,P_FILE_ID,v_idpm);
      BEGIN
        NAT_FF1_TRT_FLX.TRT_CRMAD_OUT(P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors du traitement Out FF','SQLERRM', SQLERRM,'','');
      END;
    EXCEPTION
      WHEN OTHERS THEN
        plog.ERROR('Erreur lors du rebond CRMAD 2.2 vers le l''OC','SQLERRM', SQLERRM);
    END;
  END IF;

  IF rep = 'DIR_FTTH_OI_FT' THEN
    vIfcOutSig :=  'FTTH_SIG_MADPM_OUT_FT';
  ELSIF rep = 'DIR_FTTH_OI_SFR' THEN
    vIfcOutSig := 'FTTH_SIG_HBCRMADPM_OUT_SFR';
  ELSIF rep = 'DIR_FTTH_OI_NC' THEN
    vIfcOutSig := 'FTTH_SIG_MADPM_OUT_NC';
  ELSIF rep = 'DIR_FTTH_AXIONE_BFILE' THEN
    vIfcOutSig := 'FTTH_SIG_MADPM_OUT_SEQ';
  ELSIF rep = 'DIR_FTTH_OI_FREE' THEN
    vIfcOutSig := 'FTTH_SIG_MADPM_OUT_FREE';
  ELSIF rep = 'DIR_FTTH_PART_COVAGE' THEN
    vIfcOutSig := 'FTTH_SIG_MADPM_OUT_SEQ';
  END IF;

  --Rebond -> SIG
  BEGIN
    GEN_REBOND( vIfcOutSig, vNomFic,P_FILE_ID);
  EXCEPTION
    WHEN OTHERS THEN
      plog.ERROR('Erreur lors du rebond CRMAD 2.2 vers le SIG','SQLERRM', SQLERRM);
  END;

  --Envoi de l'AR MAD (en 2.2)
   OPEN C_PART_FLUX;
   FETCH C_PART_FLUX INTO R_PART_FLUX;
   CLOSE C_PART_FLUX;

   vCodPartFlux := R_PART_FLUX.COD_PART_FLUX;


   IF (vCodPartFlux = 'FTEL') AND v_idpm IS NOT NULL THEN
     NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_FT(v_idpm);
     vNomIfc := 'FTTH_ARMAD_OUT_FT';
   ELSIF (vCodPartFlux = 'SFRA') AND v_idpm IS NOT NULL THEN
     NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_SFRA(v_idpm);
     vNomIfc := 'FTTH_ARMAD_OUT_SFRA';
   ELSIF (vCodPartFlux = 'NUME') AND v_idpm IS NOT NULL THEN
     NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_NUME(v_idpm);
     vNomIfc := 'FTTH_ARMAD_OUT_NUME';
   ELSIF (vCodPartFlux = 'FREE') AND v_idpm IS NOT NULL THEN
     NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_FREE(v_idpm);
     vNomIfc := 'FTTH_ARMAD_OUT_FREE';
   ELSIF (vCodPartFlux = 'AXIO') AND v_idpm IS NOT NULL THEN
      -- On vérifie que le partenaire flux est Axione et on récupère le SIREN
      --> Dans le cas d'axione
      OPEN C_VERIF_AXIO;
      FETCH C_VERIF_AXIO INTO R_VERIF_AXIO;
      vFoundAxio := C_VERIF_AXIO%FOUND;
      CLOSE C_VERIF_AXIO;

      IF vFoundAxio THEN
        NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_AXIO(v_idpm);
        vNomIfc := 'FTTH_ARMAD_OUT_AXIO';
      ELSE
        vNomIfc := NULL;
      END IF;
    ELSIF (vCodPartFlux = 'COVA') AND v_idpm IS NOT NULL THEN
      -- On vérifie que le partenaire flux est Covage
      --> Dans le cas de covage
      OPEN C_VERIF_COVA;
      FETCH C_VERIF_COVA INTO R_VERIF_COVA;
      vFoundCova := C_VERIF_COVA%FOUND;
      CLOSE C_VERIF_COVA;

      IF vFoundCova AND P_CODOI = 'SEQU' THEN
        NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_COVA(v_idpm);
        vNomIfc := 'FTTH_ARMAD_OUT_COVA';
      ELSIF vFoundCova AND P_CODOI <> 'SEQU' THEN
        NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_COVA(v_idpm);
        vNomIfc := 'FTTH_ARMAD_OUT_COVA_ZMD';
      ELSE
        vNomIfc := NULL;
      END IF;
    ELSE
      vNomIfc := NULL;
    END IF;

    IF vNomIfc IS NOT NULL  THEN
        vidTrt := CMN_IFC.GENERER_INTERFACE(vNomIfc,
                                            1,
                                            NULL,
                                            NULL
                                            );
    END IF;

    IF vidTrt IS NOT NULL THEN
      OPEN C_INFO_IFC_OUT(vidTrt);
      FETCH C_INFO_IFC_OUT INTO R_INFO_IFC_OUT;
      CLOSE C_INFO_IFC_OUT;

      NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => R_INFO_IFC_OUT.FILE_ID,
                           P_TYP_IFC  => 'OUT',
                           P_DATTRT   => SYSDATE,
                           P_IDPM     => v_idpm,
                           P_CODOI    => P_CODOI,
                           P_COD_PART => NULL,
                           P_IFC_ID   => R_INFO_IFC_OUT.IFC_ID,
                           P_PRM_ID   => R_INFO_IFC_OUT.PRM_ID);
    END IF;

END;*/

-- 3.0
PROCEDURE POS_TRT_CRMADPM_V30(P_FILE_ID       IN FILE_IO.FILE_ID%TYPE,
                              P_CODOI         IN REF_OI.COD_OI%TYPE,
                              P_TYPZON        IN VARCHAR2,
                              P_COD_PART_FLUX IN PART_FLX.COD_PART_FLUX%TYPE DEFAULT NULL) IS

    rep                 VARCHAR2(255);
    vRegExp             VARCHAR2(100);
    v_idpm              VARCHAR2(100);
    vIDPM               VARCHAR2(100);
    v_refint            CRD_MAD_PM.REFERENCECOMMANDEPMNTERNEOC%TYPE;
    vETATCRCOMMANDEPM   CRD_MAD_PM.ETATCRCOMMANDEPM%TYPE;
    V_CUR               SYS_REFCURSOR;
    R_CUR               CRD_MAD_PM_FT_30_TMP%ROWTYPE;
    vCOD_OI             PM.COD_OI%TYPE;
    vTYPECOMMANDEPM     CRD_MAD_PM.TYPECOMMANDEPM%TYPE;
    vidTrt              NUMBER;
    vidTrtOfSmp         NUMBER;
    vIndice             NUMBER;
    vNomFic             FILE_IO.NOM_FIC%TYPE;
    vIdPmTrt            CRD_MAD_PM_FT_30_TMP.REFERENCEPM%TYPE;
    vImm_id             IMMEUBLE.IMM_ID%TYPE;
    vAdr_Imm_Oi_Id      NUMBER;
    vIS_NEW_FOR_OI_ONLY NUMBER;
    vAlerteOpenId6      NUMBER;
    vAlerteOpenId7      NUMBER;
    vInseePM            CRD_MAD_PM.CODEINSEEPM%TYPE;
    vNumZone            VARCHAR2(50);
    vCATRACLGMT_CAL     ADR_IMM_OI.CATRACLGMT_CAL%TYPE;
    CURSOR C_DMD_INFO(P_IDPM IN DMD_INFO.IDPM%TYPE) IS
      SELECT dmd.DMD_INFO_ID
        FROM ETA_DMD_INFO   eta,
             DMD_INFO       dmd
       WHERE dmd.IDPM            = P_IDPM
         AND eta.ETA_DMD_INFO_ID = dmd.ETA_DMD_INFO_ID
         AND eta.ETA_DMD_INFO NOT IN(NAT_FF1_DMD_INFO.A_DEMANDER,NAT_FF1_DMD_INFO.MIS_A_JOUR);
    vDMD_INFO_ID    DMD_INFO.DMD_INFO_ID%TYPE;
    vPM_DPL_MADKO NUMBER;
    vCTRL_ADR_REG_CRMAD NUMBER;
    vCtrl_ABN_OI NUMBER;
    -- récupération de la table temporaire
    CURSOR C_GET_TMP IS
      SELECT flx.CRMADPM_TMP
        FROM PART_FLX   flx,
             REF_OI_PRM rop,
             REF_OI     roi
       WHERE roi.COD_OI = P_CODOI
         AND rop.COD_OI = roi.COD_OI
         AND rop.PRTCL  = '3.0'
         AND rop.OBS    = 0
         AND flx.COD_PART_FLUX = rop.COD_PART_FLUX;
    R_GET_TMP C_GET_TMP%ROWTYPE;
    vFoundTmp BOOLEAN;
    vIfcOutSig VARCHAR2(50);
    -- Vérification du Partenaire flux et récupération du SIREN
    CURSOR C_VERIF_OI(part_flx VARCHAR2) IS
      SELECT r.COD_OI,
             r.SIREN
        FROM REF_OI_PRM rp,
             REF_OI     r
       WHERE r.COD_OI  = P_CODOI
         AND rp.COD_OI = r.COD_OI
         AND rp.OBS    = 0
         AND rp.COD_PART_FLUX = part_flx;
    R_VERIF_OI C_VERIF_OI%ROWTYPE;
    vFoundOI   BOOLEAN;

    CURSOR C_VERIF_PRJ (vIDPM VARCHAR2) IS
    SELECT DISTINCT
           pm.IDPM,
           prj.PART_ADD,
           prj.PRJPM_ID,
           mad.REFERENCEPMTECHNIQUE AS REFPMT,
           eta.ETAPRJPM
      FROM ETAPRJPM      eta,
           CRD_MAD_PM    mad,
           PRJPM         prj,
           PM            pm
     WHERE pm.IDPM         = vIDPM
       AND prj.GEO_ID      = pm.GEO_ID
       AND eta.ETAPRJPM_ID = prj.ETAPRJPM_ID
       AND eta.ETAPRJPM    <> 'ABN'
       AND mad.REFERENCEPM (+)= pm.IDPM;
    R_VERIF_PRJ C_VERIF_PRJ%ROWTYPE;
    vFoundPrj BOOLEAN;
    vPART_ADD PRJPM.PART_ADD%TYPE;
    vPRJPM_ID PRJPM.PRJPM_ID%TYPE;

    CURSOR C_INFO_IFC IS
      SELECT f.IFC_ID,
             f.PRM_ID,
             f.NOM_FIC
        FROM FILE_IO f
       WHERE f.FILE_ID = P_FILE_ID;
    R_INFO_IFC C_INFO_IFC%ROWTYPE;

    CURSOR C_INFO_IFC_OUT(v_id_trt_ifc NUMBER) IS
      SELECT f.FILE_ID,
             f.IFC_ID,
             f.PRM_ID
        FROM FILE_IO f
       WHERE f.ID_TRT_IFC = v_id_trt_ifc;
    R_INFO_IFC_OUT C_INFO_IFC_OUT%ROWTYPE;

    CURSOR C_PART_FLUX IS
      SELECT oi_prm.COD_PART_FLUX
        FROM REF_OI_PRM oi_prm
       WHERE oi_prm.COD_OI = P_CODOI
         AND oi_prm.obs = 0;
    R_PART_FLUX C_PART_FLUX%ROWTYPE;
    vCodPartFlux PART_FLX.COD_PART_FLUX%TYPE;
    vNomIfc      VARCHAR2(255);
    vNomIfcOfSmp VARCHAR2(255);
    vNomIfcSio2  VARCHAR2(255);
    vTypo        VARCHAR2(255);

    CURSOR C_VERIF_BLK(P_IDENTIFIANTIMMEUBLE ADR_BLK.IDENTIFIANTIMMEUBLE%TYPE) IS
      SELECT 1
        FROM ADR_BLK a
       WHERE a.IDENTIFIANTIMMEUBLE = P_IDENTIFIANTIMMEUBLE
         AND a.BLK_VALID = 1
         AND a.CODOI     = P_CODOI;
    R_VERIF_BLK C_VERIF_BLK%ROWTYPE;
    vFoundBlk               BOOLEAN;
    vBlk                    VARCHAR2(3);

    vHexaExistingAdrBlk ADR_IMM_OI.CODEADRESSEIMMEUBLE%TYPE;
    vHexacle            HEXA_BTL.HEXABTL%TYPE;
    vDatMajHexaBytel DATE;


    CURSOR C_PM(id_pm VARCHAR) IS
      SELECT pm.COD_OI
        FROM PM pm
       WHERE pm.IDPM = id_pm;
    R_PM C_PM%ROWTYPE;

    CURSOR C_GET_PART_FLUX IS
      SELECT (CASE r.COD_PART_FLUX
                WHEN 'FTEL' THEN
                   CASE WHEN r.Cod_Oi = 'FTEL' THEN
                        'AMI'
                   ELSE 'OFC' END
                WHEN 'AXIO' THEN
                  'RIP'
                WHEN 'ALTI' THEN
                  'ALT'
                WHEN 'COVA' THEN
                  'COV'
                WHEN 'TDF' THEN
                  'TDF'
                WHEN 'SFRA' THEN
                  CASE
                    WHEN roi.RIP = 1 THEN
                      'RSF'
                    WHEN r.Cod_Oi = 'SFOR' THEN
                      'AMI'
                    ELSE 'ZAS'
                  END
                WHEN NAT_FTTH_OI.P_OC_SIEA THEN
                  NAT_FTTH_OI.P_CODOC_SIEA
              END)  AS COD_PART_ADDU
        FROM REF_OI roi,
             REF_OI_PRM r
       WHERE r.COD_OI = P_CODOI
         AND r.OBS  = 0
         AND roi.COD_OI = r.COD_OI
         AND ROWNUM = 1;
      R_GET_PART_FLUX C_GET_PART_FLUX%ROWTYPE;

    vFound BOOLEAN;
    v_score_dep_imb NUMBER;
    v_score_dep_pm NUMBER;
    v_score_blk NUMBER;
    v_score NUMBER;
    vDspCovaRM         NUMBER;
    vCtrlAdrItg NUMBER;
    vMotif ADR_IMM_OI.MOTIFBLOCAGE%TYPE;

    BEGIN
      -- Récupération des infos sur le fichier
      SELECT NOM_FIC,
             REP_FIC
        INTO vNomFic,
             rep
        FROM FILE_IO
       WHERE FILE_ID =  P_FILE_ID;
      -- Récupératoin de la table temporaire
      OPEN C_GET_TMP;
      FETCH C_GET_TMP INTO R_GET_TMP;
      vFoundTmp := C_GET_TMP%FOUND;
      CLOSE C_GET_TMP;

      IF vFoundTmp THEN
        V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(R_GET_TMP.CRMADPM_TMP);
        LOOP
          FETCH V_CUR INTO R_CUR;
          EXIT WHEN V_CUR%NOTFOUND;
          v_idpm            := R_CUR.REFERENCEPM;
          v_refint          := R_CUR.REFERENCECOMMANDEPMNTERNEOC;
          vETATCRCOMMANDEPM := R_CUR.ETATCRCOMMANDEPM;
          vTYPECOMMANDEPM   := R_CUR.TYPECOMMANDEPM ;
        END LOOP;
      END IF;

      -- dans le cas où on ne trouve pas de ligne dans la table tmp
      IF v_idpm IS NULL THEN
        SELECT regexp_replace(regexp_replace(REGEXP_SUBSTR(vNomFic,'_PM_(.*.)+\_'),'(_PM_)',''),'(_CRMAD_.*)|(_CRMAD.*)','')
          INTO vIDPM
          FROM DUAL;
        -- lancement du contrôle du CR MAD reçu mais non traité
        OPEN C_VERIF_PRJ(vIDPM);
        FETCH C_VERIF_PRJ INTO R_VERIF_PRJ;
        CLOSE C_VERIF_PRJ;
        IF R_VERIF_PRJ.PRJPM_ID IS NOT NULL THEN
          NAT_FF1_CTRL.CTRL_CMD_CRMAD_PM_NON_TRT(P_FILE_ID,R_VERIF_PRJ.PRJPM_ID,vIDPM);
        END IF;
        NAT_FF1_DOC.NEW_LOG_FIC_TRT(P_FILE_ID, 'KO', 'Le fichier ne respecte pas la STI, le fichier ne peut pas être intégré.');
      END IF;

      OPEN C_INFO_IFC;
      FETCH C_INFO_IFC INTO R_INFO_IFC;
      CLOSE C_INFO_IFC;

      NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                           P_TYP_IFC  => 'IN',
                           P_DATTRT   => SYSDATE,
                           P_IDPM     => NVL(v_idpm, vIDPM),
                           P_CODOI    => P_CODOI,
                           P_COD_PART => NULL,
                           P_IFC_ID   => R_INFO_IFC.IFC_ID,
                           P_PRM_ID   => R_INFO_IFC.PRM_ID);

      -- Le CR MAD KO reçu contient un OI qui ne correspondant pas à celui du PM (chamgement d'OI)
      -- alors ignorer le traitement de ce CR MAD
      OPEN C_PM(v_idpm);
         FETCH C_PM INTO R_PM;
         vFound := C_PM%FOUND;
      CLOSE C_PM;
      IF vFound AND R_PM.COD_OI <> P_CODOI THEN
        NAT_FF1.INS_PM_COMMENTAIRES(v_idpm, 'CR MAD PM ignoré : l''OI (' || P_CODOI || ') ne correspond pas à celui du PM (' || R_PM.COD_OI || ')');
        NAT_FF1_DOC.NEW_LOG_FIC_TRT(P_FILE_ID, 'KO', 'CR MAD PM ignoré : l''OI (' || P_CODOI || ') ne correspond pas à celui du PM (' || R_PM.COD_OI || ')');
         RETURN;
      END IF;

      V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(R_GET_TMP.CRMADPM_TMP);

      IF v_idpm IS NOT NULL THEN
        -- Suppression des informations CRMAD du referentiel pour ce PM/extension (attention il n'y a qu'un CR MAD pour tout le PM)
        DELETE FROM CRD_MAD_PM P
         WHERE P.REFERENCEPM = v_idpm;


            -------------------Alerte 5--------------------------------------------------------------------
            -- Si létat CR MAD est KO et le PM est à l'état déployé dans la bsse Adresse (à partir de l'IPE)
              --> Aors création l'alerte
        IF vETATCRCOMMANDEPM = 'KO' THEN
          vPM_DPL_MADKO := NAT_FF1_CR_MAD_PM.CTRL_PM_DPL_MADKO(v_idpm);
          IF P_TYPZON = 'ZMD' AND P_CODOI = 'FTEL' THEN
            -- Fermeture alerte si on reçoit un CR MAD KO sur ce PM
            NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS_CLS(v_idpm, 'AMI');
          ELSIF P_TYPZON = 'ZMD' AND P_CODOI = NAT_FTTH_OI.P_CODOI_SIMPSON THEN
            NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS_CLS(v_idpm, NAT_FTTH_OI.P_CODOC_SIMPSON);
          END IF;
        END IF;
        LOOP
          FETCH V_CUR INTO R_CUR;
          EXIT WHEN V_CUR%NOTFOUND;
          BEGIN

            -- Vérification hexacle et remplacement
            --> l'hexa de l'IPE doit être null
            --> Sur un immeuble déployé
            --> dont le code insee du PM est dans le module souscription
            IF R_CUR.CODEADRESSEIMMEUBLE IS NULL AND
               R_CUR.IDENTIFIANTIMMEUBLE IS NOT NULL AND
               R_CUR.CODEINSEEIMMEUBLE   IS NOT NULL THEN
              vHexacle := APP_FF1_ADR.GET_HEXA_CLE_BYTEL(P_NUMEROVOIEIMMEUBLE     => R_CUR.NUMEROVOIEIMMEUBLE,
                                                         P_COMPLEMENTVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                         P_TYPEVOIEIMMEUBLE       => R_CUR.TYPEVOIEIMMEUBLE,
                                                         P_NOMVOIEIMMEUBLE        => R_CUR.NOMVOIEIMMEUBLE,
                                                         P_CODEINSEEIMMEUBLE      => R_CUR.CODEINSEEIMMEUBLE,
                                                         P_CODERIVOLIIMMEUBLE     => R_CUR.CODEVOIERIVOLIIMMEUBLE);
              vDatMajHexaBytel := sysdate;
            ELSE
              vHexacle := R_CUR.CODEADRESSEIMMEUBLE;
              vDatMajHexaBytel := NULL;
            END IF;
            --Les contôles
            -------------------------------------------------------------------------------------------------
            -- Contrôle de présence
            --> On vérifie si l'immeuble n'existe pas pour cette OI
              --> Si l'immeuble n'existe pas pour cette OI, on vérifie si l'immeuble existe pour une autre OI
              --> Si c'est la cas, on ne va pas insérer une nouvelle ligne dans la table des immeubles
            vImm_id := NAT_FF1_TRT_FLX.GET_IMM_FROM_ADR(P_CODOI,
                                                        R_CUR.IDENTIFIANTIMMEUBLE,
                                                        vAdr_Imm_Oi_Id);
            -- Récupération des Scores
            v_score_dep_imb := NAT_FF1_ADR.GET_SCORE_DEP_IMB(P_ETAT_IMMEUBLE => R_CUR.ETATIMMEUBLE ,
                                                             P_DATE_MESC => TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD') );
            -- Score deploiement PM
            v_score_dep_pm := NAT_FF1_ADR.GET_SCORE_DEP_PM(P_REFERENCEPM => R_CUR.REFERENCEPM,
                                                           P_TYPE_ZONE   => P_TYPZON);
            --Score blacklistage
            v_score_blk := NAT_FF1_ADR.GET_SCORE_BLK(P_IDENTIFIANTIMMEUBLE => R_CUR.IDENTIFIANTIMMEUBLE,
                                                     P_HEXACLE              => vHexacle,
                                                     P_CODOI               => P_CODOI);

            --Score final
            v_score := NAT_FF1_ADR.GET_SCORE(P_SOCRE_DEP_IMM => v_score_dep_imb,
                                             P_SOCRE_DEP_PM  => v_score_dep_pm,
                                             P_SOCRE_BLK     => v_score_blk);
            -- Conntole d'intégration adresse
            -- Identifiant immeuble non null et hexacle non null
            vCtrlAdrItg := NAT_FF1_CTRL_ADR.CTRL_ITG_ADR(vHexacle,
                                                         R_CUR.CODEINSEEIMMEUBLE,
                                                         R_CUR.IDENTIFIANTIMMEUBLE);
          -- L'adresse peut-elle être intégrée ?
          IF vCtrlAdrItg = 1 THEN
/*            IF (vImm_id IS NULL) OR (vImm_id IS NOT NULL AND vIS_NEW_FOR_OI_ONLY = 1)  THEN --> On est sure que l'immeuble n'exite pas*/
              IF vImm_id IS NULL THEN
                -- Création de l'immeuble
                NAT_FF1_TRT_FLX.NEW_IMMEUBLE(vImm_id,
                                             vHexacle,
                                             R_GET_TMP.CRMADPM_TMP);
              ELSE
                -- MAJ de l'info adresse
                NAT_FF1_TRT_FLX.SET_IMMEUBLE(vImm_id,
                                             vHexacle,
                                             R_GET_TMP.CRMADPM_TMP);
              END IF;

              IF vDatMajHexaBytel IS NULL THEN
                vHexaExistingAdrBlk := NAT_FF1_ADR.GET_EXISTING_ADR_HEXABTL_BLK(R_CUR.IDENTIFIANTIMMEUBLE,R_CUR.REFERENCEPM);
              ELSE
                vHexaExistingAdrBlk := NAT_FF1_ADR.GET_EXISTING_ADR_BLK(R_CUR.IDENTIFIANTIMMEUBLE,R_CUR.REFERENCEPM);
              END IF;

              IF vHexaExistingAdrBlk IS NOT NULL THEN
                vBlk := 'OUI';
                vMotif := NAT_FF1_ADR.GET_PIRE_MOTIF(P_HEXACLE             => vHexacle ,
                                                       P_IDENTIFIANTIMMEUBLE => R_CUR.IDENTIFIANTIMMEUBLE,
                                                       P_BLOCAGEELIGIBILITE  => NULL,
                                                       P_DATPREVDEBLOCAGE    => NULL,
                                                       P_FOR_CALCUL_PIRE_MTF => 1,
                                                       P_CODOI               => P_CODOI);
              ELSE
                OPEN C_VERIF_BLK(R_CUR.IDENTIFIANTIMMEUBLE);
                FETCH C_VERIF_BLK INTO R_VERIF_BLK;
                vFoundBlk := C_VERIF_BLK%FOUND;
                CLOSE C_VERIF_BLK;

                IF vFoundBlk THEN
                  vBlk := 'OUI';
                  vMotif := NAT_FF1_ADR.GET_PIRE_MOTIF(P_HEXACLE             => vHexacle ,
                                                       P_IDENTIFIANTIMMEUBLE => R_CUR.IDENTIFIANTIMMEUBLE,
                                                       P_BLOCAGEELIGIBILITE  => NULL,
                                                       P_DATPREVDEBLOCAGE    => NULL,
                                                       P_FOR_CALCUL_PIRE_MTF => 1,
                                                       P_CODOI               => P_CODOI);
                ELSE
                  vBlk := 'NON';
                  vMotif := NULL;
                END IF;
              END IF;


           IF vAdr_Imm_Oi_Id IS NULL THEN
              -- Insertion de l'adresse :
                  BEGIN
                  NAT_FTTH_OI.INS_ADR_IMM_OI(P_REFERENCEPM                  => R_CUR.REFERENCEPM,
                                             P_IMM_ID                       => vImm_id,
                                             P_IDENTIFIANTIMMEUBLE          => R_CUR.IDENTIFIANTIMMEUBLE,
                                             P_CODERIVOLIIMMEUBLE           => R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                             P_CODEINSEEIMMEUBLE            => R_CUR.CODEINSEEIMMEUBLE,
                                             P_CODEPOSTALIMMEUBLE           => R_CUR.CODEPOSTALIMMEUBLE,
                                             P_VILLEIMMEUBLE                => R_CUR.COMMUNEIMMEUBLE,
                                             P_CODEADRESSEIMMEUBLE          => vHexacle,
                                             P_TYPEVOIEIMMEUBLE             => R_CUR.TYPEVOIEIMMEUBLE,
                                             P_NOMVOIEIMMEUBLE              => R_CUR.NOMVOIEIMMEUBLE,
                                             P_NUMEROVOIEIMMEUBLE           => R_CUR.NUMEROVOIEIMMEUBLE,
                                             P_COMPLEMENTNUMEROVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                             P_BATIMENTIMMEUBLE             => R_CUR.BATIMENTIMMEUBLE,
                                             P_NBRELOGEMENTSINFOPREALABLES  => TO_NUMBER(R_CUR.NOMBRELOGEMENTSADRESSEIPE),
                                             P_ETATIMMEUBLE                 => R_CUR.ETATIMMEUBLE,
                                             P_ETATPM                       => R_CUR.ETATPM,
                                             P_DATEINSTALLATIONPM           => TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD') ,
                                             P_CODERIVOLIPM                 => R_CUR.CODEVOIERIVOLIPM,
                                             P_CODEINSEEPM                  => R_CUR.CODEINSEEPM,
                                             P_CODEPOSTALPM                 => R_CUR.CODEPOSTALPM,
                                             P_VILLEPM                      => R_CUR.COMMUNEPM,
                                             P_CODEADRESSEPM                => R_CUR.CODEADRESSEPM,
                                             P_TYPEVOIEPM                   => R_CUR.TYPEVOIEPM,
                                             P_NOMVOIEPM                    => R_CUR.NOMVOIEPM,
                                             P_NUMEROVOIEPM                 => R_CUR.NUMEROVOIEPM,
                                             P_COMPLEMENTVOIEPM             => R_CUR.COMPLEMENTVOIEPM,
                                             P_DATE_IMP                     => R_CUR.DATE_IMP,
                                             P_FILE_ID                      => R_CUR.FILE_ID,
                                             P_BATIMENTPM                   => R_CUR.BATIMENTPM,
                                             P_CODOI                        => P_CODOI,
                                             P_TYPZON                       => P_TYPZON,
                                             P_DATENVOSSFAI                 => NULL,
                                             P_NOMBREPMTECHNIQUES           => TO_NUMBER(R_CUR.NOMBREPMTECHNIQUES),
                                             P_TYPEIMMEUBLE                 => R_CUR.TYPEIMMEUBLE,
                                             P_TYPEPROJECTIONGEOGRAPHIQUE   => R_CUR.TYPEPROJECTIONGEOGRAPHIQUE,
                                             P_COORDONNEEPMX                => R_CUR.COORDONNEEPMX,
                                             P_COORDONNEEPMY                => R_CUR.COORDONNEEPMY,
                                             P_COORDONNEEIMMEUBLEX          => R_CUR.COORDONNEEIMMEUBLEX,
                                             P_COORDONNEEIMMEUBLEY          => R_CUR.COORDONNEEIMMEUBLEY,
                                             P_TYPEZONE                     => R_CUR.TYPEZONE,
                                             P_BLACKLIST                    => vBlk,
                                             P_MAJ_OSSF                     => 1,
                                             P_ETAIMMSIR                    => 'A',
                                             P_SRCADR                       => 'MAD',
                                             P_ACRDGESTNAIREIMM             => R_CUR.ACCORDGESTIONNAIREIMMEUBLE,
                                             P_HEXABTL                      => (CASE WHEN vDatMajHexaBytel IS NOT NULL
                                                                                    THEN vHexacle
                                                                                    ELSE NULL
                                                                                  END),
                                             P_DATEMAJHEXABTL               => vDatMajHexaBytel,
                                             P_TYPEINGENIERIE               => R_CUR.TYPEINGENIERIE,
                                             P_DATECABLAGEADRESSE           => TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD'),
                                             P_TYPRACCOPBPTO                => R_CUR.TYPRACCOPBPTO,
                                             P_TYPPBO                       => R_CUR.TYPEPBO,
                                             P_DATEMISEENSERVICECOMEPM      => TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD'),
                                             P_DATMESCOMIMM                 => TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD'),
                                             P_DATDEBACPTCMDACSS            => TO_DATE(R_CUR.DATDEBACPTCMDACSS,'YYYY/MM/DD'),
                                             P_TYPEEMPLACEMENTPM            => NULL,
                                             P_CATRACLGMT_CAL               => vCATRACLGMT_CAL,
                                             P_CODEHEXACLEVOIE              => R_CUR.CODHEXAVOIE,
                                             P_ADR_IMM_OI_ID                => vAdr_Imm_Oi_Id,
                                             P_SCORE_DEPL_IMB               => v_score_dep_imb,
                                             P_SCORE_DEPL_PM                => v_score_dep_pm ,
                                             P_SCORE_BLK                    => v_score_blk,
                                             P_SCORE                        => v_score,
                                             P_BLOCAGEELIGIBILITE           => NULL,
                                             P_ORIGINEBLOCAGE               => NULL,
                                             P_MOTIFBLOCAGE                 => NULL,
                                             P_DATPREVDEBLOCAGE             => NULL,
                                             P_DATDEBUTBLOCAGEELIG          => NULL,
                                             P_RACCORDEMENTLONG             => NULL,
                                             P_REFPRDM                      => R_CUR.REFPRDM,
                                             P_SUPPORTINFRAFTTE             => NULL,
                                             P_ETATIMMPBSPECIFIQUE          => NULL);
              /*EXCEPTION WHEN OTHERS THEN
                NULL;
              END;*/
              COMMIT;
              NAT_FF1_CTRL_ADR.CLS_ADR_REG(P_COD_OI              => P_CODOI,
                                           P_IDPM                => R_CUR.REFERENCEPM,
                                           P_CODEADRESSEIMMEUBLE => vHexacle,
                                           P_CODEINSEEIMMEUBLE   => R_CUR.CODEINSEEIMMEUBLE,
                                           P_CODERIVOLIIMMEUBLE  => R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                           P_ETATIMMEUBLE        => R_CUR.ETATIMMEUBLE,
                                           P_ETATPM              => R_CUR.ETATPM,
                                           P_NUMEROVOIEIMMEUBLE  => R_CUR.NUMEROVOIEIMMEUBLE,
                                           P_CPLMTNUMVOIEIMM     => PKG_TOOLS.TRANSLATE(UPPER(R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE)),
                                           P_IDENTIFIANTIMMEUBLE => R_CUR.IDENTIFIANTIMMEUBLE,
                                           P_BATIMENTIMMEUBLE    => PKG_TOOLS.TRANSLATE(UPPER(R_CUR.BATIMENTIMMEUBLE)));

             IF vHexaExistingAdrBlk IS NOT NULL THEN
                  NAT_FF1_ADR.INS_ADR_BLK_FROM_PREVIOUS_HEXA(vHexaExistingAdrBlk,
                                                             vHexacle,
                                                             P_CODOI,
                                                            R_CUR.IDENTIFIANTIMMEUBLE);
             END IF;
            EXCEPTION
              WHEN OTHERS THEN
                plog.ERROR('Erreur lors de l''insertion adresse 1.0 dans la table finale','SQLERRM', SQLERRM);
                plog.full_error_backtrace('File_ID',P_FILE_ID);
                plog.full_call_stack('File_ID',P_FILE_ID);
            END ;

            ELSE --> Dans le cas où l'immeuble existe déjà
              -- MAJ de l'info adresse
              -------------------------------Cloture des alertes----------------------------------
/*  -->> EVOL OPTIMISATION MODULE ADRESSE : Type d'alerte n'est plus utilisé par le metier
              --> alerte 6 : Cloture si l'adresse fait l'objet de cette alerte
              vAlerteOpenId6 := NAT_FF1_ADR.VERIF_ALRT_OPEN(vHexacle,
                                                            R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                                            R_CUR.CODEINSEEIMMEUBLE,
                                                            NAT_FF1_CTRL_ADR.ID_PRM_DPL_ECD,
                                                            R_CUR.NUMEROVOIEIMMEUBLE,
                                                            R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                            R_CUR.IDENTIFIANTIMMEUBLE,
                                                            R_CUR.BATIMENTIMMEUBLE);
              IF vAlerteOpenId6 <> 0 THEN --> On crée une alerte que s'il n'existe pas déjà une alerte
                   NAT_FF1_ADR.CLOSE_ALRT_ADR(vAlerteOpenId6,
                                              'MAD'
                                              );
              END IF;*/
/* -->> EVOL OPTIMISATION MODULE ADRESSE : Type d'alerte n'est plus utilisé par le metier
              --> alerte 7 : Cloture si l'adresse fait l'objet de cette alerte
              vAlerteOpenId7 := NAT_FF1_ADR.VERIF_ALRT_OPEN(vHexacle,
                                                            R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                                            R_CUR.CODEINSEEIMMEUBLE,
                                                            NAT_FF1_CTRL_ADR.ID_PRM_DPL_ABS,
                                                            R_CUR.NUMEROVOIEIMMEUBLE,
                                                            R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                            R_CUR.IDENTIFIANTIMMEUBLE,
                                                            R_CUR.BATIMENTIMMEUBLE);
              IF vAlerteOpenId7 <> 0 THEN --> On crée une alerte que s'il n'existe pas déjà une alerte
                NAT_FF1_ADR.CLOSE_ALRT_ADR(vAlerteOpenId7,
                                           'MAD'
                                           );
              END IF;*/
              --------------------------------------------------------------------------------------
              BEGIN
              NAT_FF1_TRT_FLX.SET_IMMEUBLE(vImm_id,
                                           vHexacle,
                                           R_GET_TMP.CRMADPM_TMP);
              NAT_FTTH_OI.SET_ADR_IMM_OI(P_REFERENCEPM                  => R_CUR.REFERENCEPM,
                                         P_IMM_ID                       => vImm_id,
                                         P_IDENTIFIANTIMMEUBLE          => R_CUR.IDENTIFIANTIMMEUBLE,
                                         P_CODERIVOLIIMMEUBLE           => R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                         P_CODEINSEEIMMEUBLE            => R_CUR.CODEINSEEIMMEUBLE,
                                         P_CODEPOSTALIMMEUBLE           => R_CUR.CODEPOSTALIMMEUBLE,
                                         P_VILLEIMMEUBLE                => R_CUR.COMMUNEIMMEUBLE,
                                         P_CODEADRESSEIMMEUBLE          => vHexacle,
                                         P_TYPEVOIEIMMEUBLE             => R_CUR.TYPEVOIEIMMEUBLE,
                                         P_NOMVOIEIMMEUBLE              => R_CUR.NOMVOIEIMMEUBLE,
                                         P_NUMEROVOIEIMMEUBLE           => R_CUR.NUMEROVOIEIMMEUBLE,
                                         P_COMPLEMENTNUMEROVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                         P_BATIMENTIMMEUBLE             => R_CUR.BATIMENTIMMEUBLE,
                                         P_NBRELOGEMENTSINFOPREALABLES  => TO_NUMBER(R_CUR.NOMBRELOGEMENTSADRESSEIPE),
                                         P_ETATIMMEUBLE                 => R_CUR.ETATIMMEUBLE,
                                         P_ETATPM                       => R_CUR.ETATPM,
                                         P_DATEINSTALLATIONPM           => TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD'),
                                         P_CODERIVOLIPM                 => R_CUR.CODEVOIERIVOLIPM,
                                         P_CODEINSEEPM                  => R_CUR.CODEINSEEPM,
                                         P_CODEPOSTALPM                 => R_CUR.CODEPOSTALPM,
                                         P_VILLEPM                      => R_CUR.COMMUNEPM,
                                         P_CODEADRESSEPM                => R_CUR.CODEADRESSEPM,
                                         P_TYPEVOIEPM                   => R_CUR.TYPEVOIEPM,
                                         P_NOMVOIEPM                    => R_CUR.NOMVOIEPM,
                                         P_NUMEROVOIEPM                 => R_CUR.NUMEROVOIEPM,
                                         P_COMPLEMENTVOIEPM             => R_CUR.COMPLEMENTVOIEPM,
                                         P_DATE_IMP                     => R_CUR.DATE_IMP,
                                         P_FILE_ID                      => R_CUR.FILE_ID,
                                         P_BATIMENTPM                   => R_CUR.BATIMENTPM,
                                         P_CODOI                        => P_CODOI,
                                         P_TYPZON                       => P_TYPZON,
                                         P_DATENVOSSFAI                 => NULL,
                                         P_NOMBREPMTECHNIQUES           => TO_NUMBER(R_CUR.NOMBREPMTECHNIQUES),
                                         P_TYPEIMMEUBLE                 => R_CUR.TYPEIMMEUBLE,
                                         P_TYPEPROJECTIONGEOGRAPHIQUE   => R_CUR.TYPEPROJECTIONGEOGRAPHIQUE,
                                         P_COORDONNEEPMX                => R_CUR.COORDONNEEPMX,
                                         P_COORDONNEEPMY                => R_CUR.COORDONNEEPMY,
                                         P_COORDONNEEIMMEUBLEX          => R_CUR.COORDONNEEIMMEUBLEX,
                                         P_COORDONNEEIMMEUBLEY          => R_CUR.COORDONNEEIMMEUBLEY,
                                         P_TYPEZONE                     => R_CUR.TYPEZONE,
                                         P_BLACKLIST                    => vBlk,
                                         P_MAJ_OSSF                     => 1,
                                         P_ETAIMMSIR                    => 'M',
                                         P_SRCADR                       => 'MAD',
                                         P_ACRDGESTNAIREIMM             => R_CUR.ACCORDGESTIONNAIREIMMEUBLE,
                                         P_HEXABTL                      => (CASE WHEN vDatMajHexaBytel IS NOT NULL
                                                                                    THEN vHexacle
                                                                                    ELSE NULL
                                                                                END),
                                         P_DATEMAJHEXABTL               => vDatMajHexaBytel,
                                         P_TYPEINGENIERIE               => R_CUR.TYPEINGENIERIE,
                                         P_DATECABLAGEADRESSE           => TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD'),
                                         P_TYPRACCOPBPTO                => R_CUR.TYPRACCOPBPTO,
                                         P_TYPPBO                       => R_CUR.TYPEPBO,
                                         P_DATEMISEENSERVICECOMEPM      => TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD'),
                                         P_DATMESCOMIMM                 => TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD'),
                                         P_DATDEBACPTCMDACSS            => TO_DATE(R_CUR.DATDEBACPTCMDACSS,'YYYY/MM/DD'),
                                         P_TYPEEMPLACEMENTPM            => NULL,
                                         P_CATRACLGMT_CAL               => vCATRACLGMT_CAL,
                                         P_CODEHEXACLEVOIE              => R_CUR.CODHEXAVOIE,
                                         P_ADR_IMM_OI_ID                => vAdr_Imm_Oi_Id,
                                         P_SCORE_DEPL_IMB               => v_score_dep_imb,
                                         P_SCORE_DEPL_PM                => v_score_dep_pm ,
                                         P_SCORE_BLK                    => v_score_blk,
                                         P_SCORE                        => v_score,
                                         P_BLOCAGEELIGIBILITE           => NULL,
                                         P_ORIGINEBLOCAGE               => (CASE vBlk
                                                                            WHEN 'OUI'
                                                                              THEN 'BYTEL'
                                                                            ELSE NULL
                                                                           END),
                                         P_MOTIFBLOCAGE                 => vMotif,
                                         P_DATPREVDEBLOCAGE             => NULL,
                                         P_DATDEBUTBLOCAGEELIG          => NULL,
                                         P_RACCORDEMENTLONG             => NULL,
                                         P_REFPRDM                      => R_CUR.REFPRDM,
                                         P_SUPPORTINFRAFTTE             => NULL,
                                         P_ETATIMMPBSPECIFIQUE          => NULL);
            EXCEPTION WHEN OTHERS THEN
              NULL;
            END;
              COMMIT;
            END IF;
           END IF;
              BEGIN
            NAT_FF1_TRT_FLX.INS_CRMAD(TO_NUMBER(replace(R_CUR.NOMBRELOGEMENTSMADPM,' ','')),
                                      R_CUR.REFERENCEPM,
                                      NULL, -- NombreLogementsibleMadPM supprimé
                                      TO_NUMBER(replace(R_CUR.NOMBRECOLONNESMONTANTES,' ','')),
                                      R_CUR.TYPEINGENIERIE,
                                      TO_NUMBER(replace(R_CUR.NOMBREOPERATEURSFIBREDEDIEE,' ','')),
                                      TO_NUMBER(replace(R_CUR.NOMBREOPERATEURSFIBREPARTAGEAB,' ','')),
                                      R_CUR.CHOIXTECHNIQUEOC,
                                      TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD'),
                                      TO_DATE(R_CUR.DATECRCOMMANDEPM,'YYYY/MM/DD'),
                                      R_CUR.REFERENCEPRESTATIONPM,
                                      R_CUR.TYPECOMMANDEPM,
                                      R_CUR.REFERENCECOMMANDEPMNTERNEOC,
                                      R_CUR.ETATCRCOMMANDEPM,
                                      R_CUR.MOTIFKOCRCOMMANDEPM,
                                      TO_DATE(R_CUR.DATEMADPRESTATIONPM,'YYYY/MM/DD'),
                                      R_CUR.CODEACCESIMMEUBLE,
                                      R_CUR.CONTACTSIMMEUBLE,
                                      R_CUR.REFERENCEPMTECHNIQUE,
                                      R_CUR.PMACCESSIBLE,
                                      R_CUR.INFOOBTENTIONCLE,
                                      NULL,
                                      R_CUR.CODEACCESSOUSSOL,
                                      R_CUR.CODELOCALPM,
                                      R_CUR.AUTRESINFORMATIONS,
                                      R_CUR.CONTACTSSYNDIC,
                                      R_CUR.DATE_IMP,
                                      R_CUR.FILE_ID,
                                      R_CUR.IDENTIFIANTIMMEUBLE,
                                      R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                      vHexacle,
                                      TO_NUMBER(replace(R_CUR.CODEPOSTALIMMEUBLE,' ','')),
                                      R_CUR.COMMUNEIMMEUBLE,
                                      R_CUR.CODEADRESSEIMMEUBLE,
                                      R_CUR.TYPEVOIEIMMEUBLE,
                                      R_CUR.NOMVOIEIMMEUBLE,
                                      TO_NUMBER(replace(R_CUR.NUMEROVOIEIMMEUBLE,' ','')),
                                      R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                      R_CUR.BATIMENTIMMEUBLE,
                                      TO_NUMBER(replace(R_CUR.NOMBRELOGEMENTSADRESSEIPE,' ','')),
                                      R_CUR.ETATIMMEUBLE,
                                      TO_DATE(R_CUR.DATESIGNATURECONVENTION,'YYYY/MM/DD'),
                                      R_CUR.GESTIONNAIREIMMEUBLE          ,
                                      TO_NUMBER(replace(R_CUR.CODEPOSTALGESTIONNAIRE,' ','')),
                                      R_CUR.COMMUNEGESTIONNAIRE,
                                      R_CUR.TYPEVOIEGESTIONNAIRE,
                                      R_CUR.NOMVOIEGESTIONNAIRE,
                                      TO_NUMBER(replace(R_CUR.NUMEROVOIEGESTIONNAIRE,' ','')),
                                      R_CUR.COMPLEMENTNUMGESTIONNAIRE ,
                                      R_CUR.SIRETGESTIONNAIRE,
                                      TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD'),
                                      TO_DATE(R_CUR.DATEDERNIEREMODIFICATION,'YYYYMMDDHH24MI'),
                                      R_CUR.TYPEHEBERGEMENTPM,
                                      R_CUR.COMMENTAIREPM,
                                      TO_NUMBER(replace(R_CUR.CAPACITEMAXPM,' ','')),
                                      R_CUR.CODEVOIERIVOLIPM,
                                      R_CUR.CODEINSEEPM,
                                      TO_NUMBER(replace(R_CUR.CODEPOSTALPM,' ','')),
                                      R_CUR.COMMUNEPM,
                                      R_CUR.CODEADRESSEPM,
                                      R_CUR.TYPEVOIEPM,
                                      R_CUR.NOMVOIEPM,
                                      TO_NUMBER(replace(R_CUR.NUMEROVOIEPM,' ','')),
                                      R_CUR.COMPLEMENTVOIEPM,
                                      R_CUR.BATIMENTPM,
                                      R_CUR.FIBREDEDIEELIBRE,
                                      TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD'),
                                      R_CUR.REFERENCECONSULTATIONNATIVE,
                                      NULL, -- DatePublicationJ3M supprimé
                                      R_CUR.TYPEMATERIELPM,
                                      substr(R_CUR.REFERENCECONTRAT,1,instr(R_CUR.REFERENCECONTRAT, chr(13))-1),
                                      R_CUR.CODEADRESSEGESTIONNAIRE,
                                      R_CUR.ETATPM,
                                      TO_NUMBER(replace(R_CUR.NOMBRELOGEMENTSPM,' ','')),
                                      TO_NUMBER(replace(R_CUR.NOMBREPMTECHNIQUES,' ','')),
                                      R_CUR.TYPEIMMEUBLE,
                                      R_CUR.TYPEPROJECTIONGEOGRAPHIQUE,
                                      TO_NUMBER(replace(R_CUR.COORDONNEEPMX,' ','')),
                                      TO_NUMBER(replace(R_CUR.COORDONNEEPMY,' ','')),
                                      TO_NUMBER(replace(R_CUR.COORDONNEEIMMEUBLEX,' ','')),
                                      TO_NUMBER(replace(R_CUR.COORDONNEEIMMEUBLEY,' ','')),
                                      NULL, --R_CUR.REFREGROUPEMENTPM, Supprimé en 2.2
                                      R_CUR.EMPLACEMENTACTIFDISPONIBLE,
                                      R_CUR.QUALITEADRESSEPM,
                                      TO_DATE(R_CUR.DATEPREMIEREMADPM,'YYYY/MM/DD'),
                                      R_CUR.ACCORDGESTIONNAIREIMMEUBLE,
                                      TO_NUMBER(replace(R_CUR.TYPEZONE,' ','')),
                                      R_CUR.REFERENCEPMTECHNIQUE,
                                      NULL, --R_CUR.CATEGORIERACCOLOGEMENT, Supprimé en 2.2
                                      R_CUR.REFPRESTATIONPBS,
                                      TO_NUMBER(replace(R_CUR.NBLOGEMENTPRESTATIONPBS,' ','')),
                                      TO_DATE(R_CUR.DATEMADPRESTATIONPBS,'YYYY/MM/DD'),
                                      R_CUR.REFOFFRECOMMERCIALE,
                                      R_CUR.NATURECR,
                                      TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD'),
                                      R_CUR.IMMEUBLENEUF,
                                      TO_DATE(R_CUR.DATPRVLIVIMMNEUF,'YYYY/MM/DD'),
                                      R_CUR.BRASSAGEPMOI,
                                      R_CUR.REFCONSUL,
                                      R_CUR.CODHEXAVOIE,
                                      R_CUR.CODEBAN,
                                      R_CUR.CHMPRSV1,
                                      R_CUR.CHMPRSV2,
                                      R_CUR.CHMPRSV3,
                                      R_CUR.COLMONTPROPOI,
                                      R_CUR.TYPEPBO,
                                      R_CUR.TYPRACCOPBPTO,
                                      TO_DATE(R_CUR.DATDEBACPTCMDACSS,'YYYY/MM/DD'),
                                      TO_DATE(R_CUR.DATDEBFOURCRCMDACSS,'YYYY/MM/DD'),
                                      R_CUR.CODEOI_MAD,
                                      R_CUR.REFPRDM,
                                      R_CUR.REFLIENPMPRDM,
                                      TO_NUMBER(replace(R_CUR.LONGLGNIMM,',','.')),
                                      R_CUR.REFPBO,
                                      R_CUR.DATMADPBO,
                                      R_CUR.NBLOGMTPBO,
                                      R_CUR.CHMPRSV4,
                                      R_CUR.CHMPRSV5,
                                      R_CUR.SUSRACDMD,
                                      R_CUR.CONDSYNDIC,
                                      --3.1
                                      NULL, -- R_CUR.RACCORDEMENTLONG,
                                      NULL, -- R_CUR.ETATZAPM,
                                      NULL, -- TO_DATE(R_CUR.DATEZAPMCIBLE,'YYYY/MM/DD'),
                                      NULL, -- R_CUR.SUPPORTINFRAFTTE,
                                      NULL, -- R_CUR.ETATIMMPBSPECIFIQUE,
                                      NULL, -- R_CUR.CHMPRSV6,
                                      NULL -- R_CUR.CHMPRSV7
                                      );
            EXCEPTION
              WHEN OTHERS THEN
                NAT_FF1_DOC.NEW_LOG_FIC_TRT(P_FILE_ID, 'KO', 'Au moins un des champs obligatoires n''est pas conforme à la STI');
                plog.ERROR('Erreur lors de l''insertion CR MAD PM 3.0 dans la table finale','SQLERRM', SQLERRM);
                plog.full_error_backtrace('File_ID',P_FILE_ID);
                plog.full_call_stack('File_ID',P_FILE_ID);
            END;
            /*BEGIN
              vCATRACLGMT_CAL := SUBSTR(NAT_FTTH_OI.GET_CRL(R_CUR.CODEINSEEIMMEUBLE,
                                                            R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                                            R_CUR.NUMEROVOIEIMMEUBLE,
                                                            R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                            R_CUR.IDENTIFIANTIMMEUBLE,
                                                            R_CUR.BATIMENTIMMEUBLE,
                                                            R_CUR.REFERENCEPM,
                                                            R_CUR.CODEADRESSEIMMEUBLE),0,100);
            EXCEPTION
              WHEN OTHERS THEN
                vCATRACLGMT_CAL := NULL;
            END;
            IF vCATRACLGMT_CAL IS NOT NULL AND vAdr_Imm_Oi_Id IS NOT NULL THEN
              UPDATE ADR_IMM_OI a
                 SET a.CATRACLGMT_CAL = vCATRACLGMT_CAL
               WHERE a.ADR_IMM_OI_ID  = vAdr_Imm_Oi_Id;
            END IF;*/
          END;
          IF R_CUR.CODEINSEEPM IS NOT NULL THEN
            vInseePM := R_CUR.CODEINSEEPM;
          ELSE
            vInseePM := 'Insee';
          END IF;
          COMMIT;
        END LOOP;
        --Sauvegarde de la typologie
        FOR R_VERIF_PRJ IN C_VERIF_PRJ(v_idpm) LOOP
          IF R_VERIF_PRJ.PART_ADD IS NOT NULL AND R_VERIF_PRJ.PART_ADD = 'BTL' THEN
              NAT_FF1_QMP_BTOC.NEW_SAUVEGARDE_TYPO_BTL(v_idpm,
                                                      R_VERIF_PRJ.PRJPM_ID,
                                                      'MAD');
            END IF;

        END LOOP;

      END IF;
      IF v_idpm IS NOT NULL THEN
        NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',v_idpm,P_FILE_ID);
        BEGIN
          NAT_FF1.UPD_INFO_ADR_PM_IPE(v_idpm,P_FILE_ID,'CRMAD','3.0');
        EXCEPTION
          WHEN OTHERS THEN
            plog.ERROR('Erreur lors de la mise à jour de la table ADR_PM','SQLERRM', SQLERRM,'','');
        END;
        BEGIN
          NAT_FF1_TRT_FLX.TRT_CRMAD_IN(P_FILE_ID);
        EXCEPTION
          WHEN OTHERS THEN
            plog.ERROR('Erreur lors du traitement In FF','SQLERRM', SQLERRM,'','');
            NAT_FF1_DOC.NEW_LOG_FIC_TRT(P_FILE_ID, 'KO', 'Erreur lors du traitement In FF');
        END;
    BEGIN
        NAT_FF1_BTMMO.TRT_MMO_CRMAD_IN(P_FILE_ID);
    EXCEPTION
      WHEN OTHERS THEN
        plog.ERROR('Erreur lors du traitement In FF CRMAD insert prcs mmo','SQLERRM', SQLERRM,'','');
            NAT_FF1_DOC.NEW_LOG_FIC_TRT(P_FILE_ID, 'KO', 'Erreur lors du traitement In FF CRMAD insert prcs mmo');
    END;

        -- cloture alerte PM Créé à l¿état déployé sans CR MAD
        NAT_FF1_CR_MAD_PM.CLS_CRMAD_PM_DPL(v_idpm);
        -- cloture alerte CR MAD non Présent : PM déployé dans IPE
        NAT_FF1_CR_MAD_PM.CLS_CRMAD_ETAPM(v_idpm);

        -- S'il y a une demande d'info associé, passer l'état à "MIS A JOUR"
        OPEN C_DMD_INFO(v_idpm);
        FETCH C_DMD_INFO INTO vDMD_INFO_ID;
        IF C_DMD_INFO%FOUND THEN
          NAT_FF1_DMD_INFO.SET_DMD_INFO_MAJ(vDMD_INFO_ID);
        END IF;
        CLOSE C_DMD_INFO;

        -- Controles CR MAD
        NAT_FF1_CR_MAD_PM.CTRL_NON_RCP_CRMAD_PM(v_idpm);
        NAT_FF1_CR_MAD_PM.CTRL_ABS_MOD_SCP(v_idpm);
        NAT_FF1_CR_MAD_PM.CTRL_ABS_REF_PRS(v_idpm);
        NAT_FF1_CR_MAD_PM.CTRL_INC_MOD_SCP(v_idpm);
        NAT_FF1_CR_MAD_PM.CTRL_CRMAD_KO(v_idpm);

        OPEN C_VERIF_PRJ(v_idpm);
        FETCH C_VERIF_PRJ INTO R_VERIF_PRJ;
        vPART_ADD := R_VERIF_PRJ.PART_ADD;
        vFoundPrj := C_VERIF_PRJ%FOUND;
        CLOSE C_VERIF_PRJ;
        /*IF (vPART_ADD IS NOT NULL AND vPART_ADD = 'BTL' ) THEN
          --Contrôle CR MAD projet FEP
          NAT_FF1_CTRL_FEP.CTRL_ABS_CRMAD_OK(v_idpm);
        END IF;*/


        -- Controles Demandes d'info
        NAT_FF1_DMD_INFO.CTRL_AR_RECU_PM(v_idpm);
        -- Contrôle adresse
        vCTRL_ADR_REG_CRMAD := NAT_FF1_CTRL_ADR.CTRL_ADR_REG_CRMAD(v_idpm);

        -- Récupérer le partenaire
        OPEN C_GET_PART_FLUX;
        FETCH C_GET_PART_FLUX INTO R_GET_PART_FLUX;
        CLOSE C_GET_PART_FLUX;


        IF not vFoundPrj THEN
          -- Pas de projet, en ZMD : on essaye de le créer
          --IF P_TYPZON = 'ZMD' AND P_CODOI = 'FTEL' THEN
            --NAT_FF1_ZA.NEW_PRJPM_ZA(v_idpm,'AMI');
            -- Controle si réception sur un PM abandonné OI
            --vCtrl_ABN_OI := NAT_FF1_CTRL_ZMD.CTRL_CMN_MAD_PM_ABN_OI(v_idpm, 'AMI');
          IF P_TYPZON = 'ZMD' AND P_CODOI = NAT_FTTH_OI.P_CODOI_SIMPSON THEN
            NAT_FF1_ZMD.NEW_PRJPM(v_idpm,NAT_FTTH_OI.P_CODOC_SIMPSON);
            -- Controle si réception sur un PM abandonné OI
            --vCtrl_ABN_OI := NAT_FF1_CTRL_ZMD.CTRL_CMN_MAD_PM_ABN_OI(v_idpm,NAT_FTTH_OI.P_CODOC_SIMPSON);
          ELSIF P_TYPZON = 'ZMD' AND P_COD_PART_FLUX = 'AXIO' THEN
            NAT_FF1_ZMD.NEW_PRJPM(v_idpm, 'RIP');
            -- Controle si réception sur un PM abandonné OI
            --vCtrl_ABN_OI := NAT_FF1_CTRL_ZMD.CTRL_CMN_MAD_PM_ABN_OI(v_idpm, 'RIP');
          ELSIF P_TYPZON = 'ZMD' AND P_COD_PART_FLUX = 'ALTI' THEN
            NAT_FF1_ZMD.NEW_PRJPM(v_idpm, 'ALT');
            -- Controle si réception sur un PM abandonné OI
            --vCtrl_ABN_OI := NAT_FF1_CTRL_ZMD.CTRL_CMN_MAD_PM_ABN_OI(v_idpm, 'ALT');
          ELSIF P_TYPZON = 'ZMD' AND P_COD_PART_FLUX = 'COVA' THEN
            NAT_FF1_ZMD.NEW_PRJPM(v_idpm, 'COV');
            -- Controle si réception sur un PM abandonné OI
            --vCtrl_ABN_OI := NAT_FF1_CTRL_ZMD.CTRL_CMN_MAD_PM_ABN_OI(v_idpm, 'COV');
          ELSIF P_TYPZON = 'ZMD' AND P_COD_PART_FLUX = 'TDF' THEN
            NAT_FF1_ZMD.NEW_PRJPM(v_idpm, 'TDF');
            -- Controle si réception sur un PM abandonné OI
            --vCtrl_ABN_OI := NAT_FF1_CTRL_ZMD.CTRL_CMN_MAD_PM_ABN_OI(v_idpm, 'TDF');
          ELSIF P_TYPZON = 'ZMD' AND P_COD_PART_FLUX = 'SFRA' THEN
            IF R_GET_PART_FLUX.COD_PART_ADDU = 'RSF' THEN
              NAT_FF1_ZMD.NEW_PRJPM(v_idpm, 'RSF');
            ELSE
              NULL;
            END IF;
          ELSIF P_TYPZON = 'ZMD' AND P_COD_PART_FLUX = NAT_FTTH_OI.P_OC_SIEA THEN
            NAT_FF1_ZMD.NEW_PRJPM(v_idpm,'SIA');
            -- Controle si réception sur un PM abandonné OI
            --vCtrl_ABN_OI := NAT_FF1_CTRL_ZMD.CTRL_CMN_MAD_PM_ABN_OI(v_idpm, NAT_FTTH_OI.P_CODOC_SIEA);
          END IF;
        ELSIF vETATCRCOMMANDEPM = 'OK' AND R_VERIF_PRJ.ETAPRJPM = 'ABO' THEN
          vCtrl_ABN_OI := NAT_FF1_CTRL.CTRL_PM_MADPM_PRJ_ABO(v_idpm, R_VERIF_PRJ.PRJPM_ID, R_VERIF_PRJ.PART_ADD);
        END IF;
        NAT_FF1_DOC.NEW_LOG_FIC_TRT(P_FILE_ID, 'OK', 'Le CR MAD PM a été traité avec succès');
      END IF;

      SELECT 'MAD_'||P_CODOI||'_'||v_idpm
        INTO vRegExp
        FROM DUAL;
      NAT_IFC_TRT.UPDATE_FILE_REGEXP(P_FILE_ID,UPPER(vRegExp));

      COMMIT;

      -- Rebond vers l'OC SFR si on est en ZTD peut importe le partenariat et présence projet ou pas - 27/08
      IF P_TYPZON = 'ZTD' AND R_CUR.ETATCRCOMMANDEPM = 'OK' THEN
        BEGIN
          GEN_REBOND('FTTH_REBOND_CRMADPM_HB', vNomFic,P_FILE_ID,v_idpm);
          BEGIN
            NAT_FF1_TRT_FLX.TRT_CRMAD_OUT(P_FILE_ID);
          EXCEPTION
            WHEN OTHERS THEN
              plog.ERROR('Erreur lors du traitement Out FF','SQLERRM', SQLERRM,'','');
              NAT_FF1_DOC.NEW_LOG_FIC_TRT(P_FILE_ID, 'KO', 'Erreur lors du traitement Out FF');
          END;
        EXCEPTION
          WHEN OTHERS THEN
            plog.ERROR('Erreur lors du rebond CRMAD 3.0 vers le l''OC','SQLERRM', SQLERRM);
            NAT_FF1_DOC.NEW_LOG_FIC_TRT(P_FILE_ID, 'KO', 'Erreur lors du rebond CRMAD 3.0 vers le l''OC');
        END;
      END IF;

      IF rep = 'DIR_FTTH_OI_FT' THEN
        vIfcOutSig :=  'FTTH_SIG_MADPM_OUT_FT';
      ELSIF rep = 'DIR_FTTH_OI_SFR' THEN
        vIfcOutSig := 'FTTH_SIG_HBCRMADPM_OUT_SFR';
      ELSIF rep = 'DIR_FTTH_OI_NC' THEN
        vIfcOutSig := 'FTTH_SIG_MADPM_OUT_NC';
      ELSIF rep = 'DIR_FTTH_AXIONE_BFILE' THEN
        vIfcOutSig := 'FTTH_SIG_MADPM_OUT_SEQ';
      ELSIF rep = 'DIR_FTTH_OI_FREE' THEN
        vIfcOutSig := 'FTTH_SIG_MADPM_OUT_FREE';
      END IF;

      --Rebond -> SIG
      BEGIN
        GEN_REBOND(vIfcOutSig, vNomFic,P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors du rebond CRMAD 3.0 vers le SIG','SQLERRM', SQLERRM);
          NAT_FF1_DOC.NEW_LOG_FIC_TRT(P_FILE_ID, 'KO', 'Erreur lors du rebond CRMAD 3.0 vers le l''OC');
      END;

      --Envoi de l'AR MAD (en 3.0)
       OPEN C_PART_FLUX;
       FETCH C_PART_FLUX INTO R_PART_FLUX;
       CLOSE C_PART_FLUX;

       vCodPartFlux := R_PART_FLUX.COD_PART_FLUX;


       IF (vCodPartFlux = 'FTEL') AND v_idpm IS NOT NULL THEN
         NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_FT(v_idpm);
         vNomIfc := 'FTTH_ARMAD_OUT_FT';
         -- On lance le tranfert SIO2
         vNomIfcSio2 := 'FTTH_SIO2_FT_MAD_OUT';
         --GEN_REBOND( 'FTTH_SIO2_FT_MAD_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
       ELSIF (vCodPartFlux = NAT_FTTH_OI.P_CODOI_SIMPSON) AND v_idpm IS NOT NULL THEN
         NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_SMP (v_idpm);
         vNomIfc := 'FTTH_ARMAD_SMP_OUT'; --> Ne sera pas envoyé
         vNomIfcOfSmp := 'FTTH_ARMAD_OFSMP_OUT'; --> Sera envoyé
         vNomIfcSio2 := 'FTTH_SIO2_SMP_MAD_OUT';
         -- On lance le tranfert SIO2
         --GEN_REBOND( 'FTTH_SIO2_SMP_MAD_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
       ELSIF (vCodPartFlux = 'SFRA') AND v_idpm IS NOT NULL THEN
         NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_SFRA(v_idpm);
         vNomIfc := 'FTTH_ARMAD_OUT_SFRA';
         vNomIfcSio2 := 'FTTH_SIO2_SFR_MAD_OUT';
         -- On lance le tranfert SIO2
         --GEN_REBOND( 'FTTH_SIO2_SFR_MAD_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
       ELSIF (vCodPartFlux = 'NUME') AND v_idpm IS NOT NULL THEN
         NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_NUME(v_idpm);
         vNomIfc := 'FTTH_ARMAD_OUT_NUME';
       ELSIF (vCodPartFlux = 'FREE') AND v_idpm IS NOT NULL THEN
         NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_FREE(v_idpm);
         vNomIfc := 'FTTH_ARMAD_OUT_FREE';
         vNomIfcSio2 := 'FTTH_SIO2_FREE_MAD_OUT';
         -- On lance le tranfert SIO2
         --GEN_REBOND( 'FTTH_SIO2_FREE_MAD_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
       ELSIF (vCodPartFlux = 'ALTI') AND v_idpm IS NOT NULL THEN
         NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_ALTI(v_idpm);
         vNomIfc := 'FTTH_ARMAD_OUT_ALTI';
         vNomIfcSio2 := 'FTTH_SIO2_ALTI_MAD_OUT';
         -- On lance le tranfert SIO2
         --GEN_REBOND( 'FTTH_SIO2_ALTI_MAD_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
       ELSIF (vCodPartFlux = 'AXIO') AND v_idpm IS NOT NULL THEN
          -- On vérifie que le partenaire flux est Axione et on récupère le SIREN
          --> Dans le cas d'axione
          OPEN C_VERIF_OI(vCodPartFlux);
          FETCH C_VERIF_OI INTO R_VERIF_OI;
          vFoundOI := C_VERIF_OI%FOUND;
          CLOSE C_VERIF_OI;

          IF vFoundOI THEN
            NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_AXIO(v_idpm);
            vNomIfc := 'FTTH_ARMAD_OUT_AXIO';
          ELSE
            vNomIfc := NULL;
          END IF;
          vNomIfcSio2 := 'FTTH_SIO2_AXNE_MAD_OUT';
          -- On lance le tranfert SIO2
          --GEN_REBOND( 'FTTH_SIO2_AXNE_MAD_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
        ELSIF (vCodPartFlux = 'TDF') AND v_idpm IS NOT NULL THEN
          -- On vérifie que le partenaire flux est TDF et on récupère le SIREN
          --> Dans le cas de TDF
          OPEN C_VERIF_OI(vCodPartFlux);
          FETCH C_VERIF_OI INTO R_VERIF_OI;
          vFoundOI := C_VERIF_OI%FOUND;
          CLOSE C_VERIF_OI;

          IF vFoundOI THEN
            NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_TDF(v_idpm);
            vNomIfc := 'FTTH_ARMAD_OUT_TDF';
          ELSE
            vNomIfc := NULL;
          END IF;
          vNomIfcSio2 := 'FTTH_SIO2_TDF_MAD_OUT';
          -- On lance le tranfert SIO2
          --GEN_REBOND( 'FTTH_SIO2_CRMADPM_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
          --GEN_REBOND( 'FTTH_SIO2_TDF_MAD_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
        ELSIF (vCodPartFlux = 'COVA') AND v_idpm IS NOT NULL THEN
          -- On vérifie que le partenaire flux est v_idpmCovage
          --> Dans le cas de covage
          OPEN C_VERIF_OI(vCodPartFlux);
          FETCH C_VERIF_OI INTO R_VERIF_OI;
          vFoundOI := C_VERIF_OI%FOUND;
          CLOSE C_VERIF_OI;

          IF vFoundOI AND P_CODOI = 'SEQU' THEN
            NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_COVA(v_idpm);
            vNomIfc := 'FTTH_ARMAD_OUT_COVA';
          ELSIF vFoundOI AND P_CODOI <> 'SEQU' THEN
            NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_COVA(v_idpm);
            vDspCovaRM := NAT_FTTH_RIP_COV.IS_DSP_REMAIN(P_COD_OI => P_CODOI);
            IF vDspCovaRM = 1 THEN
              vNomIfc := 'FTTH_ARMAD_OUT_COVA_ZMD_RM';
            ELSE
            vNomIfc := 'FTTH_ARMAD_OUT_COVA_ZMD';
            END IF;
          ELSE
            vNomIfc := NULL;
          END IF;
          vNomIfcSio2 := 'FTTH_SIO2_COVA_MAD_OUT';
          -- On lance le tranfert SIO2 uniquement en mode IFC
          --GEN_REBOND( 'FTTH_SIO2_CRMADPM_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
          --GEN_REBOND( 'FTTH_SIO2_COVA_MAD_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
        ELSIF (vCodPartFlux = NAT_FTTH_OI.P_OC_SIEA) AND v_idpm IS NOT NULL THEN
          -- On vérifie que le partenaire flux est Axione et on récupère le SIREN
          --> Dans le cas d'axione
          OPEN C_VERIF_OI(vCodPartFlux);
          FETCH C_VERIF_OI INTO R_VERIF_OI;
          vFoundOI := C_VERIF_OI%FOUND;
          CLOSE C_VERIF_OI;

          IF vFoundOI THEN
            NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_SIEA(v_idpm);
            vNomIfc := 'FTTH_ARMAD_OUT_SIEA';
          ELSE
            vNomIfc := NULL;
          END IF;
          -- On lance le tranfert SIO2
          --GEN_REBOND( 'FTTH_SIO2_SIEA_MAD_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
          vNomIfcSio2 := 'FTTH_SIO2_SIEA_MAD_OUT';
        ELSE
          vNomIfc := NULL;
          vNomIfcSio2 := NULL;
        END IF;
        -- On lance le tranfert SIO2
        IF vNomIfcSio2 IS NOT NULL THEN
          GEN_REBOND( vNomIfcSio2, R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
        END IF;

        IF vNomIfc IS NOT NULL THEN
          -- On désactive l'archivage pour les AR MAD Axione
          vidTrt := CMN_IFC.GENERER_INTERFACE(vNomIfc,
                                              (CASE vNomIfc
                                                 WHEN 'FTTH_ARMAD_OUT_AXIO' THEN
                                                   0 --> Pas d'archivage
                                                 ELSE
                                                   1
                                              END),
                                              NULL,
                                              NULL
                                              );
          IF vNomIfc = 'FTTH_ARMAD_OUT_AXIO' THEN
            INSERT INTO ARMAD_AXN_SAVE_ID VALUES (vidTrt);
          END IF;
        END IF;

        IF vidTrt IS NOT NULL  THEN
          OPEN C_INFO_IFC_OUT(vidTrt);
          FETCH C_INFO_IFC_OUT INTO R_INFO_IFC_OUT;
          CLOSE C_INFO_IFC_OUT;

          NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => R_INFO_IFC_OUT.FILE_ID,
                               P_TYP_IFC  => 'OUT',
                               P_DATTRT   => SYSDATE,
                               P_IDPM     => v_idpm,
                               P_CODOI    => P_CODOI,
                               P_COD_PART => NULL,
                               P_IFC_ID   => R_INFO_IFC_OUT.IFC_ID,
                               P_PRM_ID   => R_INFO_IFC_OUT.PRM_ID);
        END IF;

        IF vNomIfcOfSmp IS NOT NULL THEN
          -- On désactive l'archivage pour les AR MAD Axione
          vidTrtOfSmp := CMN_IFC.GENERER_INTERFACE(vNomIfcOfSmp,
                                              1,
                                              NULL,
                                              NULL
                                              );
        END IF;

        IF vidTrtOfSmp IS NOT NULL THEN
          OPEN C_INFO_IFC_OUT(vidTrtOfSmp);
          FETCH C_INFO_IFC_OUT INTO R_INFO_IFC_OUT;
          CLOSE C_INFO_IFC_OUT;

          NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => R_INFO_IFC_OUT.FILE_ID,
                               P_TYP_IFC  => 'OUT',
                               P_DATTRT   => SYSDATE,
                               P_IDPM     => v_idpm,
                               P_CODOI    => 'FTEL',
                               P_COD_PART => NULL,
                               P_IFC_ID   => R_INFO_IFC_OUT.IFC_ID,
                               P_PRM_ID   => R_INFO_IFC_OUT.PRM_ID);
        END IF;

        --Vérification que le fichier CR MAD reçu est bien traité : déclenche une alerte dans le cas d'une réception d'un cr mad mais non traité
        IF R_VERIF_PRJ.PRJPM_ID IS NOT NULL then
          NAT_FF1_CTRL.CTRL_CMD_CRMAD_PM_NON_TRT(P_FILE_ID,R_VERIF_PRJ.PRJPM_ID,v_idpm);
        END IF;
        NAT_FF1_CTRL.CLOSE_ALERTE(R_VERIF_PRJ.PRJPM_ID,
                                  NAT_FF1_CTRL.ID_ALRT_CMD_CRMAD_ABS_ALL,
                                  v_idpm);
    END;

-----------------------------------------------------------------------------------
-- Post Traitement COVA CR MAD PM 3.0
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRMADPM_IN_COVA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := NAT_FTTH_OI.GET_OI(P_FILE_ID);
  IF vCodOi = 'SEQU' THEN
    POS_TRT_CRMADPM_V30(P_FILE_ID,'SEQU','ZTD');
  ELSE
    POS_TRT_CRMADPM_V30(P_FILE_ID,vCodOi,'ZMD','COVA');
  END IF;
END;

-----------------------------------------------------------------------------------
-- Post Traitement FT CRMAD PM
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRMADPM_IN_FT_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
-- Vérif présence et données PM
    CURSOR C_VERIF_PM IS
      SELECT DISTINCT cpn.REFERENCEPM, cpn.REFERENCENRO
        FROM CPN                      cpn,
             CRD_MAD_PM_FT_30_TMP     crd
       WHERE cpn.CODOI = vCodOi
         AND cpn.REFERENCENRO IS NOT NULL
         AND crd.REFERENCEPM = cpn.REFERENCEPM
         AND NOT EXISTS (SELECT 1
                           FROM PM
                          WHERE pm.IDPM = cpn.REFERENCEPM);
    R_VERIF_PM      C_VERIF_PM%ROWTYPE;

    CURSOR C_ADR_IPE(vIdPM  PM.IDPM%TYPE) IS
      SELECT DISTINCT crd.NUMEROVOIEPM,
             crd.COMPLEMENTVOIEPM,
             crd.CODEINSEEPM,
             crd.CODEPOSTALPM,
             crd.TYPEVOIEPM,
             crd.NOMVOIEPM,
             crd.ETATPM,
             crd.FILE_ID
        FROM CRD_MAD_PM_FT_30_TMP   crd
       WHERE crd.REFERENCEPM = vIdPM;
    R_ADR_IPE       C_ADR_IPE%ROWTYPE;

    CURSOR C_CODEINSEE(vCodeInsee   IPE.CODEINSEEPM%TYPE) IS
      SELECT cmn.COD_INSEE
        FROM BDCOM cmn
       WHERE cmn.COD_INSEE = vCodeInsee;
    R_CODEINSEE     C_CODEINSEE%ROWTYPE;
    vFoundInsee     BOOLEAN;

    CURSOR C_CODEINSEE_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE, vCodePostal    IPE.CODEPOSTALPM%TYPE) IS
      SELECT DISTINCT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.CODPTTCMN = vCodePostal
         AND pos.COD_INSEE = vCodeInsee;
    R_CODEINSEE_CODE_POSTAL    C_CODEINSEE_CODE_POSTAL%ROWTYPE;
    vFoundCP1   BOOLEAN;

    CURSOR C_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE) IS
      SELECT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.COD_INSEE = vCodeInsee
         AND ROWNUM        = 1;
    R_CODE_POSTAL    C_CODE_POSTAL%ROWTYPE;
    vFoundCP2   BOOLEAN;

    CURSOR C_TYPEVOIE(vTypevoie   IPE.TYPEVOIEPM%TYPE) IS
      SELECT btyp.CODVAL AS TYPEVOIEPM
                                FROM BDMVAL btyp
       WHERE UPPER(btyp.LIBVAL)  = UPPER(vTypevoie)
         AND btyp.LSTVAL_ID     = 'TYPVOI';
    R_TYPEVOIE     C_TYPEVOIE%ROWTYPE;

    CURSOR C_COMPLEMENTVOIE (vComplementvoie    IPE.COMPLEMENTVOIEPM%TYPE) IS
      SELECT bcomp.CODVAL AS COMPLEMENTVOIEPM
                                FROM BDMVAL bcomp
       WHERE UPPER(bcomp.LIBVAL)  = UPPER(vComplementvoie)
       AND bcomp.LSTVAL_ID     = 'CMPVOI';
    R_COMPLEMENTVOIE     C_COMPLEMENTVOIE%ROWTYPE;

-- Recherche ZMD
CURSOR C_TYPZONE_ZMD IS
  SELECT 1
    FROM CRD_MAD_PM_FT_30_TMP cmt
   WHERE cmt.TYPEZONE = 3;
R_TYPZONE_ZMD C_TYPZONE_ZMD%ROWTYPE;
vFoundZmd     BOOLEAN;

-- recherche du pm dans la table temp
CURSOR C_IDPM IS
  SELECT crmad.REFERENCEPM
    FROM CRD_MAD_PM_FT_30_TMP crmad
   WHERE crmad.REFERENCEPM IS NOT NULL
     AND ROWNUM = 1;
R_IDPM   C_IDPM%ROWTYPE;
vFoundPM BOOLEAN;

-- recherche du pm dans la liste des pm SFOR
CURSOR C_PM_SFOR(vIDPM   PM.IDPM%TYPE) IS
  SELECT 1
    FROM LST_PM_OF_TO_SFOR lst
   WHERE lst.IDPM = vIDPM
     AND lst.DATMIG IS NOT NULL;
R_PM_SFOR    C_PM_SFOR%ROWTYPE;
vFoundSFOR   BOOLEAN;

-- Alertes
vAlrtPmCreDpl NUMBER;
-- Others
vTYPZON       VARCHAR2(3);

BEGIN
  vCodOi := NAT_FTTH_OI.GET_OI(P_FILE_ID);

  OPEN C_TYPZONE_ZMD;
  FETCH C_TYPZONE_ZMD INTO R_TYPZONE_ZMD;
  vFoundZmd := C_TYPZONE_ZMD%FOUND;
  CLOSE C_TYPZONE_ZMD;

  -- on récupère l'IDPM pour vérifier qu'il ne fasse pas partie des PM migrés en SFOR
  OPEN C_IDPM;
  FETCH C_IDPM INTO R_IDPM;
  vFoundPM := C_IDPM%FOUND;
  CLOSE C_IDPM;

  IF vFoundPM THEN --> On vérifie quand meme si l'IDPM n'est pas NULL
    OPEN C_PM_SFOR(R_IDPM.REFERENCEPM);
    FETCH C_PM_SFOR INTO R_PM_SFOR;
    vFoundSFOR := C_PM_SFOR%FOUND;
    CLOSE C_PM_SFOR;
  ELSE
    vFoundSFOR := TRUE;  --> Si c'est SFOR (Pour éviter le traitement)
  END IF;

  IF NOT vFoundSFOR THEN --> Si c'est SFOR, alors on ne traite pas
  IF vFoundZmd THEN
    vTYPZON := 'ZMD';
    CLEAN_CRMAD_ZMD_OF_V30 (vCodOi);

    -- Création du PM avec un etat adductable
        FOR R_VERIF_PM IN C_VERIF_PM LOOP
          FOR R_ADR_IPE IN C_ADR_IPE(R_VERIF_PM.REFERENCEPM) LOOP
            OPEN C_CODEINSEE(R_ADR_IPE.CODEINSEEPM);
            FETCH C_CODEINSEE INTO R_CODEINSEE;
            vFoundInsee := C_CODEINSEE%FOUND;
            CLOSE C_CODEINSEE;

            IF vFoundInsee THEN
              OPEN C_CODEINSEE_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM, R_ADR_IPE.CODEPOSTALPM);
              FETCH C_CODEINSEE_CODE_POSTAL INTO R_CODEINSEE_CODE_POSTAL;
              vFoundCP1:= C_CODEINSEE_CODE_POSTAL%FOUND;
              CLOSE C_CODEINSEE_CODE_POSTAL;

              OPEN C_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM);
              FETCH C_CODE_POSTAL INTO R_CODE_POSTAL;
              vFoundCP2:= C_CODE_POSTAL%FOUND;
              CLOSE C_CODE_POSTAL;

              IF vFoundCP1 OR vFoundCP2 THEN
                BEGIN
                  OPEN C_TYPEVOIE(R_ADR_IPE.TYPEVOIEPM);
                  FETCH C_TYPEVOIE INTO R_TYPEVOIE;
                  CLOSE C_TYPEVOIE;

                  OPEN C_COMPLEMENTVOIE(R_ADR_IPE.TYPEVOIEPM);
                  FETCH C_COMPLEMENTVOIE INTO R_COMPLEMENTVOIE;
                  CLOSE C_COMPLEMENTVOIE;

                  NAT_FF1.NEW_PM_FF1(P_IDPM      => R_VERIF_PM.REFERENCEPM,
                                     P_NOMSIT    => R_VERIF_PM.REFERENCEPM,
                                     P_NUMVOI    => R_ADR_IPE.NUMEROVOIEPM,
                                     P_TYPVOI    => R_TYPEVOIE.TYPEVOIEPM,
                                     P_CMPVOI    => R_COMPLEMENTVOIE.COMPLEMENTVOIEPM,
                                     P_NOMVOI    => R_ADR_IPE.NOMVOIEPM,
                                     P_COD_INSEE => R_ADR_IPE.CODEINSEEPM,
                                     P_CODPTTCMN => NVL(R_CODEINSEE_CODE_POSTAL.CODEPOSTALPM, R_CODE_POSTAL.CODEPOSTALPM),
                           P_COD_OI =>      vCodOi,
                                     P_IDNRO     => R_VERIF_PM.REFERENCENRO,
                           P_ETAPM =>       NAT_FF1.P_ADDUCTABLE,
                           P_NOMGEO_COLOC => NULL,
                                     P_TYP_ZONE     => 'ZMD',
                           P_IS_ZA        => 1);

         --> Création d'une alerte systématiquement pour indiquer que la créatoin du PM aurait du se faire bien avant
                vAlrtPmCreDpl := NAT_FF1_CR_MAD_PM.CTRL_PM_CRE_DPL(R_VERIF_PM.REFERENCEPM);
     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via CR MAD 3.0','SQLERRM', SQLERRM);
                    plog.full_error_backtrace('Referencepm', R_VERIF_PM.REFERENCEPM);
                    plog.full_call_stack('File_ID', R_ADR_IPE.FILE_ID);
     END;
              END IF;
            END IF;
          END LOOP;
   END LOOP;
  ELSE
    vTYPZON := 'ZTD';
  END IF;

  POS_TRT_CRMADPM_V30(P_FILE_ID,vCodOi,vTYPZON);

  END IF;

END;

-----------------------------------------------------------------------------------
-- Post Traitement SFRA CRMAD PM
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRMADPM_IN_SFRA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  vTypzon VARCHAR2(3);
  -- Recherche ZMD
  CURSOR C_TYPZONE_ZMD IS
    SELECT 1
      FROM CRD_MAD_PM_SFRA_30_TMP cmt
     WHERE cmt.TYPEZONE = 3;
  R_TYPZONE_ZMD C_TYPZONE_ZMD%ROWTYPE;
  vFoundZmd     BOOLEAN;
  -- PMs à créer
    CURSOR C_VERIF_PM IS
      SELECT DISTINCT cpn.REFERENCEPM, cpn.REFERENCENRO
        FROM CPN                      cpn,
             CRD_MAD_PM_SFRA_30_TMP   crd
       WHERE cpn.CODOI = vCod_Oi
         AND cpn.REFERENCENRO IS NOT NULL
         AND crd.REFERENCEPM = cpn.REFERENCEPM
         AND NOT EXISTS (SELECT 1
                           FROM PM
                          WHERE pm.IDPM = cpn.REFERENCEPM);
    R_VERIF_PM      C_VERIF_PM%ROWTYPE;

    CURSOR C_ADR_IPE(vIdPM  PM.IDPM%TYPE) IS
      SELECT DISTINCT crd.NUMEROVOIEPM,
             crd.COMPLEMENTVOIEPM,
             crd.CODEINSEEPM,
             crd.CODEPOSTALPM,
             crd.TYPEVOIEPM,
             crd.NOMVOIEPM,
             crd.ETATPM,
             crd.FILE_ID
        FROM CRD_MAD_PM_SFRA_30_TMP crd
       WHERE crd.REFERENCEPM = vIdPM;
    R_ADR_IPE       C_ADR_IPE%ROWTYPE;

    CURSOR C_SOUSCRIPTION(vCodeInsee   IPE.CODEINSEEPM%TYPE) IS
      SELECT 1 AS VALEUR
        FROM SOUSCRIPTION s
       WHERE s.COD_INSEE = vCodeInsee
         AND s.COD_OI    = vCod_Oi;
    R_SOUSCRIPTION       C_SOUSCRIPTION%ROWTYPE;
    vFoundScp     BOOLEAN;

    CURSOR C_CODEINSEE(vCodeInsee   IPE.CODEINSEEPM%TYPE) IS
      SELECT cmn.COD_INSEE
        FROM BDCOM cmn
       WHERE cmn.COD_INSEE = vCodeInsee;
    R_CODEINSEE     C_CODEINSEE%ROWTYPE;
    vFoundInsee     BOOLEAN;

    CURSOR C_CODEINSEE_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE, vCodePostal    IPE.CODEPOSTALPM%TYPE) IS
      SELECT DISTINCT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.CODPTTCMN = vCodePostal
         AND pos.COD_INSEE = vCodeInsee;
    R_CODEINSEE_CODE_POSTAL    C_CODEINSEE_CODE_POSTAL%ROWTYPE;
    vFoundCP1   BOOLEAN;

    CURSOR C_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE) IS
      SELECT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.COD_INSEE = vCodeInsee
         AND ROWNUM        = 1;
    R_CODE_POSTAL    C_CODE_POSTAL%ROWTYPE;
    vFoundCP2   BOOLEAN;

    CURSOR C_TYPEVOIE(vTypevoie   IPE.TYPEVOIEPM%TYPE) IS
      SELECT btyp.CODVAL AS TYPEVOIEPM
                              FROM BDMVAL btyp
       WHERE UPPER(btyp.LIBVAL)  = UPPER(vTypevoie)
         AND btyp.LSTVAL_ID     = 'TYPVOI';
    R_TYPEVOIE     C_TYPEVOIE%ROWTYPE;

    CURSOR C_COMPLEMENTVOIE (vComplementvoie    IPE.COMPLEMENTVOIEPM%TYPE) IS
      SELECT bcomp.CODVAL AS COMPLEMENTVOIEPM
                              FROM BDMVAL bcomp
       WHERE UPPER(bcomp.LIBVAL)  = UPPER(vComplementvoie)
       AND bcomp.LSTVAL_ID     = 'CMPVOI';
    R_COMPLEMENTVOIE     C_COMPLEMENTVOIE%ROWTYPE;

  CURSOR C_GET_PART_FLUX(vCodeOI VARCHAR2) IS
  SELECT (CASE
            WHEN roi.RIP = 1 THEN
              'RSF'
            WHEN r.Cod_Oi = 'SFOR' THEN
              'AMI'
            ELSE 'ZAS'
          END)  AS COD_PART_ADDU
    FROM REF_OI roi,
         REF_OI_PRM r
   WHERE r.COD_OI = vCodeOI
     AND r.COD_PART_FLUX = 'SFRA'
     AND r.OBS  = 0
     AND roi.COD_OI = r.COD_OI
     AND ROWNUM = 1;
  R_GET_PART_FLUX C_GET_PART_FLUX%ROWTYPE;

  vAlrtPmCreDpl NUMBER;

BEGIN
  -- récuperation de l'OI
  vCod_Oi := NAT_FTTH_OI.GET_OI(P_FILE_ID);

  -- détermine le type de la zone
  OPEN C_TYPZONE_ZMD;
  FETCH C_TYPZONE_ZMD INTO R_TYPZONE_ZMD;
  vFoundZmd := C_TYPZONE_ZMD%FOUND;
  CLOSE C_TYPZONE_ZMD;

  IF vFoundZmd THEN
    vTypzon := 'ZMD';
  ELSE
    vTypzon := 'ZTD';
  END IF;

  -- déterminer le partenaire d'adduction
  OPEN C_GET_PART_FLUX(vCod_Oi);
    FETCH C_GET_PART_FLUX INTO R_GET_PART_FLUX;
  CLOSE C_GET_PART_FLUX;

   -- s'il s'agit du RIP SFR, création des PM avec un etat adductable
  IF R_GET_PART_FLUX.COD_PART_ADDU = 'RSF' THEN
      FOR R_VERIF_PM IN C_VERIF_PM LOOP
        FOR R_ADR_IPE IN C_ADR_IPE(R_VERIF_PM.REFERENCEPM) LOOP
          OPEN C_CODEINSEE(R_ADR_IPE.CODEINSEEPM);
          FETCH C_CODEINSEE INTO R_CODEINSEE;
          vFoundInsee := C_CODEINSEE%FOUND;
          CLOSE C_CODEINSEE;

          IF vFoundInsee THEN
            OPEN C_CODEINSEE_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM, R_ADR_IPE.CODEPOSTALPM);
            FETCH C_CODEINSEE_CODE_POSTAL INTO R_CODEINSEE_CODE_POSTAL;
            vFoundCP1:= C_CODEINSEE_CODE_POSTAL%FOUND;
            CLOSE C_CODEINSEE_CODE_POSTAL;

            OPEN C_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM);
            FETCH C_CODE_POSTAL INTO R_CODE_POSTAL;
            vFoundCP2:= C_CODE_POSTAL%FOUND;
            CLOSE C_CODE_POSTAL;

            IF vFoundCP1 OR vFoundCP2 THEN
              BEGIN
                OPEN C_TYPEVOIE(R_ADR_IPE.TYPEVOIEPM);
                FETCH C_TYPEVOIE INTO R_TYPEVOIE;
                CLOSE C_TYPEVOIE;

                OPEN C_COMPLEMENTVOIE(R_ADR_IPE.TYPEVOIEPM);
                FETCH C_COMPLEMENTVOIE INTO R_COMPLEMENTVOIE;
                CLOSE C_COMPLEMENTVOIE;

                NAT_FF1.NEW_PM_FF1(P_IDPM      => R_VERIF_PM.REFERENCEPM,
                                   P_NOMSIT    => R_VERIF_PM.REFERENCEPM,
                                   P_NUMVOI    => R_ADR_IPE.NUMEROVOIEPM,
                                   P_TYPVOI    => R_TYPEVOIE.TYPEVOIEPM,
                                   P_CMPVOI    => R_COMPLEMENTVOIE.COMPLEMENTVOIEPM,
                                   P_NOMVOI    => R_ADR_IPE.NOMVOIEPM,
                                   P_COD_INSEE => R_ADR_IPE.CODEINSEEPM,
                                   P_CODPTTCMN => NVL(R_CODEINSEE_CODE_POSTAL.CODEPOSTALPM, R_CODE_POSTAL.CODEPOSTALPM),
                           P_COD_OI =>      vCod_Oi,
                                   P_IDNRO     => R_VERIF_PM.REFERENCENRO,
                           P_ETAPM =>       NAT_FF1.P_ADDUCTABLE,
                           P_NOMGEO_COLOC => NULL,
                           P_TYP_ZONE     => 'ZMD',
                           P_IS_ZA        => 1);

              --> Création d'une alerte systématiquement pour indiquer que la créatoin du PM aurait du se faire bien avant
              vAlrtPmCreDpl := NAT_FF1_CR_MAD_PM.CTRL_PM_CRE_DPL(R_VERIF_PM.REFERENCEPM);
       EXCEPTION
         WHEN OTHERS THEN
           plog.ERROR('Erreur lors de la création du PM via CR MAD 3.0','SQLERRM', SQLERRM);
                  plog.full_error_backtrace('Referencepm', R_VERIF_PM.REFERENCEPM);
                  plog.full_call_stack('File_ID', R_ADR_IPE.FILE_ID);
       END;
            END IF;
          END IF;
        END LOOP;
     END LOOP;
   END IF;

  POS_TRT_CRMADPM_V30(P_FILE_ID,vCod_Oi,vTypzon,'SFRA');

END;

-----------------------------------------------------------------------------------
-- Post Traitement NUME CRMAD PM
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRMADPM_IN_NUME_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  POS_TRT_CRMADPM_V30(P_FILE_ID,'NUME','ZTD');
END;

-----------------------------------------------------------------------------------
-- Post Traitement SEQU CRMAD PM
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRMADPM_IN_AXIO_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS

vCodOi REF_OI.COD_OI%TYPE;
-- Vérif présence et données PM
    CURSOR C_VERIF_PM IS
      SELECT DISTINCT cpn.REFERENCEPM, cpn.REFERENCENRO
        FROM CPN                      cpn,
             CRD_MAD_PM_AXIO_30_TMP   crd
       WHERE cpn.CODOI = vCodOi
         AND cpn.REFERENCENRO IS NOT NULL
         AND crd.REFERENCEPM = cpn.REFERENCEPM
         AND NOT EXISTS (SELECT 1
                           FROM PM
                          WHERE pm.IDPM = cpn.REFERENCEPM);
    R_VERIF_PM      C_VERIF_PM%ROWTYPE;

    CURSOR C_ADR_IPE(vIdPM  PM.IDPM%TYPE) IS
      SELECT DISTINCT crd.NUMEROVOIEPM,
             crd.COMPLEMENTVOIEPM,
             crd.CODEINSEEPM,
             crd.CODEPOSTALPM,
             crd.TYPEVOIEPM,
             crd.NOMVOIEPM,
             crd.ETATPM,
             crd.FILE_ID
        FROM CRD_MAD_PM_AXIO_30_TMP crd
       WHERE crd.REFERENCEPM = vIdPM;
    R_ADR_IPE       C_ADR_IPE%ROWTYPE;

    CURSOR C_CODEINSEE(vCodeInsee   IPE.CODEINSEEPM%TYPE) IS
      SELECT cmn.COD_INSEE
        FROM BDCOM cmn
       WHERE cmn.COD_INSEE = vCodeInsee;
    R_CODEINSEE     C_CODEINSEE%ROWTYPE;
    vFoundInsee     BOOLEAN;

    CURSOR C_CODEINSEE_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE, vCodePostal    IPE.CODEPOSTALPM%TYPE) IS
      SELECT DISTINCT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.CODPTTCMN = vCodePostal
         AND pos.COD_INSEE = vCodeInsee;
    R_CODEINSEE_CODE_POSTAL    C_CODEINSEE_CODE_POSTAL%ROWTYPE;
    vFoundCP1   BOOLEAN;

    CURSOR C_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE) IS
      SELECT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.COD_INSEE = vCodeInsee
         AND ROWNUM        = 1;
    R_CODE_POSTAL    C_CODE_POSTAL%ROWTYPE;
    vFoundCP2   BOOLEAN;

    CURSOR C_TYPEVOIE(vTypevoie   IPE.TYPEVOIEPM%TYPE) IS
      SELECT btyp.CODVAL AS TYPEVOIEPM
                                FROM BDMVAL btyp
       WHERE UPPER(btyp.LIBVAL)  = UPPER(vTypevoie)
         AND btyp.LSTVAL_ID     = 'TYPVOI';
    R_TYPEVOIE     C_TYPEVOIE%ROWTYPE;

    CURSOR C_COMPLEMENTVOIE (vComplementvoie    IPE.COMPLEMENTVOIEPM%TYPE) IS
      SELECT bcomp.CODVAL AS COMPLEMENTVOIEPM
                                FROM BDMVAL bcomp
       WHERE UPPER(bcomp.LIBVAL)  = UPPER(vComplementvoie)
       AND bcomp.LSTVAL_ID     = 'CMPVOI';
    R_COMPLEMENTVOIE     C_COMPLEMENTVOIE%ROWTYPE;

-- Alertes
vAlrtPmCreDpl NUMBER;
-- Others
vTYPZON       VARCHAR2(3);

BEGIN
  vCodOi := NAT_FTTH_OI.GET_OI(P_FILE_ID);

  IF vCodOi <> 'SEQU' THEN
    vTYPZON := 'ZMD';

    -- Création du PM avec un etat adductable
      FOR R_VERIF_PM IN C_VERIF_PM LOOP
        FOR R_ADR_IPE IN C_ADR_IPE(R_VERIF_PM.REFERENCEPM) LOOP
          OPEN C_CODEINSEE(R_ADR_IPE.CODEINSEEPM);
          FETCH C_CODEINSEE INTO R_CODEINSEE;
          vFoundInsee := C_CODEINSEE%FOUND;
          CLOSE C_CODEINSEE;

          IF vFoundInsee THEN
            OPEN C_CODEINSEE_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM, R_ADR_IPE.CODEPOSTALPM);
            FETCH C_CODEINSEE_CODE_POSTAL INTO R_CODEINSEE_CODE_POSTAL;
            vFoundCP1:= C_CODEINSEE_CODE_POSTAL%FOUND;
            CLOSE C_CODEINSEE_CODE_POSTAL;

            OPEN C_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM);
            FETCH C_CODE_POSTAL INTO R_CODE_POSTAL;
            vFoundCP2:= C_CODE_POSTAL%FOUND;
            CLOSE C_CODE_POSTAL;

            IF vFoundCP1 OR vFoundCP2 THEN
              BEGIN
                OPEN C_TYPEVOIE(R_ADR_IPE.TYPEVOIEPM);
                FETCH C_TYPEVOIE INTO R_TYPEVOIE;
                CLOSE C_TYPEVOIE;

                OPEN C_COMPLEMENTVOIE(R_ADR_IPE.TYPEVOIEPM);
                FETCH C_COMPLEMENTVOIE INTO R_COMPLEMENTVOIE;
                CLOSE C_COMPLEMENTVOIE;

                NAT_FF1.NEW_PM_FF1(P_IDPM      => R_VERIF_PM.REFERENCEPM,
                                   P_NOMSIT    => R_VERIF_PM.REFERENCEPM,
                                   P_NUMVOI    => R_ADR_IPE.NUMEROVOIEPM,
                                   P_TYPVOI    => R_TYPEVOIE.TYPEVOIEPM,
                                   P_CMPVOI    => R_COMPLEMENTVOIE.COMPLEMENTVOIEPM,
                                   P_NOMVOI    => R_ADR_IPE.NOMVOIEPM,
                                   P_COD_INSEE => R_ADR_IPE.CODEINSEEPM,
                                   P_CODPTTCMN => NVL(R_CODEINSEE_CODE_POSTAL.CODEPOSTALPM, R_CODE_POSTAL.CODEPOSTALPM),
                           P_COD_OI =>      vCodOi,
                                   P_IDNRO     => R_VERIF_PM.REFERENCENRO,
                           P_ETAPM =>       NAT_FF1.P_ADDUCTABLE,
                           P_NOMGEO_COLOC => NULL,
                           P_TYP_ZONE     => 'ZMD',
                           P_IS_ZA        => 1);

         --> Création d'une alerte systématiquement pour indiquer que la créatoin du PM aurait du se faire bien avant
              vAlrtPmCreDpl := NAT_FF1_CR_MAD_PM.CTRL_PM_CRE_DPL(R_VERIF_PM.REFERENCEPM);
     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via CR MAD 3.0','SQLERRM', SQLERRM);
                  plog.full_error_backtrace('Referencepm', R_VERIF_PM.REFERENCEPM);
                  plog.full_call_stack('File_ID', R_ADR_IPE.FILE_ID);
     END;
            END IF;
          END IF;
        END LOOP;
   END LOOP;
  ELSE
    vTYPZON := 'ZTD';
  END IF;

  POS_TRT_CRMADPM_V30(P_FILE_ID,vCodOi,vTYPZON,'AXIO');

END;

-----------------------------------------------------------------------------------
-- Post Traitement FREE CR MAD PM
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRMADPM_IN_FREE_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  POS_TRT_CRMADPM_V30(P_FILE_ID,'FREE','ZTD');
END;

-----------------------------------------------------------------------------------
-- Post Traitement ALTI CRMAD PM
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRMADPM_IN_ALTI_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS

vCodOi REF_OI.COD_OI%TYPE;
-- Vérif présence et données PM
    CURSOR C_VERIF_PM IS
      SELECT DISTINCT cpn.REFERENCEPM, cpn.REFERENCENRO
        FROM CPN                      cpn,
             CRD_MAD_PM_ALTI_30_TMP   crd
       WHERE cpn.CODOI = vCodOi
         AND cpn.REFERENCENRO IS NOT NULL
         AND crd.REFERENCEPM = cpn.REFERENCEPM
         AND NOT EXISTS (SELECT 1
                           FROM PM
                          WHERE pm.IDPM = cpn.REFERENCEPM);
    R_VERIF_PM      C_VERIF_PM%ROWTYPE;

    CURSOR C_ADR_IPE(vIdPM  PM.IDPM%TYPE) IS
      SELECT DISTINCT crd.NUMEROVOIEPM,
             crd.COMPLEMENTVOIEPM,
             crd.CODEINSEEPM,
             crd.CODEPOSTALPM,
             crd.TYPEVOIEPM,
             crd.NOMVOIEPM,
             crd.ETATPM,
             crd.FILE_ID
        FROM CRD_MAD_PM_ALTI_30_TMP crd
       WHERE crd.REFERENCEPM = vIdPM;
    R_ADR_IPE       C_ADR_IPE%ROWTYPE;

    CURSOR C_CODEINSEE(vCodeInsee   IPE.CODEINSEEPM%TYPE) IS
      SELECT cmn.COD_INSEE
        FROM BDCOM cmn
       WHERE cmn.COD_INSEE = vCodeInsee;
    R_CODEINSEE     C_CODEINSEE%ROWTYPE;
    vFoundInsee     BOOLEAN;

    CURSOR C_CODEINSEE_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE, vCodePostal    IPE.CODEPOSTALPM%TYPE) IS
      SELECT DISTINCT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.CODPTTCMN = vCodePostal
         AND pos.COD_INSEE = vCodeInsee;
    R_CODEINSEE_CODE_POSTAL    C_CODEINSEE_CODE_POSTAL%ROWTYPE;
    vFoundCP1   BOOLEAN;

    CURSOR C_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE) IS
      SELECT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.COD_INSEE = vCodeInsee
         AND ROWNUM        = 1;
    R_CODE_POSTAL    C_CODE_POSTAL%ROWTYPE;
    vFoundCP2   BOOLEAN;

    CURSOR C_TYPEVOIE(vTypevoie   IPE.TYPEVOIEPM%TYPE) IS
      SELECT btyp.CODVAL AS TYPEVOIEPM
                                FROM BDMVAL btyp
       WHERE UPPER(btyp.LIBVAL)  = UPPER(vTypevoie)
         AND btyp.LSTVAL_ID     = 'TYPVOI';
    R_TYPEVOIE     C_TYPEVOIE%ROWTYPE;

    CURSOR C_COMPLEMENTVOIE (vComplementvoie    IPE.COMPLEMENTVOIEPM%TYPE) IS
      SELECT bcomp.CODVAL AS COMPLEMENTVOIEPM
                                FROM BDMVAL bcomp
       WHERE UPPER(bcomp.LIBVAL)  = UPPER(vComplementvoie)
       AND bcomp.LSTVAL_ID     = 'CMPVOI';
    R_COMPLEMENTVOIE     C_COMPLEMENTVOIE%ROWTYPE;

-- Alertes
vAlrtPmCreDpl NUMBER;
-- Others
vTYPZON       VARCHAR2(3);

BEGIN
  vCodOi := NAT_FTTH_OI.GET_OI(P_FILE_ID);
  vTYPZON := 'ZMD';

    -- Création du PM avec un etat adductable
      FOR R_VERIF_PM IN C_VERIF_PM LOOP
        FOR R_ADR_IPE IN C_ADR_IPE(R_VERIF_PM.REFERENCEPM) LOOP
          OPEN C_CODEINSEE(R_ADR_IPE.CODEINSEEPM);
          FETCH C_CODEINSEE INTO R_CODEINSEE;
          vFoundInsee := C_CODEINSEE%FOUND;
          CLOSE C_CODEINSEE;

          IF vFoundInsee THEN
            OPEN C_CODEINSEE_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM, R_ADR_IPE.CODEPOSTALPM);
            FETCH C_CODEINSEE_CODE_POSTAL INTO R_CODEINSEE_CODE_POSTAL;
            vFoundCP1:= C_CODEINSEE_CODE_POSTAL%FOUND;
            CLOSE C_CODEINSEE_CODE_POSTAL;

            OPEN C_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM);
            FETCH C_CODE_POSTAL INTO R_CODE_POSTAL;
            vFoundCP2:= C_CODE_POSTAL%FOUND;
            CLOSE C_CODE_POSTAL;

            IF vFoundCP1 OR vFoundCP2 THEN
              BEGIN
                OPEN C_TYPEVOIE(R_ADR_IPE.TYPEVOIEPM);
                FETCH C_TYPEVOIE INTO R_TYPEVOIE;
                CLOSE C_TYPEVOIE;

                OPEN C_COMPLEMENTVOIE(R_ADR_IPE.TYPEVOIEPM);
                FETCH C_COMPLEMENTVOIE INTO R_COMPLEMENTVOIE;
                CLOSE C_COMPLEMENTVOIE;

                NAT_FF1.NEW_PM_FF1(P_IDPM      => R_VERIF_PM.REFERENCEPM,
                                   P_NOMSIT    => R_VERIF_PM.REFERENCEPM,
                                   P_NUMVOI    => R_ADR_IPE.NUMEROVOIEPM,
                                   P_TYPVOI    => R_TYPEVOIE.TYPEVOIEPM,
                                   P_CMPVOI    => R_COMPLEMENTVOIE.COMPLEMENTVOIEPM,
                                   P_NOMVOI    => R_ADR_IPE.NOMVOIEPM,
                                   P_COD_INSEE => R_ADR_IPE.CODEINSEEPM,
                                   P_CODPTTCMN => NVL(R_CODEINSEE_CODE_POSTAL.CODEPOSTALPM, R_CODE_POSTAL.CODEPOSTALPM),
                           P_COD_OI =>      vCodOi,
                                   P_IDNRO     => R_VERIF_PM.REFERENCENRO,
                           P_ETAPM =>       NAT_FF1.P_ADDUCTABLE,
                           P_NOMGEO_COLOC => NULL,
                           P_TYP_ZONE     => 'ZMD',
                           P_IS_ZA        => 1);

         --> Création d'une alerte systématiquement pour indiquer que la créatoin du PM aurait du se faire bien avant
              vAlrtPmCreDpl := NAT_FF1_CR_MAD_PM.CTRL_PM_CRE_DPL(R_VERIF_PM.REFERENCEPM);
     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via CR MAD 3.0','SQLERRM', SQLERRM);
                  plog.full_error_backtrace('Referencepm', R_VERIF_PM.REFERENCEPM);
                  plog.full_call_stack('File_ID', R_ADR_IPE.FILE_ID);
     END;
            END IF;
          END IF;
        END LOOP;
   END LOOP;

  POS_TRT_CRMADPM_V30(P_FILE_ID,vCodOi,vTYPZON,'ALTI');

END;

-----------------------------------------------------------------------------------
-- Post Traitement TDF CRMAD PM
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRMADPM_IN_TDF_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
-- Vérif présence et données PM
    CURSOR C_VERIF_PM IS
      SELECT DISTINCT cpn.REFERENCEPM, cpn.REFERENCENRO
        FROM CPN                      cpn,
             CRD_MAD_PM_TDF_30_TMP    crd
       WHERE cpn.CODOI = vCodOi
         AND cpn.REFERENCENRO IS NOT NULL
         AND crd.REFERENCEPM = cpn.REFERENCEPM
         AND NOT EXISTS (SELECT 1
                           FROM PM
                          WHERE pm.IDPM = cpn.REFERENCEPM);
    R_VERIF_PM      C_VERIF_PM%ROWTYPE;

    CURSOR C_ADR_IPE(vIdPM  PM.IDPM%TYPE) IS
      SELECT DISTINCT crd.NUMEROVOIEPM,
             crd.COMPLEMENTVOIEPM,
             crd.CODEINSEEPM,
             crd.CODEPOSTALPM,
             crd.TYPEVOIEPM,
             crd.NOMVOIEPM,
             crd.ETATPM,
             crd.FILE_ID
        FROM CRD_MAD_PM_TDF_30_TMP crd
       WHERE crd.REFERENCEPM = vIdPM;
    R_ADR_IPE       C_ADR_IPE%ROWTYPE;

    CURSOR C_CODEINSEE(vCodeInsee   IPE.CODEINSEEPM%TYPE) IS
      SELECT cmn.COD_INSEE
        FROM BDCOM cmn
       WHERE cmn.COD_INSEE = vCodeInsee;
    R_CODEINSEE     C_CODEINSEE%ROWTYPE;
    vFoundInsee     BOOLEAN;

    CURSOR C_CODEINSEE_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE, vCodePostal    IPE.CODEPOSTALPM%TYPE) IS
      SELECT DISTINCT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.CODPTTCMN = vCodePostal
         AND pos.COD_INSEE = vCodeInsee;
    R_CODEINSEE_CODE_POSTAL    C_CODEINSEE_CODE_POSTAL%ROWTYPE;
    vFoundCP1   BOOLEAN;

    CURSOR C_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE) IS
      SELECT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.COD_INSEE = vCodeInsee
         AND ROWNUM        = 1;
    R_CODE_POSTAL    C_CODE_POSTAL%ROWTYPE;
    vFoundCP2   BOOLEAN;

    CURSOR C_TYPEVOIE(vTypevoie   IPE.TYPEVOIEPM%TYPE) IS
      SELECT btyp.CODVAL AS TYPEVOIEPM
                                FROM BDMVAL btyp
       WHERE UPPER(btyp.LIBVAL)  = UPPER(vTypevoie)
         AND btyp.LSTVAL_ID     = 'TYPVOI';
    R_TYPEVOIE     C_TYPEVOIE%ROWTYPE;

    CURSOR C_COMPLEMENTVOIE (vComplementvoie    IPE.COMPLEMENTVOIEPM%TYPE) IS
      SELECT bcomp.CODVAL AS COMPLEMENTVOIEPM
                                FROM BDMVAL bcomp
       WHERE UPPER(bcomp.LIBVAL)  = UPPER(vComplementvoie)
       AND bcomp.LSTVAL_ID     = 'CMPVOI';
    R_COMPLEMENTVOIE     C_COMPLEMENTVOIE%ROWTYPE;

-- Alertes
vAlrtPmCreDpl NUMBER;
-- Others
vTYPZON       VARCHAR2(3);

BEGIN
  vCodOi := NAT_FTTH_OI.GET_OI(P_FILE_ID);
  vTYPZON := 'ZMD';

    -- Création du PM avec un etat adductable
    FOR R_VERIF_PM IN C_VERIF_PM LOOP
      FOR R_ADR_IPE IN C_ADR_IPE(R_VERIF_PM.REFERENCEPM) LOOP
        OPEN C_CODEINSEE(R_ADR_IPE.CODEINSEEPM);
        FETCH C_CODEINSEE INTO R_CODEINSEE;
        vFoundInsee := C_CODEINSEE%FOUND;
        CLOSE C_CODEINSEE;

        IF vFoundInsee THEN
          OPEN C_CODEINSEE_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM, R_ADR_IPE.CODEPOSTALPM);
          FETCH C_CODEINSEE_CODE_POSTAL INTO R_CODEINSEE_CODE_POSTAL;
          vFoundCP1:= C_CODEINSEE_CODE_POSTAL%FOUND;
          CLOSE C_CODEINSEE_CODE_POSTAL;

          OPEN C_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM);
          FETCH C_CODE_POSTAL INTO R_CODE_POSTAL;
          vFoundCP2:= C_CODE_POSTAL%FOUND;
          CLOSE C_CODE_POSTAL;

          IF vFoundCP1 OR vFoundCP2 THEN
            BEGIN
              OPEN C_TYPEVOIE(R_ADR_IPE.TYPEVOIEPM);
              FETCH C_TYPEVOIE INTO R_TYPEVOIE;
              CLOSE C_TYPEVOIE;

              OPEN C_COMPLEMENTVOIE(R_ADR_IPE.TYPEVOIEPM);
              FETCH C_COMPLEMENTVOIE INTO R_COMPLEMENTVOIE;
              CLOSE C_COMPLEMENTVOIE;

              NAT_FF1.NEW_PM_FF1(P_IDPM      => R_VERIF_PM.REFERENCEPM,
                                 P_NOMSIT    => R_VERIF_PM.REFERENCEPM,
                                 P_NUMVOI    => R_ADR_IPE.NUMEROVOIEPM,
                                 P_TYPVOI    => R_TYPEVOIE.TYPEVOIEPM,
                                 P_CMPVOI    => R_COMPLEMENTVOIE.COMPLEMENTVOIEPM,
                                 P_NOMVOI    => R_ADR_IPE.NOMVOIEPM,
                                 P_COD_INSEE => R_ADR_IPE.CODEINSEEPM,
                                 P_CODPTTCMN => NVL(R_CODEINSEE_CODE_POSTAL.CODEPOSTALPM, R_CODE_POSTAL.CODEPOSTALPM),
                           P_COD_OI =>      vCodOi,
                                 P_IDNRO     => R_VERIF_PM.REFERENCENRO,
                           P_ETAPM =>       NAT_FF1.P_ADDUCTABLE,
                           P_NOMGEO_COLOC => NULL,
                           P_TYP_ZONE     => 'ZMD',
                           P_IS_ZA        => 1);

         --> Création d'une alerte systématiquement pour indiquer que la créatoin du PM aurait du se faire bien avant
            vAlrtPmCreDpl := NAT_FF1_CR_MAD_PM.CTRL_PM_CRE_DPL(R_VERIF_PM.REFERENCEPM);
     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via CR MAD 3.0','SQLERRM', SQLERRM);
                plog.full_error_backtrace('Referencepm', R_VERIF_PM.REFERENCEPM);
                plog.full_call_stack('File_ID', R_ADR_IPE.FILE_ID);
     END;
          END IF;
        END IF;
      END LOOP;
   END LOOP;

  POS_TRT_CRMADPM_V30(P_FILE_ID,vCodOi,vTYPZON,'TDF');

END;

-----------------------------------------------------------------------------------
-- Post Traitement Simpson CRMAD PM
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRMADPM_IN_SMP_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
-- Recherche ZMD
CURSOR C_TYPZONE_ZMD IS
  SELECT 1
    FROM CRD_MAD_PM_SMP_30_TMP cmt
   WHERE cmt.TYPEZONE = 3;
R_TYPZONE_ZMD C_TYPZONE_ZMD%ROWTYPE;
vFoundZmd     BOOLEAN;
    -- Vérif présence et données PM
    CURSOR C_VERIF_PM IS
      SELECT DISTINCT cpn.REFERENCEPM, cpn.REFERENCENRO
        FROM CPN                      cpn,
             CRD_MAD_PM_SMP_30_TMP    crd
       WHERE cpn.CODOI = vCodOi
         AND cpn.REFERENCENRO IS NOT NULL
         AND crd.REFERENCEPM = cpn.REFERENCEPM
         AND NOT EXISTS (SELECT 1
                           FROM PM
                          WHERE pm.IDPM = cpn.REFERENCEPM);
    R_VERIF_PM      C_VERIF_PM%ROWTYPE;

    CURSOR C_ADR_IPE(vIdPM  PM.IDPM%TYPE) IS
      SELECT DISTINCT crd.NUMEROVOIEPM,
             crd.COMPLEMENTVOIEPM,
             crd.CODEINSEEPM,
             crd.CODEPOSTALPM,
             crd.TYPEVOIEPM,
             crd.NOMVOIEPM,
             crd.ETATPM,
             crd.FILE_ID
        FROM CRD_MAD_PM_SMP_31_TMP crd
       WHERE crd.REFERENCEPM = vIdPM;
    R_ADR_IPE       C_ADR_IPE%ROWTYPE;

    CURSOR C_CODEINSEE(vCodeInsee   IPE.CODEINSEEPM%TYPE) IS
      SELECT cmn.COD_INSEE
        FROM BDCOM cmn
       WHERE cmn.COD_INSEE = vCodeInsee;
    R_CODEINSEE     C_CODEINSEE%ROWTYPE;
    vFoundInsee     BOOLEAN;

    CURSOR C_CODEINSEE_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE, vCodePostal    IPE.CODEPOSTALPM%TYPE) IS
      SELECT DISTINCT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.CODPTTCMN = vCodePostal
         AND pos.COD_INSEE = vCodeInsee;
    R_CODEINSEE_CODE_POSTAL    C_CODEINSEE_CODE_POSTAL%ROWTYPE;
    vFoundCP1   BOOLEAN;

    CURSOR C_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE) IS
      SELECT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.COD_INSEE = vCodeInsee
         AND ROWNUM        = 1;
    R_CODE_POSTAL    C_CODE_POSTAL%ROWTYPE;
    vFoundCP2   BOOLEAN;

    CURSOR C_TYPEVOIE(vTypevoie   IPE.TYPEVOIEPM%TYPE) IS
      SELECT btyp.CODVAL AS TYPEVOIEPM
        FROM BDMVAL btyp
       WHERE UPPER(btyp.LIBVAL)  = UPPER(vTypevoie)
         AND btyp.LSTVAL_ID     = 'TYPVOI';
    R_TYPEVOIE     C_TYPEVOIE%ROWTYPE;

    CURSOR C_COMPLEMENTVOIE (vComplementvoie    IPE.COMPLEMENTVOIEPM%TYPE) IS
      SELECT bcomp.CODVAL AS COMPLEMENTVOIEPM
        FROM BDMVAL bcomp
       WHERE UPPER(bcomp.LIBVAL)  = UPPER(vComplementvoie)
       AND bcomp.LSTVAL_ID     = 'CMPVOI';
    R_COMPLEMENTVOIE     C_COMPLEMENTVOIE%ROWTYPE;

-- Alertes
vAlrtPmCreDpl NUMBER;
-- Others
vTYPZON       VARCHAR2(3);

BEGIN
  vCodOi := NAT_FTTH_OI.GET_OI(P_FILE_ID);

  OPEN C_TYPZONE_ZMD;
  FETCH C_TYPZONE_ZMD INTO R_TYPZONE_ZMD;
  vFoundZmd := C_TYPZONE_ZMD%FOUND;
  CLOSE C_TYPZONE_ZMD;

  IF vFoundZmd THEN
    vTYPZON := 'ZMD';
    CLEAN_CRMAD_ZMD_SMP_V30 (vCodOi);

    -- Création du PM avec un etat adductable
      FOR R_VERIF_PM IN C_VERIF_PM LOOP
        FOR R_ADR_IPE IN C_ADR_IPE(R_VERIF_PM.REFERENCEPM) LOOP
          OPEN C_CODEINSEE(R_ADR_IPE.CODEINSEEPM);
          FETCH C_CODEINSEE INTO R_CODEINSEE;
          vFoundInsee := C_CODEINSEE%FOUND;
          CLOSE C_CODEINSEE;

          IF vFoundInsee THEN
            OPEN C_CODEINSEE_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM, R_ADR_IPE.CODEPOSTALPM);
            FETCH C_CODEINSEE_CODE_POSTAL INTO R_CODEINSEE_CODE_POSTAL;
            vFoundCP1:= C_CODEINSEE_CODE_POSTAL%FOUND;
            CLOSE C_CODEINSEE_CODE_POSTAL;

            OPEN C_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM);
            FETCH C_CODE_POSTAL INTO R_CODE_POSTAL;
            vFoundCP2:= C_CODE_POSTAL%FOUND;
            CLOSE C_CODE_POSTAL;

            IF vFoundCP1 OR vFoundCP2 THEN
              BEGIN
                OPEN C_TYPEVOIE(R_ADR_IPE.TYPEVOIEPM);
                FETCH C_TYPEVOIE INTO R_TYPEVOIE;
                CLOSE C_TYPEVOIE;

                OPEN C_COMPLEMENTVOIE(R_ADR_IPE.TYPEVOIEPM);
                FETCH C_COMPLEMENTVOIE INTO R_COMPLEMENTVOIE;
                CLOSE C_COMPLEMENTVOIE;

                NAT_FF1.NEW_PM_FF1(P_IDPM      => R_VERIF_PM.REFERENCEPM,
                                   P_NOMSIT    => R_VERIF_PM.REFERENCEPM,
                                   P_NUMVOI    => R_ADR_IPE.NUMEROVOIEPM,
                                   P_TYPVOI    => R_TYPEVOIE.TYPEVOIEPM,
                                   P_CMPVOI    => R_COMPLEMENTVOIE.COMPLEMENTVOIEPM,
                                   P_NOMVOI    => R_ADR_IPE.NOMVOIEPM,
                                   P_COD_INSEE => R_ADR_IPE.CODEINSEEPM,
                                   P_CODPTTCMN => NVL(R_CODEINSEE_CODE_POSTAL.CODEPOSTALPM, R_CODE_POSTAL.CODEPOSTALPM),
                           P_COD_OI =>      vCodOi,
                                   P_IDNRO     => R_VERIF_PM.REFERENCENRO,
                           P_ETAPM =>       NAT_FF1.P_ADDUCTABLE,
                           P_NOMGEO_COLOC => NULL,
                                   P_TYP_ZONE     => 'ZMD',
                           P_IS_ZA        => 1);

         --> Création d'une alerte systématiquement pour indiquer que la créatoin du PM aurait du se faire bien avant
              vAlrtPmCreDpl := NAT_FF1_CR_MAD_PM.CTRL_PM_CRE_DPL(R_VERIF_PM.REFERENCEPM);
     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via CR MAD 3.0','SQLERRM', SQLERRM);
                  plog.full_error_backtrace('Referencepm', R_VERIF_PM.REFERENCEPM);
                  plog.full_call_stack('File_ID', R_ADR_IPE.FILE_ID);
     END;
            END IF;
          END IF;
        END LOOP;
   END LOOP;
  ELSE
    vTYPZON := 'ZTD';
  END IF;

    POS_TRT_CRMADPM_V30(P_FILE_ID, vCodOi, vTYPZON);

END;

-----------------------------------------------------------------------------------
-- Post Traitement SIEA CRMAD PM
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRMADPM_IN_SIEA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  -- Vérif présence et données PM
    CURSOR C_VERIF_PM IS
      SELECT DISTINCT cpn.REFERENCEPM, cpn.REFERENCENRO
        FROM CPN                      cpn,
             CRD_MAD_PM_SIEA_30_TMP   crd
       WHERE cpn.CODOI = vCodOi
         AND cpn.REFERENCENRO IS NOT NULL
         AND crd.REFERENCEPM = cpn.REFERENCEPM
         AND NOT EXISTS (SELECT 1
                           FROM PM
                          WHERE pm.IDPM = cpn.REFERENCEPM);
    R_VERIF_PM      C_VERIF_PM%ROWTYPE;

    CURSOR C_ADR_IPE(vIdPM  PM.IDPM%TYPE) IS
      SELECT DISTINCT crd.NUMEROVOIEPM,
             crd.COMPLEMENTVOIEPM,
             crd.CODEINSEEPM,
             crd.CODEPOSTALPM,
             crd.TYPEVOIEPM,
             crd.NOMVOIEPM,
             crd.ETATPM,
             crd.FILE_ID
        FROM CRD_MAD_PM_SIEA_30_TMP crd
       WHERE crd.REFERENCEPM = vIdPM;
    R_ADR_IPE       C_ADR_IPE%ROWTYPE;

    CURSOR C_CODEINSEE(vCodeInsee   IPE.CODEINSEEPM%TYPE) IS
      SELECT cmn.COD_INSEE
        FROM BDCOM cmn
       WHERE cmn.COD_INSEE = vCodeInsee;
    R_CODEINSEE     C_CODEINSEE%ROWTYPE;
    vFoundInsee     BOOLEAN;

    CURSOR C_CODEINSEE_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE, vCodePostal    IPE.CODEPOSTALPM%TYPE) IS
      SELECT DISTINCT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.CODPTTCMN = vCodePostal
         AND pos.COD_INSEE = vCodeInsee;
    R_CODEINSEE_CODE_POSTAL    C_CODEINSEE_CODE_POSTAL%ROWTYPE;
    vFoundCP1   BOOLEAN;

    CURSOR C_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE) IS
      SELECT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.COD_INSEE = vCodeInsee
         AND ROWNUM        = 1;
    R_CODE_POSTAL    C_CODE_POSTAL%ROWTYPE;
    vFoundCP2   BOOLEAN;

    CURSOR C_TYPEVOIE(vTypevoie   IPE.TYPEVOIEPM%TYPE) IS
      SELECT btyp.CODVAL AS TYPEVOIEPM
                                  FROM BDMVAL btyp
       WHERE UPPER(btyp.LIBVAL)  = UPPER(vTypevoie)
         AND btyp.LSTVAL_ID     = 'TYPVOI';
    R_TYPEVOIE     C_TYPEVOIE%ROWTYPE;

    CURSOR C_COMPLEMENTVOIE (vComplementvoie    IPE.COMPLEMENTVOIEPM%TYPE) IS
      SELECT bcomp.CODVAL AS COMPLEMENTVOIEPM
                                  FROM BDMVAL bcomp
       WHERE UPPER(bcomp.LIBVAL)  = UPPER(vComplementvoie)
       AND bcomp.LSTVAL_ID     = 'CMPVOI';
    R_COMPLEMENTVOIE     C_COMPLEMENTVOIE%ROWTYPE;

  -- Alertes
  vAlrtPmCreDpl NUMBER;
  -- Others
  vTYPZON       VARCHAR2(3);

BEGIN
  vCodOi := NAT_FTTH_OI.GET_OI(P_FILE_ID);
  vTYPZON := 'ZMD';

    -- Création du PM avec un etat adductable
    FOR R_VERIF_PM IN C_VERIF_PM LOOP
      FOR R_ADR_IPE IN C_ADR_IPE(R_VERIF_PM.REFERENCEPM) LOOP
        OPEN C_CODEINSEE(R_ADR_IPE.CODEINSEEPM);
        FETCH C_CODEINSEE INTO R_CODEINSEE;
        vFoundInsee := C_CODEINSEE%FOUND;
        CLOSE C_CODEINSEE;

        IF vFoundInsee THEN
          OPEN C_CODEINSEE_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM, R_ADR_IPE.CODEPOSTALPM);
          FETCH C_CODEINSEE_CODE_POSTAL INTO R_CODEINSEE_CODE_POSTAL;
          vFoundCP1:= C_CODEINSEE_CODE_POSTAL%FOUND;
          CLOSE C_CODEINSEE_CODE_POSTAL;

          OPEN C_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM);
          FETCH C_CODE_POSTAL INTO R_CODE_POSTAL;
          vFoundCP2:= C_CODE_POSTAL%FOUND;
          CLOSE C_CODE_POSTAL;

          IF vFoundCP1 OR vFoundCP2 THEN
            BEGIN
              OPEN C_TYPEVOIE(R_ADR_IPE.TYPEVOIEPM);
              FETCH C_TYPEVOIE INTO R_TYPEVOIE;
              CLOSE C_TYPEVOIE;

              OPEN C_COMPLEMENTVOIE(R_ADR_IPE.TYPEVOIEPM);
              FETCH C_COMPLEMENTVOIE INTO R_COMPLEMENTVOIE;
              CLOSE C_COMPLEMENTVOIE;

              NAT_FF1.NEW_PM_FF1(P_IDPM      => R_VERIF_PM.REFERENCEPM,
                                 P_NOMSIT    => R_VERIF_PM.REFERENCEPM,
                                 P_NUMVOI    => R_ADR_IPE.NUMEROVOIEPM,
                                 P_TYPVOI    => R_TYPEVOIE.TYPEVOIEPM,
                                 P_CMPVOI    => R_COMPLEMENTVOIE.COMPLEMENTVOIEPM,
                                 P_NOMVOI    => R_ADR_IPE.NOMVOIEPM,
                                 P_COD_INSEE => R_ADR_IPE.CODEINSEEPM,
                                 P_CODPTTCMN => NVL(R_CODEINSEE_CODE_POSTAL.CODEPOSTALPM, R_CODE_POSTAL.CODEPOSTALPM),
                           P_COD_OI =>      vCodOi,
                                 P_IDNRO     => R_VERIF_PM.REFERENCENRO,
                           P_ETAPM =>       NAT_FF1.P_ADDUCTABLE,
                           P_NOMGEO_COLOC => NULL,
                           P_TYP_ZONE     => 'ZMD',
                           P_IS_ZA        => 1);

         --> Création d'une alerte systématiquement pour indiquer que la créatoin du PM aurait du se faire bien avant
            vAlrtPmCreDpl := NAT_FF1_CR_MAD_PM.CTRL_PM_CRE_DPL(R_VERIF_PM.REFERENCEPM);
     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via CR MAD 3.0','SQLERRM', SQLERRM);
                plog.full_error_backtrace('Referencepm', R_VERIF_PM.REFERENCEPM);
                plog.full_call_stack('File_ID', R_ADR_IPE.FILE_ID);
     END;
          END IF;
        END IF;
      END LOOP;
   END LOOP;

    POS_TRT_CRMADPM_V30(P_FILE_ID, vCodOi, vTYPZON, 'SIEA');

END;

  ------------------------------------------------------------------------
  -- Permet de récupérer le nom du fichier AR MAD à générer
  ------------------------------------------------------------------------
FUNCTION GET_NOMFIC_ARMAD_FTEL
  RETURN VARCHAR2 IS
  vIdPM PM.IDPM%TYPE;
  CURSOR C_TYPECMD(v_IDPM VARCHAR2) IS
    SELECT DISTINCT c.TYPECOMMANDEPM,
                    c.CODEINSEEPM
      FROM CRD_MAD_PM c
     WHERE c.REFERENCEPM = v_IDPM;
  R_TYPECMD C_TYPECMD%ROWTYPE;
  vFoundCmd BOOLEAN;

  CURSOR C_GET_OI (vIdpm VARCHAR2) IS
    SELECT pm.COD_OI
      FROM PM pm
     WHERE pm.idpm = vIdpm;
  R_GET_OI C_GET_OI%ROWTYPE;

  vTYPECOMMANDEPM CRD_MAD_PM.TYPECOMMANDEPM%TYPE;
  vInseePM        CRD_MAD_PM.CODEINSEEPM%TYPE;
  vNomFic         VARCHAR2(255);
  vIndice         NUMBER;
  vCodOi          PM.COD_OI%TYPE;
  vVerPrtcl       PART_FLX.PRTCL%TYPE;
BEGIN
  vIdPM := NAT_FF1_CR_MAD_PM.GET_C_REFERENCEPM_FT;

  OPEN C_GET_OI(vIdPM);
  FETCH C_GET_OI INTO R_GET_OI;
  vCodOI := R_GET_OI.COD_OI;
  CLOSE C_GET_OI;

  OPEN C_TYPECMD(vIdPM);
  FETCH C_TYPECMD INTO R_TYPECMD;
  vFoundCmd := C_TYPECMD%FOUND;
  CLOSE C_TYPECMD;
  vTYPECOMMANDEPM := R_TYPECMD.TYPECOMMANDEPM;
  vInseePM        := R_TYPECMD.CODEINSEEPM;
  vIndice         := '01';
  vVerPrtcl       := GET_VER_PRTCL('FTEL');

  IF vVerPrtcl = '3.1' THEN
    IF vTYPECOMMANDEPM = 'COFI' THEN
       -- V-ARMAD-PM_397480930_FTEL_BOUY_Insee_PM_refPM_ARMAD_V21_aaaammjj_numsequence.csv
       IF vCodOi = 'FTEL' THEN
         vNomFic := 'V-ARMAD-PM_397480930_FTEL_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
       ELSE
         vNomFic := 'V-ARMAD-PM_'||vCodOi||'397480930_'||vCodOi||'_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
       END IF;
    -- V-ARMAD-PM_397480930_FTEL_BOUY_PM_refPM_ARMAD_V21_aaaammjj_numsequence.csv
    ELSE
       IF vCodOi = 'FTEL' THEN
         vNomFic :=  'V-ARMAD-PM_397480930_FTEL_BOUY_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
       ELSE
         vNomFic :=  'V-ARMAD-PM_'||vCodOi||'397480930_'||vCodOi||'_BOUY_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
       END IF;
    END IF;
  ELSIF vVerPrtcl = '3.0' THEN
    IF vTYPECOMMANDEPM = 'COFI' THEN
       -- V-ARMAD-PM_397480930_FTEL_BOUY_Insee_PM_refPM_ARMAD_V21_aaaammjj_numsequence.csv
       IF vCodOi = 'FTEL' THEN
         vNomFic := 'V-ARMAD-PM_397480930_FTEL_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
       ELSE
         vNomFic := 'V-ARMAD-PM_'||vCodOi||'397480930_'||vCodOi||'_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
       END IF;
    -- V-ARMAD-PM_397480930_FTEL_BOUY_PM_refPM_ARMAD_V21_aaaammjj_numsequence.csv
    ELSE
       IF vCodOi = 'FTEL' THEN
         vNomFic :=  'V-ARMAD-PM_397480930_FTEL_BOUY_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
       ELSE
         vNomFic :=  'V-ARMAD-PM_'||vCodOi||'397480930_'||vCodOi||'_BOUY_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
       END IF;
    END IF;
  END IF;

  RETURN vNomFic;
END;

FUNCTION GET_NOMFIC_ARMAD_SFRA
  RETURN VARCHAR2 IS
  vIdPM PM.IDPM%TYPE;
  CURSOR C_TYPECMD(v_IDPM VARCHAR2) IS
    SELECT DISTINCT c.TYPECOMMANDEPM,
                    c.CODEINSEEPM,
                    c.FILE_ID
      FROM CRD_MAD_PM c
     WHERE c.REFERENCEPM = v_IDPM;
  R_TYPECMD C_TYPECMD%ROWTYPE;
  vFoundCmd BOOLEAN;
  vTYPECOMMANDEPM CRD_MAD_PM.TYPECOMMANDEPM%TYPE;
  vInseePM        CRD_MAD_PM.CODEINSEEPM%TYPE;
  vNomFic         VARCHAR2(255);
  vIndice         NUMBER;
  vCodOi          REF_OI.COD_OI%TYPE;

  CURSOR C_VERIF_SFRA(vCodOi VARCHAR2) IS
    SELECT r.COD_OI
      FROM REF_OI_PRM rp,
           REF_OI     r
     WHERE r.COD_OI   = vCodOi
       AND rp.COD_OI  = r.COD_OI
       AND rp.OBS     = 0
       AND rp.COD_PART_FLUX = 'SFRA';
   R_VERIF_SFRA C_VERIF_SFRA%ROWTYPE;
   vFoundSfra BOOLEAN;
   vVerPrtcl       PART_FLX.PRTCL%TYPE;
BEGIN
  vIdPM := NAT_FF1_CR_MAD_PM.GET_C_REFERENCEPM_SFRA;

  OPEN C_TYPECMD(vIdPM);
  FETCH C_TYPECMD INTO R_TYPECMD;
  vFoundCmd := C_TYPECMD%FOUND;
  CLOSE C_TYPECMD;
  vTYPECOMMANDEPM := R_TYPECMD.TYPECOMMANDEPM;
  vInseePM        := R_TYPECMD.CODEINSEEPM;
  vIndice         := '01';
  vCodOi          := NAT_FTTH_OI.GET_OI(R_TYPECMD.FILE_ID);
  vVerPrtcl       := GET_VER_PRTCL('SFRA');

  OPEN C_VERIF_SFRA(vCodOi);
  FETCH C_VERIF_SFRA INTO R_VERIF_SFRA;
  vFoundSfra := C_VERIF_SFRA%FOUND;
  CLOSE C_VERIF_SFRA;

  IF vFoundSfra THEN
    IF vVerPrtcl = '3.1' THEN
      IF vTYPECOMMANDEPM = 'COFI' THEN
        vNomFic := 'refInterne1_refInterne2_'||vCodOi||'_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
      ELSE
        vNomFic :=  'refInterne1_refInterne2_'||vCodOi||'_BOUY_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
      END IF;
    ELSIF vVerPrtcl = '3.0' THEN
      IF vTYPECOMMANDEPM = 'COFI' THEN
        vNomFic := 'refInterne1_refInterne2_'||vCodOi||'_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
      ELSE
        vNomFic :=  'refInterne1_refInterne2_'||vCodOi||'_BOUY_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
      END IF;
    END IF;
  END IF;

  RETURN vNomFic;
END;

FUNCTION GET_NOMFIC_ARMAD_NUME
  RETURN VARCHAR2 IS
  vIdPM PM.IDPM%TYPE;
  CURSOR C_TYPECMD(v_IDPM VARCHAR2) IS
    SELECT DISTINCT c.TYPECOMMANDEPM,
                    c.CODEINSEEPM
      FROM CRD_MAD_PM c
     WHERE c.REFERENCEPM = v_IDPM;
  R_TYPECMD C_TYPECMD%ROWTYPE;
  vFoundCmd BOOLEAN;
  vTYPECOMMANDEPM CRD_MAD_PM.TYPECOMMANDEPM%TYPE;
  vInseePM        CRD_MAD_PM.CODEINSEEPM%TYPE;
  vNomFic         VARCHAR2(255);
  vIndice             NUMBER;
BEGIN
  vIdPM := NAT_FF1_CR_MAD_PM.GET_C_REFERENCEPM_NUME;

  OPEN C_TYPECMD(vIdPM);
  FETCH C_TYPECMD INTO R_TYPECMD;
  vFoundCmd := C_TYPECMD%FOUND;
  CLOSE C_TYPECMD;
  vTYPECOMMANDEPM := R_TYPECMD.TYPECOMMANDEPM;
  vInseePM        := R_TYPECMD.CODEINSEEPM;
  vIndice         := '01';
  IF vTYPECOMMANDEPM = 'COFI' THEN
    vNomFic := 'refInterne1_refInterne2_NUME_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V22_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
  ELSE
    vNomFic :=  'refInterne1_refInterne2_NUME_BOUY_PM_' || vIdPM || '_ARMAD_V22_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
  END IF;

  RETURN vNomFic;
END;

FUNCTION GET_NOMFIC_ARMAD_FREE
  RETURN VARCHAR2 IS
  vIdPM PM.IDPM%TYPE;
  CURSOR C_TYPECMD(v_IDPM VARCHAR2) IS
    SELECT DISTINCT c.TYPECOMMANDEPM,
                    c.CODEINSEEPM
      FROM CRD_MAD_PM c
     WHERE c.REFERENCEPM = v_IDPM;
  R_TYPECMD C_TYPECMD%ROWTYPE;
  vFoundCmd BOOLEAN;
  vTYPECOMMANDEPM CRD_MAD_PM.TYPECOMMANDEPM%TYPE;
  vInseePM        CRD_MAD_PM.CODEINSEEPM%TYPE;
  vNomFic         VARCHAR2(255);
  vIndice             NUMBER;
  vVerPrtcl       PART_FLX.PRTCL%TYPE;
BEGIN
  vIdPM := NAT_FF1_CR_MAD_PM.GET_C_REFERENCEPM_FREE;

  OPEN C_TYPECMD(vIdPM);
  FETCH C_TYPECMD INTO R_TYPECMD;
  vFoundCmd := C_TYPECMD%FOUND;
  CLOSE C_TYPECMD;
  vTYPECOMMANDEPM := R_TYPECMD.TYPECOMMANDEPM;
  vInseePM        := R_TYPECMD.CODEINSEEPM;
  vIndice         := '01';
  vVerPrtcl       := GET_VER_PRTCL('FREE');

  IF vVerPrtcl = '3.1' THEN
    IF vTYPECOMMANDEPM = 'COFI' THEN
      vNomFic := 'refInterne1_refInterne2_FREE_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    ELSE
      vNomFic :=  'refInterne1_refInterne2_FREE_BOUY_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    END IF;
  ELSIF vVerPrtcl = '3.0' THEN
    IF vTYPECOMMANDEPM = 'COFI' THEN
      vNomFic := 'refInterne1_refInterne2_FREE_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    ELSE
      vNomFic :=  'refInterne1_refInterne2_FREE_BOUY_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    END IF;
  END IF;

  RETURN vNomFic;
END;

FUNCTION GET_NOMFIC_ARMAD_AXIO
  RETURN VARCHAR2 IS
  vIdPM PM.IDPM%TYPE;
  CURSOR C_TYPECMD(v_IDPM VARCHAR2) IS
    SELECT DISTINCT c.TYPECOMMANDEPM,
                    c.CODEINSEEPM,
                    c.FILE_ID
      FROM CRD_MAD_PM c
     WHERE c.REFERENCEPM = v_IDPM;
  R_TYPECMD C_TYPECMD%ROWTYPE;
  vFoundCmd BOOLEAN;
  vTYPECOMMANDEPM CRD_MAD_PM.TYPECOMMANDEPM%TYPE;
  vInseePM        CRD_MAD_PM.CODEINSEEPM%TYPE;
  vNomFic         VARCHAR2(255);
  vIndice         NUMBER;
  vCodOi          REF_OI.COD_OI%TYPE;

CURSOR C_VERIF_AXIO(vCodOi VARCHAR2) IS
  SELECT r.COD_OI,
         r.SIREN
    FROM REF_OI_PRM rp,
         REF_OI     r
   WHERE r.COD_OI         = vCodOi
     AND rp.COD_OI        = r.COD_OI
     AND rp.OBS           = 0
     AND rp.COD_PART_FLUX = 'AXIO';
R_VERIF_AXIO C_VERIF_AXIO%ROWTYPE;
vFoundAxio   BOOLEAN;
vVerPrtcl       PART_FLX.PRTCL%TYPE;
BEGIN
  vIdPM := NAT_FF1_CR_MAD_PM.GET_C_REFERENCEPM_AXIO;

  OPEN C_TYPECMD(vIdPM);
  FETCH C_TYPECMD INTO R_TYPECMD;
  vFoundCmd := C_TYPECMD%FOUND;
  CLOSE C_TYPECMD;
  vTYPECOMMANDEPM := R_TYPECMD.TYPECOMMANDEPM;
  vInseePM        := R_TYPECMD.CODEINSEEPM;
  vIndice         := '01';
  vCodOi          := NAT_FTTH_OI.GET_OI(R_TYPECMD.FILE_ID);

  OPEN C_VERIF_AXIO(vCodOi);
  FETCH C_VERIF_AXIO INTO R_VERIF_AXIO;
  vFoundAxio := C_VERIF_AXIO%FOUND;
  CLOSE C_VERIF_AXIO;
  vVerPrtcl       := GET_VER_PRTCL('AXIO');

  IF vFoundAxio THEN
    IF vVerPrtcl = '3.1' THEN
      IF vTYPECOMMANDEPM = 'COFI' THEN
        vNomFic := 'A-ARMAD_'||R_VERIF_AXIO.SIREN||'_'||vCodOi||'_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
      ELSE
        vNomFic := 'A-ARMAD_'||R_VERIF_AXIO.SIREN||'_'||vCodOi||'_BOUY_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
      END IF;
    ELSIF vVerPrtcl = '3.0' THEN
      IF vTYPECOMMANDEPM = 'COFI' THEN
        vNomFic := 'A-ARMAD_'||R_VERIF_AXIO.SIREN||'_'||vCodOi||'_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
      ELSE
        vNomFic := 'A-ARMAD_'||R_VERIF_AXIO.SIREN||'_'||vCodOi||'_BOUY_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
      END IF;
    END IF;
  END IF;
  RETURN vNomFic;
END;

FUNCTION GET_NOMFIC_ARMAD_ALTI
  RETURN VARCHAR2 IS
  vIdPM PM.IDPM%TYPE;
  CURSOR C_TYPECMD(v_IDPM VARCHAR2) IS
    SELECT DISTINCT c.TYPECOMMANDEPM,
                    c.CODEINSEEPM,
                    c.FILE_ID
      FROM CRD_MAD_PM c
     WHERE c.REFERENCEPM = v_IDPM;
  R_TYPECMD C_TYPECMD%ROWTYPE;
  vFoundCmd BOOLEAN;
  vTYPECOMMANDEPM CRD_MAD_PM.TYPECOMMANDEPM%TYPE;
  vInseePM        CRD_MAD_PM.CODEINSEEPM%TYPE;
  vNomFic         VARCHAR2(255);
  vIndice         NUMBER;
  vCodOi          REF_OI.COD_OI%TYPE;
  vNumZone            VARCHAR2(50);
  vVerPrtcl       PART_FLX.PRTCL%TYPE;
BEGIN
  vIdPM := NAT_FF1_CR_MAD_PM.GET_C_REFERENCEPM_ALTI;

  OPEN C_TYPECMD(vIdPM);
  FETCH C_TYPECMD INTO R_TYPECMD;
  vFoundCmd := C_TYPECMD%FOUND;
  CLOSE C_TYPECMD;
  vTYPECOMMANDEPM := R_TYPECMD.TYPECOMMANDEPM;
  vInseePM        := R_TYPECMD.CODEINSEEPM;
  vIndice         := '01';
  vCodOi          := NAT_FTTH_OI.GET_OI(R_TYPECMD.FILE_ID);
  vVerPrtcl       := GET_VER_PRTCL('ALTI');

  vNumZone := NAT_FF1_TRT_FLX_ZMD.GET_ID_ZONE(vIdPM);
  IF vVerPrtcl = '3.1' THEN
    IF vTYPECOMMANDEPM = 'COFI' THEN
      vNomFic := vNumZone||'_AC626_'||vCodOi||'_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    ELSE
      vNomFic := vNumZone||'_AC626_'||vCodOi||'_BOUY_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    END IF;
  ELSIF vVerPrtcl = '3.0' THEN
    IF vTYPECOMMANDEPM = 'COFI' THEN
      vNomFic := vNumZone||'_AC626_'||vCodOi||'_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    ELSE
      vNomFic := vNumZone||'_AC626_'||vCodOi||'_BOUY_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    END IF;
  END IF;

  RETURN vNomFic;
END;

FUNCTION GET_NOMFIC_ARMAD_COVA
  RETURN VARCHAR2 IS
  vIdPM PM.IDPM%TYPE;
  CURSOR C_TYPECMD(v_IDPM VARCHAR2) IS
    SELECT DISTINCT c.TYPECOMMANDEPM,
                    c.CODEINSEEPM,
                    c.FILE_ID
      FROM CRD_MAD_PM c
     WHERE c.REFERENCEPM = v_IDPM;
  R_TYPECMD C_TYPECMD%ROWTYPE;
  vFoundCmd BOOLEAN;
  vTYPECOMMANDEPM CRD_MAD_PM.TYPECOMMANDEPM%TYPE;
  vInseePM        CRD_MAD_PM.CODEINSEEPM%TYPE;
  vNomFic         VARCHAR2(255);
  vIndice         NUMBER;
  vCodOi          REF_OI.COD_OI%TYPE;
  vVerPrtcl       PART_FLX.PRTCL%TYPE;
BEGIN
  vIdPM := NAT_FF1_CR_MAD_PM.GET_C_REFERENCEPM_COVA;

  OPEN C_TYPECMD(vIdPM);
  FETCH C_TYPECMD INTO R_TYPECMD;
  vFoundCmd := C_TYPECMD%FOUND;
  CLOSE C_TYPECMD;
  vTYPECOMMANDEPM := R_TYPECMD.TYPECOMMANDEPM;
  vInseePM        := R_TYPECMD.CODEINSEEPM;
  vIndice         := '01';
  vCodOi          := NAT_FTTH_OI.GET_OI(R_TYPECMD.FILE_ID);
  vVerPrtcl       := GET_VER_PRTCL('COVA');

  IF vVerPrtcl = '3.1' THEN
    IF vCodOi = 'SEQU' THEN
      IF vTYPECOMMANDEPM = 'COFI' THEN
        vNomFic := 'COVAGE_ZTD_'||vCodOi||'_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
      ELSE
        vNomFic := 'COVAGE_ZTD_'||vCodOi||'_BOUY_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
      END IF;
    ELSE
      IF vTYPECOMMANDEPM = 'COFI' THEN
        vNomFic := 'COVAGE_ZMD_'||vCodOi||'_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
      ELSE
        vNomFic := 'COVAGE_ZMD_'||vCodOi||'_BOUY_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
      END IF;
    END IF;
  ELSIF vVerPrtcl = '3.0' THEN
    IF vCodOi = 'SEQU' THEN
      IF vTYPECOMMANDEPM = 'COFI' THEN
        vNomFic := 'COVAGE_ZTD_'||vCodOi||'_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
      ELSE
        vNomFic := 'COVAGE_ZTD_'||vCodOi||'_BOUY_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
      END IF;
    ELSE
      IF vTYPECOMMANDEPM = 'COFI' THEN
        vNomFic := 'COVAGE_ZMD_'||vCodOi||'_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
      ELSE
        vNomFic := 'COVAGE_ZMD_'||vCodOi||'_BOUY_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
      END IF;
    END IF;
  END IF;

  RETURN vNomFic;
END;

FUNCTION GET_NOMFIC_ARMAD_TDF
  RETURN VARCHAR2 IS
  vIdPM PM.IDPM%TYPE;
  CURSOR C_TYPECMD(v_IDPM VARCHAR2) IS
    SELECT DISTINCT c.TYPECOMMANDEPM,
                    c.CODEINSEEPM,
                    c.FILE_ID
      FROM CRD_MAD_PM c
     WHERE c.REFERENCEPM = v_IDPM;
  R_TYPECMD C_TYPECMD%ROWTYPE;
  vFoundCmd BOOLEAN;
  vTYPECOMMANDEPM CRD_MAD_PM.TYPECOMMANDEPM%TYPE;
  vInseePM        CRD_MAD_PM.CODEINSEEPM%TYPE;
  vNomFic         VARCHAR2(255);
  vIndice             NUMBER;
  vCodOi          REF_OI.COD_OI%TYPE;
  vVerPrtcl       PART_FLX.PRTCL%TYPE;
BEGIN
  vIdPM := NAT_FF1_CR_MAD_PM.GET_C_REFERENCEPM_TDF;

  OPEN C_TYPECMD(vIdPM);
  FETCH C_TYPECMD INTO R_TYPECMD;
  vFoundCmd := C_TYPECMD%FOUND;
  CLOSE C_TYPECMD;
  vTYPECOMMANDEPM := R_TYPECMD.TYPECOMMANDEPM;
  vInseePM        := R_TYPECMD.CODEINSEEPM;
  vIndice         := '01';
  vCodOi          := NAT_FTTH_OI.GET_OI(R_TYPECMD.FILE_ID);
  vVerPrtcl       := GET_VER_PRTCL('TDF');

  IF vVerPrtcl = '3.1' THEN
    IF vTYPECOMMANDEPM = 'COFI' THEN
      vNomFic := 'TDF_ZMD_'||vCodOi||'_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    ELSE
      vNomFic :=  'TDF_ZMD_'||vCodOi||'_BOUY_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    END IF;
  ELSIF vVerPrtcl = '3.0' THEN
    IF vTYPECOMMANDEPM = 'COFI' THEN
      vNomFic := 'TDF_ZMD_'||vCodOi||'_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    ELSE
      vNomFic :=  'TDF_ZMD_'||vCodOi||'_BOUY_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    END IF;
  END IF;

  RETURN vNomFic;
END;

FUNCTION GET_NOMFIC_ARMAD_SMP
  RETURN VARCHAR2 IS
  vIdPM PM.IDPM%TYPE;
  CURSOR C_TYPECMD(v_IDPM VARCHAR2) IS
    SELECT DISTINCT c.TYPECOMMANDEPM,
                    c.CODEINSEEPM,
                    c.FILE_ID
      FROM CRD_MAD_PM c
     WHERE c.REFERENCEPM = v_IDPM;
  R_TYPECMD C_TYPECMD%ROWTYPE;
  vFoundCmd BOOLEAN;
  vTYPECOMMANDEPM CRD_MAD_PM.TYPECOMMANDEPM%TYPE;
  vInseePM        CRD_MAD_PM.CODEINSEEPM%TYPE;
  vNomFic         VARCHAR2(255);
  vIndice             NUMBER;
  vCodOi          REF_OI.COD_OI%TYPE;
  vVerPrtcl       PART_FLX.PRTCL%TYPE;
BEGIN
  vIdPM := NAT_FF1_CR_MAD_PM.GET_C_REFERENCEPM_SMP;

  OPEN C_TYPECMD(vIdPM);
  FETCH C_TYPECMD INTO R_TYPECMD;
  vFoundCmd := C_TYPECMD%FOUND;
  CLOSE C_TYPECMD;
  vTYPECOMMANDEPM := R_TYPECMD.TYPECOMMANDEPM;
  vInseePM        := R_TYPECMD.CODEINSEEPM;
  vIndice         := '01';
  vCodOi          := NAT_FTTH_OI.GET_OI(R_TYPECMD.FILE_ID);
  vVerPrtcl       := GET_VER_PRTCL(NAT_FTTH_OI.P_CODOI_SIMPSON);

--V-ARMAD-PM_397480930_<CodeInteropSimpson>_BOUY_Insee_PM_refPM_ARMAD_V<XX>_aaaammjj_numsequence.csv
--V-ARMAD-PM_397480930_<CodeInteropSimpson>_BOUY_PM_refPM_ARMAD_V<XX>_aaaammjj_numsequence.csv

  IF vVerPrtcl = '3.1' THEN
    IF vTYPECOMMANDEPM = 'COFI' THEN
      vNomFic := 'V-ARMAD-PM_397480930_'||NAT_FTTH_OI.P_CODOI_SIMPSON||'_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    ELSE
      vNomFic := 'V-ARMAD-PM_397480930_'||NAT_FTTH_OI.P_CODOI_SIMPSON||'_BOUY_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    END IF;
  ELSIF vVerPrtcl = '3.0' THEN
    IF vTYPECOMMANDEPM = 'COFI' THEN
      vNomFic := 'V-ARMAD-PM_397480930_'||NAT_FTTH_OI.P_CODOI_SIMPSON||'_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    ELSE
      vNomFic := 'V-ARMAD-PM_397480930_'||NAT_FTTH_OI.P_CODOI_SIMPSON||'_BOUY_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    END IF;
  END IF;

  RETURN vNomFic;
END;

FUNCTION GET_NOMFIC_ARMAD_OFSMP
  RETURN VARCHAR2 IS
  vIdPM PM.IDPM%TYPE;
  CURSOR C_TYPECMD(v_IDPM VARCHAR2) IS
    SELECT DISTINCT c.TYPECOMMANDEPM,
                    c.CODEINSEEPM,
                    c.FILE_ID
      FROM CRD_MAD_PM c
     WHERE c.REFERENCEPM = v_IDPM;
  R_TYPECMD C_TYPECMD%ROWTYPE;
  vFoundCmd BOOLEAN;
  vTYPECOMMANDEPM CRD_MAD_PM.TYPECOMMANDEPM%TYPE;
  vInseePM        CRD_MAD_PM.CODEINSEEPM%TYPE;
  vNomFic         VARCHAR2(255);
  vIndice             NUMBER;
  vCodOi          REF_OI.COD_OI%TYPE;
  vVerPrtcl       PART_FLX.PRTCL%TYPE;
BEGIN
  vIdPM := NAT_FF1_CR_MAD_PM.GET_C_REFERENCEPM_SMP;

  OPEN C_TYPECMD(vIdPM);
  FETCH C_TYPECMD INTO R_TYPECMD;
  vFoundCmd := C_TYPECMD%FOUND;
  CLOSE C_TYPECMD;
  vTYPECOMMANDEPM := R_TYPECMD.TYPECOMMANDEPM;
  vInseePM        := R_TYPECMD.CODEINSEEPM;
  vIndice         := '01';
  vCodOi          := NAT_FTTH_OI.GET_OI(R_TYPECMD.FILE_ID);
  vVerPrtcl       := GET_VER_PRTCL(NAT_FTTH_OI.P_CODOI_SIMPSON);

  --V-ARMAD-PM_<SirenSimpson>_FTEL_<CodeInteropSimpson>_Insee_PM_refPM_ARMAD_V<XX>_aaaammjj_numsequence.csv
  --V-ARMAD-PM_<SirenSimpson>_FTEL_<CodeInteropSimpson>_PM_refPM_ARMAD_V<XX>_aaaammjj_numsequence.csv
  IF vVerPrtcl = '3.1' THEN
    IF vTYPECOMMANDEPM = 'COFI' THEN
      vNomFic := 'V-ARMAD-PM_'||NAT_FTTH_OI.P_SIRENSIMPSON||'_FTEL_'||NAT_FTTH_OI.P_CODOI_SIMPSON||'_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    ELSE
      vNomFic := 'V-ARMAD-PM_'||NAT_FTTH_OI.P_SIRENSIMPSON||'_FTEL_'||NAT_FTTH_OI.P_CODOI_SIMPSON||'_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    END IF;
  ELSIF vVerPrtcl = '3.0' THEN
    IF vTYPECOMMANDEPM = 'COFI' THEN
      vNomFic := 'V-ARMAD-PM_'||NAT_FTTH_OI.P_SIRENSIMPSON||'_FTEL_'||NAT_FTTH_OI.P_CODOI_SIMPSON||'_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    ELSE
      vNomFic := 'V-ARMAD-PM_'||NAT_FTTH_OI.P_SIRENSIMPSON||'_FTEL_'||NAT_FTTH_OI.P_CODOI_SIMPSON||'_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    END IF;
  END IF;
  RETURN vNomFic;
END;

FUNCTION GET_NOMFIC_ARMAD_SIEA
  RETURN VARCHAR2 IS
  vIdPM PM.IDPM%TYPE;
  CURSOR C_TYPECMD(v_IDPM VARCHAR2) IS
    SELECT DISTINCT c.TYPECOMMANDEPM,
                    c.CODEINSEEPM,
                    c.FILE_ID
      FROM CRD_MAD_PM c
     WHERE c.REFERENCEPM = v_IDPM;
  R_TYPECMD C_TYPECMD%ROWTYPE;
  vTYPECOMMANDEPM CRD_MAD_PM.TYPECOMMANDEPM%TYPE;
  vInseePM        CRD_MAD_PM.CODEINSEEPM%TYPE;
  vNomFic         VARCHAR2(255);
  vIndice             NUMBER;
  vCodOi          REF_OI.COD_OI%TYPE;
  vVerPrtcl       PART_FLX.PRTCL%TYPE;
BEGIN
  vIdPM := NAT_FF1_CR_MAD_PM.GET_C_REFERENCEPM_SIEA;

  OPEN C_TYPECMD(vIdPM);
    FETCH C_TYPECMD INTO R_TYPECMD;
  CLOSE C_TYPECMD;

  vTYPECOMMANDEPM := R_TYPECMD.TYPECOMMANDEPM;
  vInseePM        := R_TYPECMD.CODEINSEEPM;
  vIndice         := '01';
  vCodOi          := NAT_FTTH_OI.GET_OI(R_TYPECMD.FILE_ID);
  vVerPrtcl       := GET_VER_PRTCL('SIEA');

  IF vVerPrtcl = '3.1' THEN
    IF vTYPECOMMANDEPM = 'COFI' THEN -- Cofinancement
      -- LIAIN_01_CodeOI_BOUY_Insee_PM_refPM_ARMAD_V31_aaaammjj_numsequence.csv
      vNomFic := 'LIAIN_01_'||vCodOi||'_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    ELSE -- Unitaire
      -- LIAIN_01_CodeOI_BOUY_PM_RefPM_ARMAD_V31_aaaammjj_numsequence.csv
      vNomFic :=  'LIAIN_01_'||vCodOi||'_BOUY_PM_' || vIdPM || '_ARMAD_V31_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    END IF;
  ELSIF vVerPrtcl = '3.0' THEN
    IF vTYPECOMMANDEPM = 'COFI' THEN -- Cofinancement
      -- LIAIN_01_CodeOI_BOUY_Insee_PM_refPM_ARMAD_V30_aaaammjj_numsequence.csv
      vNomFic := 'LIAIN_01_'||vCodOi||'_BOUY_'||vInseePM||'_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    ELSE -- Unitaire
      -- LIAIN_01_CodeOI_BOUY_PM_RefPM_ARMAD_V30_aaaammjj_numsequence.csv
      vNomFic :=  'LIAIN_01_'||vCodOi||'_BOUY_PM_' || vIdPM || '_ARMAD_V30_' ||TO_CHAR(SYSDATE,'yyyymmdd')||'_'||vIndice||'.csv';
    END IF;
  END IF;

  RETURN vNomFic;
END;

-----------------------------------------------------------------------------------
-- Post Traitement PLAN MAD
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_PLANMAD_V21(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                              P_CODOI   IN REF_OI.COD_OI%TYPE) IS

vGeneratedName VARCHAR2(100);
v_Fileio_OUT   NUMBER;
vKeyVal        VARCHAR2(50);
rep            VARCHAR2(500);
vres           NUMBER;
vRegExp        VARCHAR2(100);
vIDPM          VARCHAR2(100);
vIfcOutSig     VARCHAR2(50);
vPartAdd       VARCHAR2(4);
vPrjpmID       NUMBER;

CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = P_FILE_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;

CURSOR C_EXIST_PRJ_MMO IS
SELECT prj.PRJPMMMO_ID
  FROM PM pm,
       PRJPMMMO prj
  WHERE pm.IDPM = vIDPM
    AND pm.GEO_ID = prj.GEO_ID;
R_EXIST_PRJ_MMO C_EXIST_PRJ_MMO%ROWTYPE;
vFoundPrjMmo BOOLEAN;
BEGIN
  SELECT NOM_FIC,
         REP_FIC
   INTO vGeneratedName,
        rep
   FROM FILE_IO
  WHERE FILE_ID =  P_FILE_ID;

  SELECT regexp_replace(regexp_replace(REGEXP_SUBSTR(vGeneratedName,'_PM_(.*.)+\_'),'(_PM_)',''),'(_MAD_.*)|(_PLANMAD.*)','')
    INTO vIDPM
    FROM DUAL;

  UPDATE FILE_IO F
     SET f.LIB1 = 'IDPM',
         f.VAL1 = vGeneratedName
   WHERE f.FILE_ID = P_FILE_ID;

  BEGIN
    SELECT 1
      INTO vres
      FROM DUAL
     WHERE REGEXP_LIKE(UPPER(vGeneratedName),UPPER('PLANMAD_V21.zip$'));
  EXCEPTION
    WHEN OTHERS THEN
       vres := 0;
  END;

  BEGIN
    SELECT 1
      INTO vres
      FROM DUAL
     WHERE REGEXP_LIKE(UPPER(vGeneratedName),UPPER('PLANMAD_V22.zip$'));
  EXCEPTION
    WHEN OTHERS THEN
       vres := 0;
  END;

  IF (vres = 1) THEN
    SELECT 'PLANMAD_'||P_CODOI||'_'||vIDPM
     INTO vRegExp
     FROM DUAL;
    NAT_IFC_TRT.UPDATE_FILE_REGEXP(P_FILE_ID,UPPER(vRegExp));
    COMMIT;
  END IF;

  -- Insertion des dans la table PJ
  INSERT INTO FTH_PJ (FTH_PJ_ID,
                      TYP,
                      DATPJ,
                      FILE_ID,
                      IDPM,
                      FILE_ID_PRT,
                      FILE_NET_ID,
                      NOMPJ)
  VALUES(SEQ_FTH_PJ.NEXTVAL,
         'MAD',
         sysdate,
         P_FILE_ID,
         vIDPM,
         NULL,
         NULL,
         vGeneratedName);

    IF rep = 'DIR_FTTH_OI_FT' THEN
      vIfcOutSig :=  'FTTH_SIG_MADPM_OUT_FT';
    ELSIF rep = 'DIR_FTTH_OI_SFR' THEN
      vIfcOutSig := 'FTTH_SIG_HBCRMADPM_OUT_SFR';
    ELSIF rep = 'DIR_FTTH_OI_NC' THEN
      vIfcOutSig := 'FTTH_SIG_MADPM_OUT_NC';
    ELSIF rep = 'DIR_FTTH_AXIONE_BFILE' THEN
      vIfcOutSig := 'FTTH_SIG_MADPM_OUT_SEQ';
    ELSIF rep = 'DIR_FTTH_OI_FREE' THEN
      vIfcOutSig := 'FTTH_SIG_MADPM_OUT_FREE';
    END IF;

   --Rebond  -> SIG
   BEGIN
     GEN_REBOND( vIfcOutSig, vGeneratedName, P_FILE_ID);
   EXCEPTION
     WHEN OTHERS THEN
       plog.ERROR('Erreur lors du rebond CRMAD  vers le SIG','SQLERRM', SQLERRM);
   END;

  BEGIN
    NAT_FF1_TRT_FLX.TRT_FTH_PJ(P_FILE_ID);
    --Contrôle de la présence du Plan MAD FEP
    NAT_FF1_CTRL_FEP.CTRL_ABS_PLN_MAD(vIDPM);
    --Calcul de l'Avancement
    BEGIN
    SELECT prj.PART_ADD, prj.PRJPM_ID
      INTO vPartAdd,
           vPrjpmID
      FROM ETAPRJPM eta,
           PM pm,
           PRJPM prj
     WHERE pm.IDPM = vIDPM
       AND prj.GEO_ID = pm.GEO_ID
       AND eta.ETAPRJPM_ID = prj.Etaprjpm_Id
       AND eta.Etaprjpm <> 'ABN';
    EXCEPTION
      WHEN OTHERS THEN
        vPartAdd := NULL;
    END;
    --Cloture de l'alerte de non reception du Plan Mad sur PM deploye dans le IPE
    NAT_FF1_CTRL.CLOSE_ALERTE(vPrjpmID,
                              NAT_FF1_CTRL.ID_ALRT_PLAN_MAD_ABS,
                              vIDPM);

    NAT_FF1.AVANCMT_PRJ(vPrjpmID);

    OPEN C_EXIST_PRJ_MMO;
    FETCH C_EXIST_PRJ_MMO INTO R_EXIST_PRJ_MMO;
    vFoundPrjMmo := C_EXIST_PRJ_MMO%FOUND;
    CLOSE C_EXIST_PRJ_MMO;
    IF vFoundPrjMmo THEN
      NAT_FF1_BTMMO.AVANCMT_PRJ_BTMMO(R_EXIST_PRJ_MMO.PRJPMMMO_ID);
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      plog.ERROR('Erreur lors du du traitement FF du PJ CRMAD FT','SQLERRM', SQLERRM);
  END;

  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => vIDPM,
                       P_CODOI    => P_CODOI,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;

PROCEDURE POS_TRT_PLANMAD_V22(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                              P_CODOI   IN REF_OI.COD_OI%TYPE) IS
BEGIN
  POS_TRT_PLANMAD_V21(P_FILE_ID,P_CODOI );
END;

PROCEDURE POS_TRT_PLANMAD_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                              P_CODOI   IN REF_OI.COD_OI%TYPE) IS
BEGIN
  POS_TRT_PLANMAD_V21(P_FILE_ID,P_CODOI );
END;



-----------------------------------------------------------------------------------
-- Post Traitement COVA PLAN MAD 3.0
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_PLANMAD_IN_COVA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_PLANMAD_V30(P_FILE_ID,vCodOi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement FT PLAN MAD
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_PLANMAD_IN_FT_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
BEGIN
  vCod_Oi := GET_OI(P_FILE_ID);
  POS_TRT_PLANMAD_V30(P_FILE_ID,vCod_Oi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement SFRA PLAN MAD
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_PLANMAD_IN_SFRA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
BEGIN
  vCod_Oi := GET_OI(P_FILE_ID);
  POS_TRT_PLANMAD_V30(P_FILE_ID,vCod_Oi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement NUME PLAN MAD
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_PLANMAD_IN_NUME_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  POS_TRT_PLANMAD_V30(P_FILE_ID,'NUME');
END;

-----------------------------------------------------------------------------------
-- Post Traitement SEQU PLAN MAD
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_PLANMAD_IN_AXIO_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_PLANMAD_V30(P_FILE_ID,vCodOi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement FREE PLAN MAD
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_PLANMAD_IN_FREE_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  POS_TRT_PLANMAD_V30(P_FILE_ID,'FREE');
END;

-----------------------------------------------------------------------------------
-- Post Traitement COVA PLAN MAD
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_PLANMAD_IN_ALTI_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_PLANMAD_V30(P_FILE_ID,vCodOi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement TDF PLAN MAD
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_PLANMAD_IN_TDF_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_PLANMAD_V30(P_FILE_ID,vCodOi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement Simpson PLAN MAD
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_PLANMAD_IN_SMP_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_PLANMAD_V30(P_FILE_ID,vCodOi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement SIEA PLAN MAD
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_PLANMAD_IN_SIEA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  POS_TRT_PLANMAD_V30(P_FILE_ID, GET_OI(P_FILE_ID));
END;

-----------------------------------------------------------------------------------
-- Post Traitement CRMAD POSITION
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_POSITION_V21(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                               P_CODOI   IN REF_OI.COD_OI%TYPE) IS

vGeneratedName VARCHAR2(100);
v_Fileio_OUT   NUMBER;
vKeyVal        VARCHAR2(50);
rep            VARCHAR2(500);
vres           NUMBER;
vRegExp        VARCHAR2(100);
vIDPM          VARCHAR2(100);
vId_Preparation    NUMBER;

CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = P_FILE_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
BEGIN
  SELECT NOM_FIC,
         REP_FIC
   INTO vGeneratedName,
        rep
   FROM FILE_IO
  WHERE FILE_ID =  P_FILE_ID;


  SELECT regexp_replace(REGEXP_SUBSTR(UPPER(vGeneratedName),'PM_(.*.)_POSITIONS+\'),'(PM_|_POSITIONS)','')
    INTO vIDPM
    FROM DUAL;

  BEGIN
    SELECT 1
      INTO vres
      FROM DUAL
     WHERE REGEXP_LIKE(UPPER(vGeneratedName),UPPER('positions_21.csv$'));
  EXCEPTION
    WHEN OTHERS THEN
       vres := 0;
  END;

  IF (vres = 1) THEN
    SELECT 'POSITIONS_'||P_CODOI||'_'||vIDPM
      INTO vRegExp
      FROM DUAL;
    NAT_IFC_TRT.UPDATE_FILE_REGEXP(P_FILE_ID,UPPER(vRegExp));
    COMMIT;
  END IF;

  INSERT INTO FTH_PJ (fth_pj_id,typ,datpj,file_id,idpm,file_net_id,nompj)
  VALUES(seq_fth_pj.NEXTVAL,'POS',SYSDATE,P_FILE_ID,vIDPM,NULL,vGeneratedName);


  BEGIN
    NAT_FF1_TRT_FLX.TRT_FTH_PJ(P_FILE_ID);
  EXCEPTION
    WHEN OTHERS THEN
      plog.ERROR('Erreur lors du du traitement FF du PJ CRMAD FT','SQLERRM', SQLERRM);
  END;

  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => vIDPM,
                       P_CODOI    => P_CODOI,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;

PROCEDURE POS_TRT_POSITION_V22(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                               P_CODOI   IN REF_OI.COD_OI%TYPE) IS
BEGIN
  POS_TRT_POSITION_V21 (P_FILE_ID,P_CODOI);
END;

PROCEDURE POS_TRT_POSITION_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                               P_CODOI   IN REF_OI.COD_OI%TYPE) IS
BEGIN
  POS_TRT_POSITION_V21 (P_FILE_ID,P_CODOI);
END;



-----------------------------------------------------------------------------------
-- Post Traitement COVAGE CRMAD Position 3.0
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_POSITION_IN_COVA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCOD_OI REF_OI.COD_OI%TYPE;
BEGIN
  vCOD_OI := GET_OI(P_FILE_ID);
  POS_TRT_POSITION_V30(P_FILE_ID,vCOD_OI);
END;

-----------------------------------------------------------------------------------
-- Post Traitement FT CRMAD Position
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_POSITION_IN_FT_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
BEGIN
  vCod_Oi := GET_OI(P_FILE_ID);
  POS_TRT_POSITION_V30(P_FILE_ID,vCod_Oi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement SFRA CRMAD Position
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_POSITION_IN_SFRA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
BEGIN
  vCod_Oi := GET_OI(P_FILE_ID);
  POS_TRT_POSITION_V30(P_FILE_ID,vCod_Oi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement NUME CRMAD Position
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_POSITION_IN_NUME_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  POS_TRT_POSITION_V30(P_FILE_ID,'NUME');
END;

-----------------------------------------------------------------------------------
-- Post Traitement AXIONE CRMAD Position
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_POSITION_IN_AXIO_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCOD_OI REF_OI.COD_OI%TYPE;
BEGIN
  vCOD_OI := GET_OI(P_FILE_ID);
  POS_TRT_POSITION_V30(P_FILE_ID,vCOD_OI);
END;

-----------------------------------------------------------------------------------
-- Post Traitement FREE CR MAD Position
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_POSITION_IN_FREE_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  POS_TRT_POSITION_V30(P_FILE_ID,'FREE');
END;

-----------------------------------------------------------------------------------
-- Post Traitement ALTI CRMAD Position
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_POSITION_IN_ALTI_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCOD_OI REF_OI.COD_OI%TYPE;
BEGIN
  vCOD_OI := GET_OI(P_FILE_ID);
  POS_TRT_POSITION_V30(P_FILE_ID,vCOD_OI);
END;

-----------------------------------------------------------------------------------
-- Post Traitement Simpson CRMAD Position
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_POSITION_IN_SMP_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
BEGIN
  vCod_Oi := GET_OI(P_FILE_ID);
  POS_TRT_POSITION_V30(P_FILE_ID,vCod_Oi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement CR NFA Obsolète
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRNA_V21(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                           P_CODOI   IN REF_OI.COD_OI%TYPE) IS

BEGIN
  NULL;
END;

PROCEDURE POS_TRT_CRNA_V22(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                           P_CODOI   IN REF_OI.COD_OI%TYPE) IS

vGeneratedName VARCHAR2(255);
v_Fileio_OUT   NUMBER;
rep            VARCHAR2(255);
vKeyVal        VARCHAR2(255);
vRegExp        VARCHAR2(100);
v_idpm         VARCHAR2(100);
vIdPmTrt       CRNA_COVA_22_TMP.REFERENCEPM%TYPE;
vId_Preparation    NUMBER;
vId_PreparationSig NUMBER;
V_CUR       SYS_REFCURSOR;
R_CUR       CRNA_COVA_22_TMP%ROWTYPE;
vPRJPM_ID   PRJPM.PRJPM_ID%TYPE;
-- récupération de la table temporaire
CURSOR C_GET_TMP IS
  SELECT flx.CRNA_TMP
    FROM PART_FLX   flx,
         REF_OI_PRM rop,
         REF_OI     roi
   WHERE roi.COD_OI = P_CODOI
     AND rop.COD_OI = roi.COD_OI
     AND rop.PRTCL  = '2.2'
     AND rop.OBS    = 0
     AND flx.COD_PART_FLUX = rop.COD_PART_FLUX;
R_GET_TMP C_GET_TMP%ROWTYPE;
vFoundTmp BOOLEAN;
-- Récupération du Projet
CURSOR C_PRJPM(vIdPm PM.IDPM%TYPE) IS
  SELECT prj.PRJPM_ID
    FROM ETAPRJPM eta,
         PRJPM prj,
         PM    pm
   WHERE pm.IDPM         = vIdpm
     AND prj.GEO_ID      = pm.GEO_ID
     AND prj.NUM_EXTENT  IS NULL
     AND eta.ETAPRJPM_ID = prj.ETAPRJPM_ID
     AND eta.ETAPRJPM    <> 'ABN';
R_PRJPM C_PRJPM%ROWTYPE;
vFoundPrj BOOLEAN;

CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = P_FILE_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
BEGIN

  OPEN C_GET_TMP;
  FETCH C_GET_TMP INTO R_GET_TMP;
  vFoundTmp := C_GET_TMP%FOUND;
  CLOSE C_GET_TMP;

  IF vFoundTmp THEN
    V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(R_GET_TMP.CRNA_TMP);

    SELECT NOM_FIC,
           REP_FIC
      INTO vGeneratedName,
           rep
      FROM FILE_IO
     WHERE FILE_ID =  P_FILE_ID;

      LOOP
        FETCH V_CUR INTO R_CUR;
        EXIT WHEN V_CUR%NOTFOUND;
        DELETE FROM CR_NFA p WHERE p.REFERENCEPM = R_CUR.REFERENCEPM;
        BEGIN
          NAT_FF1_TRT_FLX.INS_CR_NFA(R_CUR.REFERENCEPM,
                                     R_CUR.REFERENCECOMMANDEPMINTERNEOC,
                                     R_CUR.REFERENCEPRESTATIONPM,
                                     TO_DATE(R_CUR.DATECRADDUCTION,'YYYY/MM/DD'),
                                     TO_DATE(R_CUR.DATENOTIFADDUCTION,'YYYY/MM/DD'),
                                     R_CUR.ETATCRADDUCTION,
                                     R_CUR.CODEKOCRADDUCTION,
                                     R_CUR.MOTIFKOCRADDUCTION,
                                     R_CUR.DATE_IMP,
                                     R_CUR.FILE_ID
                                     );
          NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_CUR.REFERENCEPM,P_FILE_ID);
          v_idpm := R_CUR.REFERENCEPM;
          BEGIN
            NAT_FF1_TRT_FLX.TRT_CR_NFA_IN(P_FILE_ID);
          EXCEPTION
            WHEN OTHERS THEN
              plog.ERROR('Erreur lors du traitement In FF','SQLERRM', SQLERRM,'','');
          END;
      END;
    END LOOP;

    SELECT 'CRNA_'||P_CODOI||'_'||v_idpm
      INTO vRegExp
      FROM DUAL;
    NAT_IFC_TRT.UPDATE_FILE_REGEXP(P_FILE_ID,UPPER(vRegExp));
    COMMIT;

     -- Avancement FF
     OPEN C_PRJPM(v_idpm);
     FETCH C_PRJPM INTO R_PRJPM;
     vFoundPrj := C_PRJPM%FOUND;
     CLOSE C_PRJPM;

     IF vFoundPrj THEN
       NAT_FF1.AVANCMT_PRJ(R_PRJPM.PRJPM_ID);
     END IF;
   END IF;

  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => v_idpm,
                       P_CODOI    => P_CODOI,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);

END;

PROCEDURE POS_TRT_CRNA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                           P_CODOI   IN REF_OI.COD_OI%TYPE) IS

vGeneratedName VARCHAR2(255);
v_Fileio_OUT   NUMBER;
rep            VARCHAR2(255);
vKeyVal        VARCHAR2(255);
vRegExp        VARCHAR2(100);
v_idpm         VARCHAR2(100);
vIdPmTrt       CRNA_FT_30_TMP.REFERENCEPM%TYPE;
vId_Preparation    NUMBER;
vId_PreparationSig NUMBER;
V_CUR       SYS_REFCURSOR;
R_CUR       CRNA_FT_30_TMP%ROWTYPE;
vPRJPM_ID   PRJPM.PRJPM_ID%TYPE;
-- récupération de la table temporaire
CURSOR C_GET_TMP IS
  SELECT flx.CRNA_TMP
    FROM PART_FLX   flx,
         REF_OI_PRM rop,
         REF_OI     roi
   WHERE roi.COD_OI = P_CODOI
     AND rop.COD_OI = roi.COD_OI
     AND rop.PRTCL  = '3.0'
     AND rop.OBS    = 0
     AND flx.COD_PART_FLUX = rop.COD_PART_FLUX;
R_GET_TMP C_GET_TMP%ROWTYPE;
vFoundTmp BOOLEAN;
-- Récupération du Projet
CURSOR C_PRJPM(vIdPm PM.IDPM%TYPE) IS
  SELECT prj.PRJPM_ID
    FROM ETAPRJPM eta,
         PRJPM prj,
         PM    pm
   WHERE pm.IDPM         = vIdpm
     AND prj.GEO_ID      = pm.GEO_ID
     AND prj.NUM_EXTENT  IS NULL
     AND eta.ETAPRJPM_ID = prj.ETAPRJPM_ID
     AND eta.ETAPRJPM    <> 'ABN';
R_PRJPM C_PRJPM%ROWTYPE;
vFoundPrj BOOLEAN;

CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = P_FILE_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
BEGIN

  OPEN C_GET_TMP;
  FETCH C_GET_TMP INTO R_GET_TMP;
  vFoundTmp := C_GET_TMP%FOUND;
  CLOSE C_GET_TMP;

  IF vFoundTmp THEN
    V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(R_GET_TMP.CRNA_TMP);

    SELECT NOM_FIC,
           REP_FIC
      INTO vGeneratedName,
           rep
      FROM FILE_IO
     WHERE FILE_ID =  P_FILE_ID;

      LOOP
        FETCH V_CUR INTO R_CUR;
        EXIT WHEN V_CUR%NOTFOUND;
        DELETE FROM CR_NFA p WHERE p.REFERENCEPM = R_CUR.REFERENCEPM;
        BEGIN
          NAT_FF1_TRT_FLX.INS_CR_NFA(R_CUR.REFERENCEPM,
                                     R_CUR.REFERENCECOMMANDEPMINTERNEOC,
                                     R_CUR.REFERENCEPRESTATIONPM,
                                     TO_DATE(R_CUR.DATECRADDUCTION,'YYYY/MM/DD'),
                                     TO_DATE(R_CUR.DATENOTIFADDUCTION,'YYYY/MM/DD'),
                                     R_CUR.ETATCRADDUCTION,
                                     R_CUR.CODEKOCRADDUCTION,
                                     R_CUR.MOTIFKOCRADDUCTION,
                                     R_CUR.DATE_IMP,
                                     R_CUR.FILE_ID
                                     );
          NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_CUR.REFERENCEPM,P_FILE_ID);
          v_idpm := R_CUR.REFERENCEPM;
          BEGIN
            NAT_FF1_TRT_FLX.TRT_CR_NFA_IN(P_FILE_ID);
          EXCEPTION
            WHEN OTHERS THEN
              plog.ERROR('Erreur lors du traitement In FF','SQLERRM', SQLERRM,'','');
          END;
      END;
    END LOOP;

    SELECT 'CRNA_'||P_CODOI||'_'||v_idpm
      INTO vRegExp
      FROM DUAL;
    NAT_IFC_TRT.UPDATE_FILE_REGEXP(P_FILE_ID,UPPER(vRegExp));
    COMMIT;

     -- Avancement FF
     /*OPEN C_PRJPM(v_idpm);
     FETCH C_PRJPM INTO R_PRJPM;
     vFoundPrj := C_PRJPM%FOUND;
     CLOSE C_PRJPM;

     IF vFoundPrj THEN
       NAT_FF1.AVANCMT_PRJ(R_PRJPM.PRJPM_ID);
     END IF;*/
     FOR R_PRJPM IN C_PRJPM(v_idpm) LOOP
       IF R_PRJPM.PRJPM_ID IS NOT NULL THEN
           NAT_FF1_CTRL.CTRL_ENV_NFA_CRNFA(v_idpm,R_PRJPM.PRJPM_ID);
         NAT_FF1.AVANCMT_PRJ(R_PRJPM.PRJPM_ID);

       END IF;
     END LOOP;
   END IF;

  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => v_idpm,
                       P_CODOI    => P_CODOI,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_INFO_IFC.IFC_ID,
                       P_PRM_ID   => R_INFO_IFC.PRM_ID);
END;


-----------------------------------------------------------------------------------
-- Post Traitement COVAGE CRNA 3.0
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRNA_IN_COVA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_CRNA_V30(P_FILE_ID,vCodOi);
END;
-----------------------------------------------------------------------------------
-- Post Traitement FT CR NA
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRNA_IN_FT_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
BEGIN
  vCod_Oi := GET_OI(P_FILE_ID);
  POS_TRT_CRNA_V30(P_FILE_ID,vCod_Oi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement SFRA CRNA
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRNA_IN_SFRA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
BEGIN
  vCod_Oi := GET_OI(P_FILE_ID);
  POS_TRT_CRNA_V30(P_FILE_ID,vCod_Oi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement NUME CRNA
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRNA_IN_NUME_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  POS_TRT_CRNA_V30(P_FILE_ID,'NUME');
END;

-----------------------------------------------------------------------------------
-- Post Traitement AXIONE CRNA
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRNA_IN_AXIO_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_CRNA_V30(P_FILE_ID,vCodOi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement FREE CR MAD PM
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRNA_IN_FREE_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  POS_TRT_CRNA_V30(P_FILE_ID,'FREE');
END;

-----------------------------------------------------------------------------------
-- Post Traitement ALTI CRNA
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRNA_IN_ALTI_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_CRNA_V30(P_FILE_ID,vCodOi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement TDF CRNA
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRNA_IN_TDF_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_CRNA_V30(P_FILE_ID,vCodOi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement CRNA Simpson
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRNA_IN_SMP_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCodOi REF_OI.COD_OI%TYPE;
BEGIN
  vCodOi := GET_OI(P_FILE_ID);
  POS_TRT_CRNA_V30(P_FILE_ID,vCodOi);
END;

-----------------------------------------------------------------------------------
-- Post Traitement CRNA SIEA
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRNA_IN_SIEA_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
BEGIN
  POS_TRT_CRNA_V30(P_FILE_ID, GET_OI(P_FILE_ID));
END;

-----------------------------------------------------------------------------------
-- Post Traitement TDF CRMAD Position
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_POSITION_IN_TDF_V30(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
vCOD_OI REF_OI.COD_OI%TYPE;
BEGIN
  vCOD_OI := GET_OI(P_FILE_ID);
  POS_TRT_POSITION_V30(P_FILE_ID,vCOD_OI);
END;
-----------------------------------------------------------------------------------
-- insertion dans la table des adresses OI
-----------------------------------------------------------------------------------
PROCEDURE INS_ADR_IMM_OI ( P_REFERENCEPM                    IN ADR_IMM_OI.REFERENCEPM%TYPE,
                           P_IMM_ID                         IN ADR_IMM_OI.IMM_ID%TYPE,
                           P_IDENTIFIANTIMMEUBLE            IN ADR_IMM_OI.IDENTIFIANTIMMEUBLE%TYPE,
                           P_CODERIVOLIIMMEUBLE             IN ADR_IMM_OI.CODERIVOLIIMMEUBLE%TYPE,
                           P_CODEINSEEIMMEUBLE              IN ADR_IMM_OI.CODEINSEEIMMEUBLE%TYPE,
                           P_CODEPOSTALIMMEUBLE             IN ADR_IMM_OI.CODEPOSTALIMMEUBLE%TYPE,
                           P_VILLEIMMEUBLE                  IN ADR_IMM_OI.VILLEIMMEUBLE%TYPE,
                           P_CODEADRESSEIMMEUBLE            IN ADR_IMM_OI.CODEADRESSEIMMEUBLE%TYPE,
                           P_TYPEVOIEIMMEUBLE               IN ADR_IMM_OI.TYPEVOIEIMMEUBLE%TYPE,
                           P_NOMVOIEIMMEUBLE                IN ADR_IMM_OI.NOMVOIEIMMEUBLE%TYPE,
                           P_NUMEROVOIEIMMEUBLE             IN ADR_IMM_OI.NUMEROVOIEIMMEUBLE%TYPE,
                           P_COMPLEMENTNUMEROVOIEIMMEUBLE   IN ADR_IMM_OI.COMPLEMENTNUMEROVOIEIMMEUBLE%TYPE,
                           P_BATIMENTIMMEUBLE               IN ADR_IMM_OI.BATIMENTIMMEUBLE%TYPE,
                           P_NBRELOGEMENTSINFOPREALABLES    IN ADR_IMM_OI.NOMBRELOGEMENTSINFOPREALABLES%TYPE,
                           P_ETATIMMEUBLE                   IN ADR_IMM_OI.ETATIMMEUBLE%TYPE,
                           P_ETATPM                         IN ADR_IMM_OI.ETATPM%TYPE,
                           P_DATEINSTALLATIONPM             IN ADR_IMM_OI.DATEINSTALLATIONPM%TYPE,
                           P_CODERIVOLIPM                   IN ADR_IMM_OI.CODERIVOLIPM%TYPE,
                           P_CODEINSEEPM                    IN ADR_IMM_OI.CODEINSEEPM%TYPE,
                           P_CODEPOSTALPM                   IN ADR_IMM_OI.CODEPOSTALPM%TYPE,
                           P_VILLEPM                        IN ADR_IMM_OI.VILLEPM%TYPE,
                           P_CODEADRESSEPM                  IN ADR_IMM_OI.CODEADRESSEPM%TYPE,
                           P_TYPEVOIEPM                     IN ADR_IMM_OI.TYPEVOIEPM%TYPE,
                           P_NOMVOIEPM                      IN ADR_IMM_OI.NOMVOIEPM%TYPE,
                           P_NUMEROVOIEPM                   IN ADR_IMM_OI.NUMEROVOIEPM%TYPE,
                           P_COMPLEMENTVOIEPM               IN ADR_IMM_OI.COMPLEMENTVOIEPM%TYPE,
                           P_DATE_IMP                       IN ADR_IMM_OI.DATE_IMP%TYPE,
                           P_FILE_ID                        IN ADR_IMM_OI.FILE_ID%TYPE,
                           P_BATIMENTPM                     IN ADR_IMM_OI.BATIMENTPM%TYPE,
                           P_CODOI                          IN ADR_IMM_OI.CODOI%TYPE,
                           P_TYPZON                         IN ADR_IMM_OI.TYPZON%TYPE,
                           P_DATENVOSSFAI                   IN ADR_IMM_OI.DATENVOSSFAI%TYPE,
                           P_NOMBREPMTECHNIQUES             IN ADR_IMM_OI.NOMBREPMTECHNIQUES%TYPE,
                           P_TYPEIMMEUBLE                   IN ADR_IMM_OI.TYPEIMMEUBLE%TYPE,
                           P_TYPEPROJECTIONGEOGRAPHIQUE     IN ADR_IMM_OI.TYPEPROJECTIONGEOGRAPHIQUE%TYPE,
                           P_COORDONNEEPMX                  IN ADR_IMM_OI.COORDONNEEPMX%TYPE,
                           P_COORDONNEEPMY                  IN ADR_IMM_OI.COORDONNEEPMY%TYPE,
                           P_COORDONNEEIMMEUBLEX            IN ADR_IMM_OI.COORDONNEEIMMEUBLEX%TYPE,
                           P_COORDONNEEIMMEUBLEY            IN ADR_IMM_OI.COORDONNEEIMMEUBLEY%TYPE,
                           P_TYPEZONE                       IN ADR_IMM_OI.TYPEZONE%TYPE,
                           P_BLACKLIST                      IN ADR_IMM_OI.BLACKLIST%TYPE,
                           P_MAJ_OSSF                       IN ADR_IMM_OI.MAJ_OSSF%TYPE,
                           P_ETAIMMSIR                      IN ADR_IMM_OI.ETAIMMSIR%TYPE,
                           P_SRCADR                         IN ADR_IMM_OI.SRCADR%TYPE,
                           P_ACRDGESTNAIREIMM               IN ADR_IMM_OI.ACCORDGESTIONNAIREIMMEUBLE%TYPE,
                           P_HEXABTL                        IN ADR_IMM_OI.HEXABTL%TYPE,
                           P_DATEMAJHEXABTL                 IN ADR_IMM_OI.DATEMAJHEXABTL%TYPE,
                           P_TYPEINGENIERIE                 IN ADR_IMM_OI.TYPEINGENIERIE%TYPE,
                           P_DATECABLAGEADRESSE             IN ADR_IMM_OI.DATECABLAGEADRESSE%TYPE,
                           P_TYPRACCOPBPTO                  IN ADR_IMM_OI.TYPRACCOPBPTO%TYPE,
                           P_TYPPBO                         IN ADR_IMM_OI.TYPPBO%TYPE,
                           P_DATEMISEENSERVICECOMEPM        IN ADR_IMM_OI.DATEMISEENSERVICECOMMERCIALEPM%TYPE,
                           P_DATMESCOMIMM                   IN ADR_IMM_OI.DATMESCOMIMM%TYPE,
                           P_DATDEBACPTCMDACSS              IN ADR_IMM_OI.DATDEBACPTCMDACSS%TYPE,
                           P_TYPEEMPLACEMENTPM              IN ADR_IMM_OI.TYPEEMPLACEMENTPM%TYPE,
                           P_CATRACLGMT_CAL                 IN ADR_IMM_OI.CATRACLGMT_CAL%TYPE,
                           P_CODEHEXACLEVOIE                IN ADR_IMM_OI.CODEHEXACLEVOIE%TYPE,
                           P_ADR_IMM_OI_ID                  OUT ADR_IMM_OI.ADR_IMM_OI_ID%TYPE,
                           P_SCORE_DEPL_IMB                 IN ADR_IMM_OI.SCORE_DEPL_IMB%TYPE,
                           P_SCORE_DEPL_PM                  IN ADR_IMM_OI.SCORE_DEPL_PM%TYPE,
                           P_SCORE_BLK                      IN ADR_IMM_OI.SCORE_BLACKLISTAGE%TYPE,
                           P_SCORE                          IN ADR_IMM_OI.SCORE_FINAL%TYPE,
                           P_BLOCAGEELIGIBILITE             IN ADR_IMM_OI.BLOCAGEELIGIBILITE%TYPE,
                           P_ORIGINEBLOCAGE                 IN ADR_IMM_OI.ORIGINEBLOCAGE%TYPE,
                           P_MOTIFBLOCAGE                   IN ADR_IMM_OI.MOTIFBLOCAGE%TYPE,
                           P_DATPREVDEBLOCAGE               IN ADR_IMM_OI.DATPREVDEBLOCAGE%TYPE,
                           P_DATDEBUTBLOCAGEELIG            IN ADR_IMM_OI.DATDEBUTBLOCAGEELIG%TYPE,
                           P_RACCORDEMENTLONG               IN ADR_IMM_OI.RACCORDEMENTLONG%TYPE,
                           P_REFPRDM                        IN ADR_IMM_OI.REFPRDM%TYPE,
                           P_SUPPORTINFRAFTTE               IN ADR_IMM_OI.SUPPORTINFRAFTTE%TYPE,
                           P_ETATIMMPBSPECIFIQUE            IN ADR_IMM_OI.ETATIMMPBSPECIFIQUE%TYPE) IS

BEGIN
  INSERT INTO ADR_IMM_OI
    (REFERENCEPM,
     IMM_ID,
     IDENTIFIANTIMMEUBLE,
     CODERIVOLIIMMEUBLE,
     CODEINSEEIMMEUBLE,
     CODEPOSTALIMMEUBLE,
     VILLEIMMEUBLE,
     CODEADRESSEIMMEUBLE,
     TYPEVOIEIMMEUBLE,
     NOMVOIEIMMEUBLE,
     NUMEROVOIEIMMEUBLE,
     COMPLEMENTNUMEROVOIEIMMEUBLE,
     BATIMENTIMMEUBLE,
     NOMBRELOGEMENTSINFOPREALABLES,
     ETATIMMEUBLE,
     ETATPM,
     DATEINSTALLATIONPM,
     CODERIVOLIPM,
     CODEINSEEPM,
     CODEPOSTALPM,
     VILLEPM,
     CODEADRESSEPM,
     TYPEVOIEPM,
     NOMVOIEPM,
     NUMEROVOIEPM,
     COMPLEMENTVOIEPM,
     DATE_IMP,
     FILE_ID,
     BATIMENTPM,
     CODOI,
     TYPZON,
     DATENVOSSFAI,
     NOMBREPMTECHNIQUES,
     TYPEIMMEUBLE,
     TYPEPROJECTIONGEOGRAPHIQUE,
     COORDONNEEPMX,
     COORDONNEEPMY,
     COORDONNEEIMMEUBLEX,
     COORDONNEEIMMEUBLEY,
     TYPEZONE,
     BLACKLIST,
     MAJ_OSSF,
     ETAIMMSIR,
     SRCADR,
     ACCORDGESTIONNAIREIMMEUBLE,
     HEXABTL,
     DATEMAJHEXABTL,
     TYPEINGENIERIE,
     DATECABLAGEADRESSE,
     TYPRACCOPBPTO,
     TYPPBO,
     DATEMISEENSERVICECOMMERCIALEPM,
     DATMESCOMIMM,
     DATDEBACPTCMDACSS,
     TYPEEMPLACEMENTPM,
     ADR_IMM_OI_ID,
     CATRACLGMT_CAL,
     CODEHEXACLEVOIE,
     SCORE_DEPL_IMB,
     SCORE_DEPL_PM,
     SCORE_BLACKLISTAGE,
     SCORE_FINAL,
     BLOCAGEELIGIBILITE,
     ORIGINEBLOCAGE,
     MOTIFBLOCAGE,
     DATPREVDEBLOCAGE,
     DATDEBUTBLOCAGEELIG,
     RACCORDEMENTLONG,
     REFPRDM,
     SUPPORTINFRAFTTE,
     ETATIMMPBSPECIFIQUE)
  VALUES
    (P_REFERENCEPM,
     P_IMM_ID,
     P_IDENTIFIANTIMMEUBLE,
     P_CODERIVOLIIMMEUBLE,
     P_CODEINSEEIMMEUBLE,
     P_CODEPOSTALIMMEUBLE,
     UPPER(PKG_TOOLS.TRANSLATE(P_VILLEIMMEUBLE)),
     P_CODEADRESSEIMMEUBLE,
     UPPER(PKG_TOOLS.TRANSLATE(P_TYPEVOIEIMMEUBLE)),
     UPPER(PKG_TOOLS.TRANSLATE(P_NOMVOIEIMMEUBLE)),
     P_NUMEROVOIEIMMEUBLE,
     UPPER(PKG_TOOLS.TRANSLATE(P_COMPLEMENTNUMEROVOIEIMMEUBLE)),
     UPPER(PKG_TOOLS.TRANSLATE(P_BATIMENTIMMEUBLE)),
     P_NBRELOGEMENTSINFOPREALABLES,
     P_ETATIMMEUBLE,
     P_ETATPM,
     P_DATEINSTALLATIONPM,
     P_CODERIVOLIPM,
     P_CODEINSEEPM,
     P_CODEPOSTALPM,
     UPPER(PKG_TOOLS.TRANSLATE(P_VILLEPM)),
     P_CODEADRESSEPM,
     UPPER(PKG_TOOLS.TRANSLATE(P_TYPEVOIEPM)),
     UPPER(PKG_TOOLS.TRANSLATE(P_NOMVOIEPM)),
     P_NUMEROVOIEPM,
     UPPER(PKG_TOOLS.TRANSLATE(P_COMPLEMENTVOIEPM)),
     P_DATE_IMP,
     P_FILE_ID,
     P_BATIMENTPM,
     P_CODOI,
     P_TYPZON,
     P_DATENVOSSFAI,
     P_NOMBREPMTECHNIQUES,
     P_TYPEIMMEUBLE,
     P_TYPEPROJECTIONGEOGRAPHIQUE,
     P_COORDONNEEPMX,
     P_COORDONNEEPMY,
     P_COORDONNEEIMMEUBLEX,
     P_COORDONNEEIMMEUBLEY,
     P_TYPEZONE,
     P_BLACKLIST,
     P_MAJ_OSSF,
     P_ETAIMMSIR,
     P_SRCADR,
     P_ACRDGESTNAIREIMM,
     P_HEXABTL,
     P_DATEMAJHEXABTL,
     P_TYPEINGENIERIE,
     P_DATECABLAGEADRESSE,
     P_TYPRACCOPBPTO,
     P_TYPPBO,
     P_DATEMISEENSERVICECOMEPM,
     P_DATMESCOMIMM,
     P_DATDEBACPTCMDACSS,
     P_TYPEEMPLACEMENTPM,
     SEQ_ADR_IMM_OI.NEXTVAL,
     P_CATRACLGMT_CAL,
     P_CODEHEXACLEVOIE,
     P_SCORE_DEPL_IMB,
     P_SCORE_DEPL_PM,
     P_SCORE_BLK,
     P_SCORE,
     P_BLOCAGEELIGIBILITE,
     P_ORIGINEBLOCAGE,
     P_MOTIFBLOCAGE,
     P_DATPREVDEBLOCAGE,
     P_DATDEBUTBLOCAGEELIG,
     P_RACCORDEMENTLONG,
     P_REFPRDM,
     P_SUPPORTINFRAFTTE,
     P_ETATIMMPBSPECIFIQUE) RETURNING ADR_IMM_OI_ID INTO P_ADR_IMM_OI_ID;
END;

-------------------------------------------------------------------------
-- Maj Des adresses OI
-------------------------------------------------------------------------
PROCEDURE SET_ADR_IMM_OI ( P_REFERENCEPM                    IN ADR_IMM_OI.REFERENCEPM%TYPE,
                           P_IMM_ID                         IN ADR_IMM_OI.IMM_ID%TYPE,
                           P_IDENTIFIANTIMMEUBLE            IN ADR_IMM_OI.IDENTIFIANTIMMEUBLE%TYPE,
                           P_CODERIVOLIIMMEUBLE             IN ADR_IMM_OI.CODERIVOLIIMMEUBLE%TYPE,
                           P_CODEINSEEIMMEUBLE              IN ADR_IMM_OI.CODEINSEEIMMEUBLE%TYPE,
                           P_CODEPOSTALIMMEUBLE             IN ADR_IMM_OI.CODEPOSTALIMMEUBLE%TYPE,
                           P_VILLEIMMEUBLE                  IN ADR_IMM_OI.VILLEIMMEUBLE%TYPE,
                           P_CODEADRESSEIMMEUBLE            IN ADR_IMM_OI.CODEADRESSEIMMEUBLE%TYPE,
                           P_TYPEVOIEIMMEUBLE               IN ADR_IMM_OI.TYPEVOIEIMMEUBLE%TYPE,
                           P_NOMVOIEIMMEUBLE                IN ADR_IMM_OI.NOMVOIEIMMEUBLE%TYPE,
                           P_NUMEROVOIEIMMEUBLE             IN ADR_IMM_OI.NUMEROVOIEIMMEUBLE%TYPE,
                           P_COMPLEMENTNUMEROVOIEIMMEUBLE   IN ADR_IMM_OI.COMPLEMENTNUMEROVOIEIMMEUBLE%TYPE,
                           P_BATIMENTIMMEUBLE               IN ADR_IMM_OI.BATIMENTIMMEUBLE%TYPE,
                           P_NBRELOGEMENTSINFOPREALABLES    IN ADR_IMM_OI.NOMBRELOGEMENTSINFOPREALABLES%TYPE,
                           P_ETATIMMEUBLE                   IN ADR_IMM_OI.ETATIMMEUBLE%TYPE,
                           P_ETATPM                         IN ADR_IMM_OI.ETATPM%TYPE,
                           P_DATEINSTALLATIONPM             IN ADR_IMM_OI.DATEINSTALLATIONPM%TYPE,
                           P_CODERIVOLIPM                   IN ADR_IMM_OI.CODERIVOLIPM%TYPE,
                           P_CODEINSEEPM                    IN ADR_IMM_OI.CODEINSEEPM%TYPE,
                           P_CODEPOSTALPM                   IN ADR_IMM_OI.CODEPOSTALPM%TYPE,
                           P_VILLEPM                        IN ADR_IMM_OI.VILLEPM%TYPE,
                           P_CODEADRESSEPM                  IN ADR_IMM_OI.CODEADRESSEPM%TYPE,
                           P_TYPEVOIEPM                     IN ADR_IMM_OI.TYPEVOIEPM%TYPE,
                           P_NOMVOIEPM                      IN ADR_IMM_OI.NOMVOIEPM%TYPE,
                           P_NUMEROVOIEPM                   IN ADR_IMM_OI.NUMEROVOIEPM%TYPE,
                           P_COMPLEMENTVOIEPM               IN ADR_IMM_OI.COMPLEMENTVOIEPM%TYPE,
                           P_DATE_IMP                       IN ADR_IMM_OI.DATE_IMP%TYPE,
                           P_FILE_ID                        IN ADR_IMM_OI.FILE_ID%TYPE,
                           P_BATIMENTPM                     IN ADR_IMM_OI.BATIMENTPM%TYPE,
                           P_CODOI                          IN ADR_IMM_OI.CODOI%TYPE,
                           P_TYPZON                         IN ADR_IMM_OI.TYPZON%TYPE,
                           P_DATENVOSSFAI                   IN ADR_IMM_OI.DATENVOSSFAI%TYPE,
                           P_NOMBREPMTECHNIQUES             IN ADR_IMM_OI.NOMBREPMTECHNIQUES%TYPE,
                           P_TYPEIMMEUBLE                   IN ADR_IMM_OI.TYPEIMMEUBLE%TYPE,
                           P_TYPEPROJECTIONGEOGRAPHIQUE     IN ADR_IMM_OI.TYPEPROJECTIONGEOGRAPHIQUE%TYPE,
                           P_COORDONNEEPMX                  IN ADR_IMM_OI.COORDONNEEPMX%TYPE,
                           P_COORDONNEEPMY                  IN ADR_IMM_OI.COORDONNEEPMY%TYPE,
                           P_COORDONNEEIMMEUBLEX            IN ADR_IMM_OI.COORDONNEEIMMEUBLEX%TYPE,
                           P_COORDONNEEIMMEUBLEY            IN ADR_IMM_OI.COORDONNEEIMMEUBLEY%TYPE,
                           P_TYPEZONE                       IN ADR_IMM_OI.TYPEZONE%TYPE,
                           P_BLACKLIST                      IN ADR_IMM_OI.BLACKLIST%TYPE,
                           P_MAJ_OSSF                       IN ADR_IMM_OI.MAJ_OSSF%TYPE,
                           P_ETAIMMSIR                      IN ADR_IMM_OI.ETAIMMSIR%TYPE,
                           P_SRCADR                         IN ADR_IMM_OI.SRCADR%TYPE,
                           P_ACRDGESTNAIREIMM               IN ADR_IMM_OI.ACCORDGESTIONNAIREIMMEUBLE%TYPE,
                           P_HEXABTL                        IN ADR_IMM_OI.HEXABTL%TYPE,
                           P_DATEMAJHEXABTL                 IN ADR_IMM_OI.DATEMAJHEXABTL%TYPE,
                           P_TYPEINGENIERIE                 IN ADR_IMM_OI.TYPEINGENIERIE%TYPE,
                           P_DATECABLAGEADRESSE             IN ADR_IMM_OI.DATECABLAGEADRESSE%TYPE,
                           P_TYPRACCOPBPTO                  IN ADR_IMM_OI.TYPRACCOPBPTO%TYPE,
                           P_TYPPBO                         IN ADR_IMM_OI.TYPPBO%TYPE,
                           P_DATEMISEENSERVICECOMEPM        IN ADR_IMM_OI.DATEMISEENSERVICECOMMERCIALEPM%TYPE,
                           P_DATMESCOMIMM                   IN ADR_IMM_OI.DATMESCOMIMM%TYPE,
                           P_DATDEBACPTCMDACSS              IN ADR_IMM_OI.DATDEBACPTCMDACSS%TYPE,
                           P_TYPEEMPLACEMENTPM              IN ADR_IMM_OI.TYPEEMPLACEMENTPM%TYPE,
                           P_CATRACLGMT_CAL                 IN ADR_IMM_OI.CATRACLGMT_CAL%TYPE,
                           P_CODEHEXACLEVOIE                IN ADR_IMM_OI.CODEHEXACLEVOIE%TYPE,
                           P_ADR_IMM_OI_ID                  IN ADR_IMM_OI.ADR_IMM_OI_ID%TYPE,
                           P_SCORE_DEPL_IMB                 IN ADR_IMM_OI.SCORE_DEPL_IMB%TYPE,
                           P_SCORE_DEPL_PM                  IN ADR_IMM_OI.SCORE_DEPL_PM%TYPE,
                           P_SCORE_BLK                      IN ADR_IMM_OI.SCORE_BLACKLISTAGE%TYPE,
                           P_SCORE                          IN ADR_IMM_OI.SCORE_FINAL%TYPE,
                           P_BLOCAGEELIGIBILITE             IN ADR_IMM_OI.BLOCAGEELIGIBILITE%TYPE,
                           P_ORIGINEBLOCAGE                 IN ADR_IMM_OI.ORIGINEBLOCAGE%TYPE,
                           P_MOTIFBLOCAGE                   IN ADR_IMM_OI.MOTIFBLOCAGE%TYPE,
                           P_DATPREVDEBLOCAGE               IN ADR_IMM_OI.DATPREVDEBLOCAGE%TYPE,
                           P_DATDEBUTBLOCAGEELIG            IN ADR_IMM_OI.DATDEBUTBLOCAGEELIG%TYPE,
                           P_RACCORDEMENTLONG               IN ADR_IMM_OI.RACCORDEMENTLONG%TYPE,
                           P_REFPRDM                        IN ADR_IMM_OI.REFPRDM%TYPE,
                           P_SUPPORTINFRAFTTE               IN ADR_IMM_OI.SUPPORTINFRAFTTE%TYPE,
                           P_ETATIMMPBSPECIFIQUE            IN ADR_IMM_OI.ETATIMMPBSPECIFIQUE%TYPE) IS

BEGIN
  UPDATE ADR_IMM_OI
     SET REFERENCEPM                    = P_REFERENCEPM,
         IDENTIFIANTIMMEUBLE            = P_IDENTIFIANTIMMEUBLE,
         CODERIVOLIIMMEUBLE             = P_CODERIVOLIIMMEUBLE,
         CODEINSEEIMMEUBLE              = P_CODEINSEEIMMEUBLE,
         CODEPOSTALIMMEUBLE             = P_CODEPOSTALIMMEUBLE,
         VILLEIMMEUBLE                  = UPPER(PKG_TOOLS.TRANSLATE(P_VILLEIMMEUBLE)),
         CODEADRESSEIMMEUBLE            = P_CODEADRESSEIMMEUBLE,
         TYPEVOIEIMMEUBLE               = UPPER(PKG_TOOLS.TRANSLATE(P_TYPEVOIEIMMEUBLE)),
         NOMVOIEIMMEUBLE                = UPPER(PKG_TOOLS.TRANSLATE(P_NOMVOIEIMMEUBLE)),
         NUMEROVOIEIMMEUBLE             = P_NUMEROVOIEIMMEUBLE,
         COMPLEMENTNUMEROVOIEIMMEUBLE   = UPPER(PKG_TOOLS.TRANSLATE(P_COMPLEMENTNUMEROVOIEIMMEUBLE)),
         BATIMENTIMMEUBLE               = UPPER(PKG_TOOLS.TRANSLATE(P_BATIMENTIMMEUBLE)),
         NOMBRELOGEMENTSINFOPREALABLES  = P_NBRELOGEMENTSINFOPREALABLES,
         ETATIMMEUBLE                   = P_ETATIMMEUBLE,
         ETATPM                         = P_ETATPM,
         DATEINSTALLATIONPM             = P_DATEINSTALLATIONPM,
         CODERIVOLIPM                   = P_CODERIVOLIPM,
         CODEINSEEPM                    = P_CODEINSEEPM,
         CODEPOSTALPM                   = P_CODEPOSTALPM,
         VILLEPM                        = UPPER(PKG_TOOLS.TRANSLATE(P_VILLEPM)),
         CODEADRESSEPM                  = P_CODEADRESSEPM,
         TYPEVOIEPM                     = UPPER(PKG_TOOLS.TRANSLATE(P_TYPEVOIEPM)),
         NOMVOIEPM                      = UPPER(PKG_TOOLS.TRANSLATE(P_NOMVOIEPM)),
         NUMEROVOIEPM                   = P_NUMEROVOIEPM,
         COMPLEMENTVOIEPM               = UPPER(PKG_TOOLS.TRANSLATE(P_COMPLEMENTVOIEPM)),
         DATE_IMP                       = P_DATE_IMP,
         FILE_ID                        = P_FILE_ID,
         BATIMENTPM                     = P_BATIMENTPM,
         CODOI                          = P_CODOI,
         TYPZON                         = P_TYPZON,
         DATENVOSSFAI                   = P_DATENVOSSFAI,
         NOMBREPMTECHNIQUES             = P_NOMBREPMTECHNIQUES,
         TYPEIMMEUBLE                   = P_TYPEIMMEUBLE,
         TYPEPROJECTIONGEOGRAPHIQUE     = P_TYPEPROJECTIONGEOGRAPHIQUE,
         COORDONNEEPMX                  = P_COORDONNEEPMX,
         COORDONNEEPMY                  = P_COORDONNEEPMY,
         COORDONNEEIMMEUBLEX            = P_COORDONNEEIMMEUBLEX,
         COORDONNEEIMMEUBLEY            = P_COORDONNEEIMMEUBLEY,
         TYPEZONE                       = P_TYPEZONE,
         BLACKLIST                      = P_BLACKLIST,
         MAJ_OSSF                       = P_MAJ_OSSF,
         ETAIMMSIR                      = P_ETAIMMSIR,
         SRCADR                         = P_SRCADR,
         ACCORDGESTIONNAIREIMMEUBLE     = P_ACRDGESTNAIREIMM,
         HEXABTL                        = P_HEXABTL,
         DATEMAJHEXABTL                 = P_DATEMAJHEXABTL,
         TYPEINGENIERIE                 = P_TYPEINGENIERIE,
         DATECABLAGEADRESSE             = P_DATECABLAGEADRESSE,
         TYPRACCOPBPTO                  = P_TYPRACCOPBPTO,
         TYPPBO                         = P_TYPPBO,
         DATEMISEENSERVICECOMMERCIALEPM = P_DATEMISEENSERVICECOMEPM,
         DATMESCOMIMM                   = P_DATMESCOMIMM,
         DATDEBACPTCMDACSS              = P_DATDEBACPTCMDACSS,
         TYPEEMPLACEMENTPM              = P_TYPEEMPLACEMENTPM,
         CATRACLGMT_CAL                 = P_CATRACLGMT_CAL,
         CODEHEXACLEVOIE                = P_CODEHEXACLEVOIE,
         SCORE_DEPL_IMB                 = P_SCORE_DEPL_IMB,
         SCORE_DEPL_PM                  = P_SCORE_DEPL_PM,
         SCORE_BLACKLISTAGE             = P_SCORE_BLK,
         SCORE_FINAL                    = P_SCORE,
         BLOCAGEELIGIBILITE             = P_BLOCAGEELIGIBILITE,
         ORIGINEBLOCAGE                 = P_ORIGINEBLOCAGE,
         MOTIFBLOCAGE                   = P_MOTIFBLOCAGE,
         DATPREVDEBLOCAGE               = P_DATPREVDEBLOCAGE,
         DATDEBUTBLOCAGEELIG            = P_DATDEBUTBLOCAGEELIG,
         RACCORDEMENTLONG               = P_RACCORDEMENTLONG,
         REFPRDM                        = P_REFPRDM,
         SUPPORTINFRAFTTE               = P_SUPPORTINFRAFTTE,
         ETATIMMPBSPECIFIQUE            = P_ETATIMMPBSPECIFIQUE
   WHERE ADR_IMM_OI_ID = P_ADR_IMM_OI_ID;
END;

-----------------------------------------------------------------------------------
-- Récupération CategorieRaccoLogement
-----------------------------------------------------------------------------------
  -- CategorieRaccoLogement
  FUNCTION GET_CRL_FROM_CRMAD(P_CODEINSEEIMMEUBLE   IN     IPE.CODEINSEEIMMEUBLE%TYPE,
                              P_CODERIVOLIIMMEUBLE  IN     IPE.CODERIVOLIIMMEUBLE%TYPE,
                              P_NUMEROVOIEIMMEUBLE  IN     IPE.NUMEROVOIEIMMEUBLE%TYPE,
                              P_COMPLMNTNUMVOIEIMM  IN     IPE.COMPLEMENTNUMEROVOIEIMMEUBLE%TYPE,
                              P_IDENTIFIANTIMMEUBLE IN     IPE.IDENTIFIANTIMMEUBLE%TYPE,
                              P_BATIMENTIMMEUBLE    IN     IPE.BATIMENTIMMEUBLE%TYPE,
                              P_REFERENCEPM         IN     IPE.REFERENCEPM%TYPE,
                              P_CODEADRESSEIMMEUBLE IN     IPE.CODEADRESSEIMMEUBLE%TYPE,
                              P_DATE_IMP            IN OUT IPE.DATE_IMP%TYPE
                            )
  RETURN VARCHAR2 IS
  vCRL  VARCHAR2(255);
  -- On vérifie la présence de l'immeuble pour cette OI
  CURSOR C_VERIF_PRES IS
    SELECT DISTINCT
           c.TYPEPBO ||' - '|| c.TYPRACCOPBPTO AS CATEGORIERACCOLOGEMENT,
           c.DATE_IMP                          AS DATE_IMP
      FROM CRD_MAD_PM c
     WHERE c.CODEINSEEIMMEUBLE      = P_CODEINSEEIMMEUBLE
       AND c.CODEVOIERIVOLIIMMEUBLE = P_CODERIVOLIIMMEUBLE
       AND c.REFERENCEPM            = P_REFERENCEPM
       AND ((P_NUMEROVOIEIMMEUBLE  IS NULL AND c.NUMEROVOIEIMMEUBLE           IS NULL) OR c.NUMEROVOIEIMMEUBLE            = P_NUMEROVOIEIMMEUBLE)
       AND ((P_COMPLMNTNUMVOIEIMM  IS NULL AND c.COMPLEMENTNUMEROVOIEIMMEUBLE IS NULL) OR c.COMPLEMENTNUMEROVOIEIMMEUBLE  = P_COMPLMNTNUMVOIEIMM)
       AND ((P_IDENTIFIANTIMMEUBLE IS NULL AND c.IDENTIFIANTIMMEUBLE          IS NULL) OR c.IDENTIFIANTIMMEUBLE           = P_IDENTIFIANTIMMEUBLE)
       AND ((P_BATIMENTIMMEUBLE    IS NULL AND c.BATIMENTIMMEUBLE             IS NULL) OR c.BATIMENTIMMEUBLE              = P_BATIMENTIMMEUBLE);
  R_VERIF_PRES C_VERIF_PRES%ROWTYPE;
  vFoundPres   BOOLEAN;
  -- Recherche par IMB
  CURSOR C_CAT_IMB IS
    SELECT DISTINCT
           c.TYPEPBO ||' - '|| c.TYPRACCOPBPTO AS CATEGORIERACCOLOGEMENT,
           c.DATE_IMP                          AS DATE_IMP
      FROM CRD_MAD_PM c
     WHERE c.IDENTIFIANTIMMEUBLE = P_IDENTIFIANTIMMEUBLE;
  R_CAT_IMB    C_CAT_IMB%ROWTYPE;
  vFoundCatImb BOOLEAN;
  -- Recherche par Hexaclé
  CURSOR C_CAT_HEX IS
    SELECT DISTINCT
           c.TYPEPBO ||' - '|| c.TYPRACCOPBPTO AS CATEGORIERACCOLOGEMENT,
           c.DATE_IMP                          AS DATE_IMP
      FROM CRD_MAD_PM c
     WHERE c.CODEADRESSEIMMEUBLE = P_CODEADRESSEIMMEUBLE
       AND c.REFERENCEPM         = P_REFERENCEPM;
  R_CAT_HEX    C_CAT_HEX%ROWTYPE;
  vFoundCatHex BOOLEAN;
  BEGIN
    -- On lance la recherche par l'IMB
    OPEN C_CAT_IMB;
    FETCH C_CAT_IMB INTO R_CAT_IMB;
    vFoundCatImb := C_CAT_IMB%FOUND;
    CLOSE C_CAT_IMB;

    IF vFoundCatImb THEN
      vCRL := R_CAT_IMB.CATEGORIERACCOLOGEMENT;
      P_DATE_IMP := R_CAT_IMB.DATE_IMP;
    ELSE
      -- On fait la recherche par hexaclé de l'immeuble
      OPEN C_CAT_HEX;
      FETCH C_CAT_HEX INTO R_CAT_HEX;
      vFoundCatHex := C_CAT_HEX%FOUND;
      CLOSE C_CAT_HEX;

      IF vFoundCatHex THEN
        vCRL := R_CAT_HEX.CATEGORIERACCOLOGEMENT;
        P_DATE_IMP := R_CAT_HEX.DATE_IMP;
      ELSE
        -- On fait la recherche par le triplet
        OPEN C_VERIF_PRES;
        FETCH C_VERIF_PRES INTO R_VERIF_PRES;
        vFoundPres := C_VERIF_PRES%FOUND;
        CLOSE C_VERIF_PRES;
        IF vFoundPres THEN --> Dans la cas où on trouve l'immeuble pour cette OI
          vCRL              := R_VERIF_PRES.CATEGORIERACCOLOGEMENT;
          P_DATE_IMP        := R_VERIF_PRES.DATE_IMP;
        ELSE
          vCRL              := NULL;
        END IF;
      END IF;
    END IF;
    RETURN vCRL;
  EXCEPTION
    WHEN OTHERS THEN --> Dans la cas ou on trouve plusieurs immeubles pour les mm informations par exemple
     vCRL := NULL;
      RETURN vCRL;
  END;
-----------------------------------------------------------------------------------
-- Récupération CategorieRaccoLogement
-----------------------------------------------------------------------------------
  -- CategorieRaccoLogement
  FUNCTION GET_CRL_FROM_IPE(P_CODEINSEEIMMEUBLE   IN     IPE.CODEINSEEIMMEUBLE%TYPE,
                            P_CODERIVOLIIMMEUBLE  IN     IPE.CODERIVOLIIMMEUBLE%TYPE,
                            P_NUMEROVOIEIMMEUBLE  IN     IPE.NUMEROVOIEIMMEUBLE%TYPE,
                            P_COMPLMNTNUMVOIEIMM  IN     IPE.COMPLEMENTNUMEROVOIEIMMEUBLE%TYPE,
                            P_IDENTIFIANTIMMEUBLE IN     IPE.IDENTIFIANTIMMEUBLE%TYPE,
                            P_BATIMENTIMMEUBLE    IN     IPE.BATIMENTIMMEUBLE%TYPE,
                            P_REFERENCEPM         IN     IPE.REFERENCEPM%TYPE,
                            P_CODEADRESSEIMMEUBLE IN     IPE.CODEADRESSEIMMEUBLE%TYPE,
                            P_DATE_IMP            IN OUT IPE.DATE_IMP%TYPE
                            )
  RETURN VARCHAR2 IS
  vCRL  VARCHAR2(255);
  -- On vérifie la présence de l'immeuble pour cette OI
  CURSOR C_VERIF_PRES IS
    SELECT DISTINCT
           -- OBS c.CATEGORIERACCOLOGEMENT
           c.TYPPBO ||' - '|| c.TYPRACCOPBPTO AS CATEGORIERACCOLOGEMENT,
           c.DATE_IMP                         AS DATE_IMP
      FROM IPE c
     WHERE c.CODEINSEEIMMEUBLE  = P_CODEINSEEIMMEUBLE
       AND c.CODERIVOLIIMMEUBLE = P_CODERIVOLIIMMEUBLE
       AND c.REFERENCEPM        = P_REFERENCEPM
       AND ((P_NUMEROVOIEIMMEUBLE  IS NULL AND c.NUMEROVOIEIMMEUBLE           IS NULL) OR c.NUMEROVOIEIMMEUBLE            = P_NUMEROVOIEIMMEUBLE)
       AND ((P_COMPLMNTNUMVOIEIMM  IS NULL AND c.COMPLEMENTNUMEROVOIEIMMEUBLE IS NULL) OR c.COMPLEMENTNUMEROVOIEIMMEUBLE  = P_COMPLMNTNUMVOIEIMM)
       AND ((P_IDENTIFIANTIMMEUBLE IS NULL AND c.IDENTIFIANTIMMEUBLE          IS NULL) OR c.IDENTIFIANTIMMEUBLE           = P_IDENTIFIANTIMMEUBLE)
       AND ((P_BATIMENTIMMEUBLE    IS NULL AND c.BATIMENTIMMEUBLE             IS NULL) OR c.BATIMENTIMMEUBLE              = P_BATIMENTIMMEUBLE);
  R_VERIF_PRES C_VERIF_PRES%ROWTYPE;
  vFoundPres   BOOLEAN;
  -- Recherche par IMB
  CURSOR C_CAT_IMB IS
    SELECT DISTINCT
           c.TYPPBO ||' - '|| c.TYPRACCOPBPTO AS CATEGORIERACCOLOGEMENT,
           c.DATE_IMP                         AS DATE_IMP
      FROM IPE c
     WHERE c.IDENTIFIANTIMMEUBLE = P_IDENTIFIANTIMMEUBLE;
  R_CAT_IMB    C_CAT_IMB%ROWTYPE;
  vFoundCatImb BOOLEAN;
  -- Recherche par Hexaclé
  CURSOR C_CAT_HEX IS
    SELECT DISTINCT
           c.TYPPBO ||' - '|| c.TYPRACCOPBPTO AS CATEGORIERACCOLOGEMENT,
           c.DATE_IMP                         AS DATE_IMP
      FROM IPE c
     WHERE c.CODEADRESSEIMMEUBLE = P_CODEADRESSEIMMEUBLE
       AND c.REFERENCEPM       = P_REFERENCEPM;
  R_CAT_HEX    C_CAT_HEX%ROWTYPE;
  vFoundCatHex BOOLEAN;
  BEGIN
    -- On lance la recherche par l'IMB
    OPEN C_CAT_IMB;
    FETCH C_CAT_IMB INTO R_CAT_IMB;
    vFoundCatImb := C_CAT_IMB%FOUND;
    CLOSE C_CAT_IMB;

    IF vFoundCatImb THEN
      vCRL := R_CAT_IMB.CATEGORIERACCOLOGEMENT;
      P_DATE_IMP := R_CAT_IMB.DATE_IMP;
    ELSE
      -- On fait la recherche par hexaclé de l'immeuble
      OPEN C_CAT_HEX;
      FETCH C_CAT_HEX INTO R_CAT_HEX;
      vFoundCatHex := C_CAT_HEX%FOUND;
      CLOSE C_CAT_HEX;

      IF vFoundCatHex THEN
        vCRL := R_CAT_HEX.CATEGORIERACCOLOGEMENT;
        P_DATE_IMP := R_CAT_HEX.DATE_IMP;
      ELSE
        -- On fait la recherche par le triplet
        OPEN C_VERIF_PRES;
        FETCH C_VERIF_PRES INTO R_VERIF_PRES;
        vFoundPres := C_VERIF_PRES%FOUND;
        CLOSE C_VERIF_PRES;
        IF vFoundPres THEN --> Dans la cas où on trouve l'immeuble pour cette OI
          vCRL              := R_VERIF_PRES.CATEGORIERACCOLOGEMENT;
          P_DATE_IMP         := R_VERIF_PRES.DATE_IMP;
        ELSE
          vCRL              := NULL;
        END IF;
      END IF;
    END IF;
    RETURN vCRL;
  EXCEPTION
    WHEN OTHERS THEN --> Dans la cas ou on trouve plusieurs immeubles pour les mm informations par exemple
     vCRL := NULL;
      RETURN vCRL;
  END;

  -- CategorieRaccoLogement
  FUNCTION GET_CRL(P_CODEINSEEIMMEUBLE   IN     IPE.CODEINSEEIMMEUBLE%TYPE,
                   P_CODERIVOLIIMMEUBLE  IN     IPE.CODERIVOLIIMMEUBLE%TYPE,
                   P_NUMEROVOIEIMMEUBLE  IN     IPE.NUMEROVOIEIMMEUBLE%TYPE,
                   P_COMPLMNTNUMVOIEIMM  IN     IPE.COMPLEMENTNUMEROVOIEIMMEUBLE%TYPE,
                   P_IDENTIFIANTIMMEUBLE IN     IPE.IDENTIFIANTIMMEUBLE%TYPE,
                   P_BATIMENTIMMEUBLE    IN     IPE.BATIMENTIMMEUBLE%TYPE,
                   P_REFERENCEPM         IN     IPE.REFERENCEPM%TYPE,
                   P_CODEADRESSEIMMEUBLE IN     IPE.CODEADRESSEIMMEUBLE%TYPE
                            )
  RETURN VARCHAR2 IS
  vCRLCRMAD     VARCHAR2(255);
  vDateIMPCRMAD DATE;
  vCRLIPE       VARCHAR2(255);
  vDateIMPIPE   DATE;
  vCRL          VARCHAR2(255);
  BEGIN
  -- Récupération du CR MAD
  vCRLCRMAD := NAT_FTTH_OI.GET_CRL_FROM_CRMAD(P_CODEINSEEIMMEUBLE => P_CODEINSEEIMMEUBLE,
                                            P_CODERIVOLIIMMEUBLE  => P_CODERIVOLIIMMEUBLE,
                                            P_NUMEROVOIEIMMEUBLE  => P_NUMEROVOIEIMMEUBLE,
                                            P_COMPLMNTNUMVOIEIMM  => P_COMPLMNTNUMVOIEIMM,
                                            P_IDENTIFIANTIMMEUBLE => P_IDENTIFIANTIMMEUBLE,
                                            P_BATIMENTIMMEUBLE    => P_BATIMENTIMMEUBLE,
                                            P_REFERENCEPM         => P_REFERENCEPM,
                                            P_CODEADRESSEIMMEUBLE => P_CODEADRESSEIMMEUBLE,
                                            P_DATE_IMP            => vDateIMPCRMAD);
  IF vDateIMPCRMAD IS NULL THEN
    vDateIMPCRMAD := TO_DATE('01/01/1900','DD/MM/YYYY');
  END IF;
  -- Rédcupération de l'IPE
  vCRLIPE := NAT_FTTH_OI.GET_CRL_FROM_IPE(P_CODEINSEEIMMEUBLE   => P_CODEINSEEIMMEUBLE,
                                          P_CODERIVOLIIMMEUBLE  => P_CODERIVOLIIMMEUBLE,
                                          P_NUMEROVOIEIMMEUBLE  => P_NUMEROVOIEIMMEUBLE,
                                          P_COMPLMNTNUMVOIEIMM  => P_COMPLMNTNUMVOIEIMM,
                                          P_IDENTIFIANTIMMEUBLE => P_IDENTIFIANTIMMEUBLE,
                                          P_BATIMENTIMMEUBLE    => P_BATIMENTIMMEUBLE,
                                          P_REFERENCEPM         => P_REFERENCEPM,
                                          P_CODEADRESSEIMMEUBLE => P_CODEADRESSEIMMEUBLE,
                                          P_DATE_IMP            => vDateIMPIPE);
  IF vDateIMPIPE IS NULL THEN
    vDateIMPIPE := TO_DATE('01/01/1900','DD/MM/YYYY');
  END IF;

  IF vDateIMPCRMAD >= vDateIMPIPE THEN
    vCRL := vCRLCRMAD;
  ELSIF vDateIMPIPE > vDateIMPCRMAD THEN
    vCRL := vCRLIPE;
  ELSE
    vCRL := NULL;
  END IF;
  RETURN vCRL;
  EXCEPTION
    WHEN OTHERS THEN --> Dans la cas ou on trouve plusieurs immeubles pour les mm informations par exemple
     vCRL := NULL;
      RETURN vCRL;
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN
  -- fichier de Correspondance PM-NRO
  -- %Param P_FILE_ID  Identifiant informatique du fichier
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_V22 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                                P_CODOI   IN CPN.CODOI%TYPE) IS
  V_CUR SYS_REFCURSOR;
  R_CUR CPN_FTEL_22_TMP%ROWTYPE;
  -- récupération de la table temporaire
  CURSOR C_GET_TMP IS
    SELECT flx.CPN_TMP
      FROM PART_FLX   flx,
           REF_OI_PRM rop,
           REF_OI     roi
     WHERE roi.COD_OI = P_CODOI
       AND rop.COD_OI = roi.COD_OI
       AND rop.PRTCL  = '2.2'
       AND rop.OBS    = 0
       AND flx.COD_PART_FLUX = rop.COD_PART_FLUX;
  R_GET_TMP C_GET_TMP%ROWTYPE;
  vFoundTmp BOOLEAN;

  CURSOR C_PRJ(P_IDPM IN PM.IDPM%TYPE) IS
    SELECT prj.PRJPM_ID,
           prj.AVETAPPRJPM_ID
      FROM PRJPM prj,
           PM    pm
     WHERE pm.IDPM = P_IDPM
       AND prj.GEO_ID = pm.GEO_ID;
    R_PRJ     C_PRJ%ROWTYPE;
    vFoundPRJ BOOLEAN;

  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID
      FROM FILE_IO f
     WHERE f.FILE_ID = P_FILE_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
    -- Récupératoin de la table temporaire
    OPEN C_GET_TMP;
    FETCH C_GET_TMP INTO R_GET_TMP;
    vFoundTmp := C_GET_TMP%FOUND;
    CLOSE C_GET_TMP;

    IF vFoundTmp THEN
      -- On commence par vider la table de référence
      DELETE FROM CPN c WHERE c.CODOI = P_CODOI;
      V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(R_GET_TMP.CPN_TMP);
      -- Aliementation de la table de référence
      LOOP
        FETCH V_CUR INTO R_CUR;
        EXIT WHEN V_CUR%NOTFOUND;
        BEGIN

          BEGIN
          NAT_FF1_TRT_FLX.INS_CPN(R_CUR.REFERENCEPM,
                                        R_CUR.TYPEPM,
                                        TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYYMMDD'),
                                        R_CUR.ETATPM,
                                        R_CUR.REFERENCENRO,
                                        R_CUR.TYPENRO,
                                        TO_DATE(R_CUR.DATEINSTALLATIONNRO,'YYYYMMDD'),
                                        R_CUR.ETATNRO,
                                        R_CUR.ETATLIENNROPM,
                                        TO_DATE(R_CUR.DATEINSTALLATIONNROPM,'YYYYMMDD'),
                                        R_CUR.CODERIVOLINRO,
                                        R_CUR.CODEINSEENRO,
                                        R_CUR.CODEPOSTALNRO,
                                        R_CUR.VILLENRO,
                                        R_CUR.CODEADRESSENRO,
                                        R_CUR.TYPEVOIENRO,
                                        R_CUR.NOMVOIENRO,
                                        TO_NUMBER(R_CUR.NUMEROVOIENRO),
                                        R_CUR.COMPLEMENTVOIENRO,
                                        TO_DATE(R_CUR.DATEDERNIEREMODIFICATION,'YYYYMMDD'),
                                        R_CUR.COMMENTAIRE,
                                        TO_NUMBER(REPLACE(R_CUR.LONGUEULIENNROPM,',','.')),
                                        P_CODOI,
                                        R_CUR.DATE_IMP,
                                        R_CUR.FILE_ID);
          EXCEPTION
            WHEN OTHERS THEN
              plog.ERROR('Erreur lors de l''insertion du fichier CPN','SQLERRM', SQLERRM,'REFERENCEPM',R_CUR.REFERENCEPM,'LONGUEULIENNROPM',R_CUR.LONGUEULIENNROPM );
          END;
          IF P_CODOI = 'FTEL' THEN
            OPEN C_PRJ(R_CUR.REFERENCEPM);
            FETCH C_PRJ INTO R_PRJ;
            vFoundPRJ := C_PRJ%FOUND;
            CLOSE C_PRJ;
            IF vFoundPRJ THEN
              -- Ajout dans la table de process
              NAT_FF1_ZA.NEW_PRCS_OI_OC_CPN(R_CUR.REFERENCEPM,
                                            R_PRJ.PRJPM_ID,
                                            R_PRJ.AVETAPPRJPM_ID);
            END IF;
            -- Fermeture alerte si le PM est de nouveau présent dans le CPN
            NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS_CLS(R_CUR.REFERENCEPM, 'AMI');
          ELSE
            OPEN C_PRJ(R_CUR.REFERENCEPM);
            FETCH C_PRJ INTO R_PRJ;
            vFoundPRJ := C_PRJ%FOUND;
            CLOSE C_PRJ;
            IF vFoundPRJ THEN
              -- Ajout dans la table de process
              NAT_FF1_RIP.NEW_PRCS_OI_OC_CPN(R_CUR.REFERENCEPM,
                                            R_PRJ.PRJPM_ID,
                                            R_PRJ.AVETAPPRJPM_ID);
            END IF;
            -- Fermeture alerte si le PM est de nouveau présent dans le CPN
            NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS_CLS(R_CUR.REFERENCEPM,'RIP');
          END IF;
        EXCEPTION
          WHEN OTHERS THEN
            plog.ERROR('Erreur lors de l''insertion du fichier CPN','SQLERRM', SQLERRM,'REFERENCEPM',R_CUR.REFERENCEPM );
        END;
      END LOOP;
    END IF;

      -- Alertes commandes
      NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_ABS_LONG(P_CODOI);
      NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_ABS_NBLGTS(P_CODOI);
      NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_LONG(P_CODOI);

      IF P_CODOI = 'FTEL' THEN
        -- Alertes projet
        NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('AMI');
      ELSE
        -- Alertes projet
        NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('RIP');
      END IF;

      OPEN C_INFO_IFC;
      FETCH C_INFO_IFC INTO R_INFO_IFC;
      CLOSE C_INFO_IFC;

      NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                           P_TYP_IFC  => 'IN',
                           P_DATTRT   => SYSDATE,
                           P_IDPM     => NULL,
                           P_CODOI    => P_CODOI,
                           P_COD_PART => NULL,
                           P_IFC_ID   => R_INFO_IFC.IFC_ID,
                           P_PRM_ID   => R_INFO_IFC.PRM_ID);
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN
  -- fichier de Correspondance PM-NRO
  -- %Param P_FILE_ID  Identifiant informatique du fichier
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                                P_CODOI   IN CPN.CODOI%TYPE,
                                P_TYP     IN VARCHAR2) IS
  V_CUR SYS_REFCURSOR;
  R_CUR CPN_FTEL_30_TMP%ROWTYPE;
  R_CUR_SFOR CPN_SFOR_30_TMP%ROWTYPE;
  -- récupération de la table temporaire
  CURSOR C_GET_TMP IS
    SELECT (CASE P_TYP
             WHEN 'ZSP' THEN
               flx.CPN_ZSP_TMP
             WHEN 'ZMS' THEN
               'CPN_SFOR_30_TMP'
             ELSE
               flx.CPN_TMP
           END ) AS CPN_TMP,
           flx.PART_FLUX,
           flx.COD_PART_FLUX,
           DECODE(flx.COD_PART_FLUX, 'ZTD', 'OF_',
                                     'ZMD', 'AMI',
                                     'ZSP', 'AMI',
                                     'ZMS', 'AMI',
                                     'AXIO', 'RIP',
                                     'ALTI', 'ALT',
                                     'COVA', 'COV',
                                     'TDF', 'TDF',
                                     NAT_FTTH_OI.P_OC_SIEA, NAT_FTTH_OI.P_CODOC_SIEA,
                                     'SFRA', DECODE(roi.RIP, 1, 'RSF',
                                                             DECODE(roi.COD_OI, 'SFMD', 'ZSF',
                                                                                DECODE(roi.COD_OI, 'SFOR', 'ZSF',
                                                                                                   'ZAS'))),
                                     flx.COD_PART_FLUX) AS PART_ADD_PRJ
      FROM PART_FLX   flx,
           REF_OI_PRM rop,
           REF_OI     roi
     WHERE roi.COD_OI = P_CODOI
       AND rop.COD_OI = roi.COD_OI
      -- AND rop.PRTCL  = '3.0'
       AND rop.OBS    = 0
       AND flx.COD_PART_FLUX = rop.COD_PART_FLUX;
  R_GET_TMP C_GET_TMP%ROWTYPE;
  vFoundTmp BOOLEAN;

  CURSOR C_PRJ(P_IDPM IN PM.IDPM%TYPE, vParAdd IN PRJPM.PART_ADD%TYPE) IS
    SELECT prj.PRJPM_ID,
           prj.AVETAPPRJPM_ID
      FROM PRJPM prj,
           PM    pm
     WHERE pm.IDPM = P_IDPM
       AND prj.GEO_ID = pm.GEO_ID
       AND prj.PART_ADD = vParAdd;

  CURSOR C_SFRPRJ(P_IDPM IN PM.IDPM%TYPE) IS
    SELECT prj.PRJPM_ID,
           prj.AVETAPPRJPM_ID
      FROM PRJPM prj,
           PM    pm
     WHERE pm.IDPM = P_IDPM
       AND prj.GEO_ID = pm.GEO_ID
       AND prj.PART_ADD IN ('ZAS', 'ZSF');

    R_PRJ     C_PRJ%ROWTYPE;
    vFoundPRJ BOOLEAN;

  CURSOR C_PRJ_SFOR(P_IDPM IN PM.IDPM%TYPE) IS
    SELECT prj.PRJPM_ID,
           prj.AVETAPPRJPM_ID
      FROM PRJPM prj,
           PM    pm
     WHERE pm.IDPM = P_IDPM
       AND prj.GEO_ID = pm.GEO_ID
       AND prj.PART_ADD = 'AMI';

  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID,
           f.NOM_FIC
      FROM FILE_IO f
     WHERE f.FILE_ID = P_FILE_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
  -- Le code de l'lOI
  vCodOI REF_OI.COD_OI%TYPE;
  BEGIN
    -- Récupération de la table temporaire
    OPEN C_GET_TMP;
    FETCH C_GET_TMP INTO R_GET_TMP;
    vFoundTmp := C_GET_TMP%FOUND;
    CLOSE C_GET_TMP;

    IF vFoundTmp THEN
      -- On commence par vider la table de référence
      IF P_TYP = 'ZSP' THEN
        DELETE FROM CPN c
         WHERE c.CODOI    = NAT_FTTH_OI.P_CODOI_SIMPSON
           AND c.FROM_ZSP = 1;
      ELSIF P_TYP = 'ZMS' THEN --> Suppression pour les PM Cédes SFOR
        DELETE FROM CPN c
         WHERE c.CODOI    = P_CODOI
           AND c.ZMD_ZSP IS NOT NULL;
      ELSE --> Pour les autres cas
        DELETE FROM CPN c
         WHERE c.CODOI    = P_CODOI
           AND (c.FROM_ZSP IS NULL OR c.fROM_ZSP = 0)
           AND c.ZMD_ZSP IS NULL;
      END IF;
      V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(R_GET_TMP.CPN_TMP);
      IF P_CODOI = 'SFOR' AND P_TYP = 'ZMS' THEN
        -- Alimentation de la table de référence
        LOOP
          FETCH V_CUR INTO R_CUR_SFOR;
          EXIT WHEN V_CUR%NOTFOUND;
          BEGIN

            BEGIN
              NAT_FF1_TRT_FLX.INS_CPN_NEW(P_CODEOI_CPN          => R_CUR_SFOR.CODEOI_CPN,
                                            P_REFERENCEPM       => R_CUR_SFOR.REFERENCEPM,
                                            P_REFPRDM           => R_CUR_SFOR.REFPRDM,
                                            P_REFLIENPMPRDM     => R_CUR_SFOR.REFLIENPMPRDM,
                                            P_REFCONSUL         => R_CUR_SFOR.REFCONSUL,
                                            P_DATMADPRDM        => TO_DATE(R_CUR_SFOR.DATMADPRDM,'YYYYMMDD'),
                                            P_DATMADLIEPMPRDM   => TO_DATE(R_CUR_SFOR.DATMADLIEPMPRDM,'YYYYMMDD'),
                                            P_ETAPRDM           => R_CUR_SFOR.ETAPRDM,
                                            P_ETALIEPMPRDM      => R_CUR_SFOR.ETALIEPMPRDM,
                                            P_ETATPM            => R_CUR_SFOR.ETATPM,
                                            P_TYPSITPRDM        => R_CUR_SFOR.TYPSITPRDM,
                                            P_CODINSEEPRDM      => R_CUR_SFOR.CODINSEEPRDM,
                                            P_CODPOSPRDM        => R_CUR_SFOR.CODPOSPRDM,
                                            P_CMNPRDM           => R_CUR_SFOR.CMNPRDM,
                                            P_TYPVOIPRDM        => R_CUR_SFOR.TYPVOIPRDM,
                                            P_NOMVOIPRDM        => R_CUR_SFOR.NOMVOIPRDM,
                                            P_NUMVOIPRDM        => TO_NUMBER(R_CUR_SFOR.NUMVOIPRDM),
                                            P_CPLMVOIPRDPM      => R_CUR_SFOR.CPLMVOIPRDPM,
                                            P_TYPPJCGEO         => R_CUR_SFOR.TYPPJCGEO,
                                            P_COORDPRDMX        => TO_NUMBER(REPLACE(R_CUR_SFOR.COORDPRDMX,',','.')),
                                            P_COORDPRDMY        => TO_NUMBER(REPLACE(R_CUR_SFOR.COORDPRDMY,',','.')),
                                            P_NBLOGMINPMZAPRDM  => TO_NUMBER(R_CUR_SFOR.NBLOGMINPMZAPRDM),
                                            P_NBFIBOUVLIE       => TO_NUMBER(R_CUR_SFOR.NBFIBOUVLIE),
                                            P_LGRLIEPMPRDM      => TO_NUMBER(REPLACE(R_CUR_SFOR.LGRLIEPMPRDM,',','.')),
                                            P_INFORACCPRDM      => R_CUR_SFOR.INFORACCPRDM,
                                            P_CHMPRSV           => R_CUR_SFOR.CHMPRSV,
                                            P_DATDERMODIF       => TO_DATE(R_CUR_SFOR.DATDERMODIF,'YYYYMMDDHH24MI'),
                                            P_COMMENTAIRE       => R_CUR_SFOR.COMMENTAIRE,
                                            P_DATE_IMP          => R_CUR_SFOR.DATE_IMP,
                                            P_FILE_ID           => R_CUR_SFOR.FILE_ID,
                                            P_ZMD_ZSP           => R_CUR_SFOR.ZMD_ZSP);
                UPDATE CPN c
                   SET c.CODOI = P_CODOI
                 WHERE c.FILE_ID = P_FILE_ID
                   AND c.REFERENCEPM = R_CUR_SFOR.REFERENCEPM;
            EXCEPTION
              WHEN OTHERS THEN
                plog.ERROR('Erreur lors de l''insertion du fichier CPN 3.0','SQLERRM', SQLERRM,'REFERENCEPM',R_CUR_SFOR.REFERENCEPM,'LGRLIEPMPRDM',R_CUR_SFOR.LGRLIEPMPRDM );
            END;
            -- s'il existe un projet SFOR en AMI
            OPEN C_PRJ_SFOR(R_CUR_SFOR.REFERENCEPM);
            FETCH C_PRJ_SFOR INTO R_PRJ;
            vFoundPRJ := C_PRJ_SFOR%FOUND;
            CLOSE C_PRJ_SFOR;
            IF vFoundPRJ THEN
              -- Ajout dans la table de process
              NAT_FF1_ZA.NEW_PRCS_OI_OC_CPN(R_CUR_SFOR.REFERENCEPM,
                                            R_PRJ.PRJPM_ID,
                                            R_PRJ.AVETAPPRJPM_ID);
            /**ELSE
              -- le projet n'existe pas, donc on ajoute le PM à la liste des PM SFOR gérés en AMII OF
              INSERT INTO LST_PM_OF_TO_SFOR (IDPM,
                                           TO_MIG,
                                           DATMIG)
                                   VALUES (R_CUR_SFOR.REFERENCEPM,
                                           0,
                                           NULL);**/
            END IF;
            -- Fermeture alerte si le PM est de nouveau présent dans le CPN
            NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS_CLS(R_CUR_SFOR.REFERENCEPM, 'AMI');
          EXCEPTION
            WHEN OTHERS THEN
              plog.ERROR('Erreur lors de l''insertion du fichier CPN','SQLERRM', SQLERRM,'REFERENCEPM',R_CUR_SFOR.REFERENCEPM );
          END;
        END LOOP;
      ELSE
        -- Alimentation de la table de référence
        LOOP
          FETCH V_CUR INTO R_CUR;
          EXIT WHEN V_CUR%NOTFOUND;

          BEGIN
            vCodOI := P_CODOI;
            BEGIN
              NAT_FF1_TRT_FLX.INS_CPN_NEW(P_CODEOI_CPN          => R_CUR.CODEOI_CPN,
                                            P_REFERENCEPM       => R_CUR.REFERENCEPM,
                                            P_REFPRDM           => R_CUR.REFPRDM,
                                            P_REFLIENPMPRDM     => R_CUR.REFLIENPMPRDM,
                                            P_REFCONSUL         => R_CUR.REFCONSUL,
                                            P_DATMADPRDM        => TO_DATE(R_CUR.DATMADPRDM,'YYYYMMDD'),
                                            P_DATMADLIEPMPRDM   => TO_DATE(R_CUR.DATMADLIEPMPRDM,'YYYYMMDD'),
                                            P_ETAPRDM           => R_CUR.ETAPRDM,
                                            P_ETALIEPMPRDM      => R_CUR.ETALIEPMPRDM,
                                            P_ETATPM            => R_CUR.ETATPM,
                                            P_TYPSITPRDM        => R_CUR.TYPSITPRDM,
                                            P_CODINSEEPRDM      => R_CUR.CODINSEEPRDM,
                                            P_CODPOSPRDM        => R_CUR.CODPOSPRDM,
                                            P_CMNPRDM           => R_CUR.CMNPRDM,
                                            P_TYPVOIPRDM        => R_CUR.TYPVOIPRDM,
                                            P_NOMVOIPRDM        => R_CUR.NOMVOIPRDM,
                                            P_NUMVOIPRDM        => TO_NUMBER(R_CUR.NUMVOIPRDM),
                                            P_CPLMVOIPRDPM      => R_CUR.CPLMVOIPRDPM,
                                            P_TYPPJCGEO         => R_CUR.TYPPJCGEO,
                                            P_COORDPRDMX        => TO_NUMBER(REPLACE(R_CUR.COORDPRDMX,',','.')),
                                            P_COORDPRDMY        => TO_NUMBER(REPLACE(R_CUR.COORDPRDMY,',','.')),
                                            P_NBLOGMINPMZAPRDM  => TO_NUMBER(R_CUR.NBLOGMINPMZAPRDM),
                                            P_NBFIBOUVLIE       => TO_NUMBER(R_CUR.NBFIBOUVLIE),
                                            P_LGRLIEPMPRDM      => TO_NUMBER(REPLACE(R_CUR.LGRLIEPMPRDM,',','.')),
                                            P_INFORACCPRDM      => R_CUR.INFORACCPRDM,
                                            P_CHMPRSV           => R_CUR.CHMPRSV,
                                            P_DATDERMODIF       => TO_DATE(R_CUR.DATDERMODIF,'YYYYMMDDHH24MI'),
                                            P_COMMENTAIRE       => R_CUR.COMMENTAIRE,
                                            P_DATE_IMP          => R_CUR.DATE_IMP,
                                            P_FILE_ID           => R_CUR.FILE_ID,
                                            P_ZMD_ZSP           => NULL);
                UPDATE CPN c
                   SET c.CODOI       = vCodOI
                 WHERE c.FILE_ID     = P_FILE_ID
                   AND c.REFERENCEPM = R_CUR.REFERENCEPM;
            EXCEPTION
              WHEN OTHERS THEN
                plog.ERROR('Erreur lors de l''insertion du fichier CPN 3.0','SQLERRM', SQLERRM,'REFERENCEPM',R_CUR.REFERENCEPM,'LGRLIEPMPRDM',R_CUR.LGRLIEPMPRDM );
            END;
            IF vCodOI = NAT_FTTH_OI.P_CODOI_SIMPSON THEN
              OPEN C_PRJ(R_CUR.REFERENCEPM, R_GET_TMP.PART_ADD_PRJ);
              FETCH C_PRJ INTO R_PRJ;
              vFoundPRJ := C_PRJ%FOUND;
              CLOSE C_PRJ;
              IF vFoundPRJ THEN
                -- Ajout dans la table de process
                NAT_FF1_ZA.NEW_PRCS_OI_OC_CPN(R_CUR.REFERENCEPM,
                                              R_PRJ.PRJPM_ID,
                                              R_PRJ.AVETAPPRJPM_ID);
              END IF;
              --IF vCodOI = NAT_FTTH_OI.P_CODOI_SIMPSON THEN
              NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS_CLS(R_CUR.REFERENCEPM, R_GET_TMP.PART_ADD_PRJ);
              --ELSE
                -- Fermeture alerte si le PM est de nouveau présent dans le CPN
                --NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS_CLS(R_CUR.REFERENCEPM, 'AMI');
              --END IF;
            ELSIF vCodOI IN ('SFOR', 'SFMD') THEN
               OPEN C_SFRPRJ(R_CUR.REFERENCEPM);
               FETCH C_SFRPRJ INTO R_PRJ;
               vFoundPRJ := C_SFRPRJ%FOUND;
               CLOSE C_SFRPRJ;

               IF vFoundPRJ THEN
                  -- Ajout dans la table de process
                  NAT_FF1_ZA.NEW_PRCS_OI_OC_CPN(R_CUR.REFERENCEPM,
                                              R_PRJ.PRJPM_ID,
                                              R_PRJ.AVETAPPRJPM_ID);
              END IF;
              -- Fermeture alerte si le PM est de nouveau présent dans le CPN
              NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS_CLS(R_CUR.REFERENCEPM, R_GET_TMP.PART_ADD_PRJ);
            ELSE
              OPEN C_PRJ(R_CUR.REFERENCEPM, R_GET_TMP.PART_ADD_PRJ);
              FETCH C_PRJ INTO R_PRJ;
              vFoundPRJ := C_PRJ%FOUND;
              CLOSE C_PRJ;
              IF vFoundPRJ THEN
                -- Ajout dans la table de process
                NAT_FF1_RIP.NEW_PRCS_OI_OC_CPN(R_CUR.REFERENCEPM,
                                              R_PRJ.PRJPM_ID,
                                              R_PRJ.AVETAPPRJPM_ID);
              END IF;
              -- Fermeture alerte si le PM est de nouveau présent dans le CPN
              NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS_CLS(R_CUR.REFERENCEPM, R_GET_TMP.PART_ADD_PRJ);

            END IF;
          EXCEPTION
            WHEN OTHERS THEN
              plog.ERROR('Erreur lors de l''insertion du fichier CPN','SQLERRM', SQLERRM,'REFERENCEPM',R_CUR.REFERENCEPM );
          END;
        END LOOP;
      END IF;
      IF P_TYP = 'ZSP' THEN
        UPDATE CPN c
           SET c.FROM_ZSP = 1
         WHERE c.FILE_ID  = P_FILE_ID;
      ELSE
        UPDATE CPN c
           SET c.FROM_ZSP = 0
         WHERE c.FILE_ID  = P_FILE_ID;
      END IF;
    END IF;
    -- Alertes commandes
    BEGIN
      NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_ABS_LONG(P_CODOI);
      NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_ABS_NBLGTS(P_CODOI);
      NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_LONG(P_CODOI);
    EXCEPTION
      when others then
      plog.ERROR('Erreur dans les controles','SQLERRM', SQLERRM,'FILE_ID',P_FILE_ID);
    END;

      CASE R_GET_TMP.COD_PART_FLUX
        WHEN NAT_FTTH_OI.P_CODOI_SIMPSON THEN
          NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS(NAT_FTTH_OI.P_CODOC_SIMPSON);
          -- Controle changement NRO ZMD AMI
          NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO(NAT_FTTH_OI.P_CODOC_SIMPSON);
        WHEN 'SFRA' THEN
          IF P_CODOI = 'SFOR' AND P_TYP = 'ZMS' THEN
          --CPN SFOR provenant du flux Orange
            NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('AMI');
            NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO('AMI');
          ELSIF R_GET_TMP.PART_ADD_PRJ = 'RSF' THEN
            NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('RSF');
            NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO('RSF');
          ELSIF  R_GET_TMP.PART_ADD_PRJ = 'ZSF'  THEN
            NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('ZSF');
            NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO('ZSF');
          END IF;
        WHEN 'AXIO' THEN
          NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('RIP');
          NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO('RIP');
        WHEN 'ALTI' THEN
          NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('ALT');
          NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO('ALT');
        WHEN 'COVA' THEN
          NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('COV');
          NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO('COV');
        WHEN 'TDF' THEN
          NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('TDF');
          NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO('TDF');
        WHEN 'FTEL' THEN
          IF P_CODOI <> 'FTEL' THEN
            NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('OFC');
            NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO('OFC');
          ELSE
            NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('AMI');
            NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO('AMI');
          END IF;
        WHEN NAT_FTTH_OI.P_OC_SIEA THEN
          NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS(NAT_FTTH_OI.P_CODOC_SIEA);
          NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO(NAT_FTTH_OI.P_CODOC_SIEA);
        ELSE
          NULL;
      END CASE;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => NULL,
                         P_CODOI    => P_CODOI,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
    IF R_GET_TMP.COD_PART_FLUX = 'TDF' THEN
      -- On lance le tranfert SIO2
      --GEN_REBOND( 'FTTH_SIO2_CPN_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID);
      GEN_REBOND( 'FTTH_SIO2_TDF_CPN_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID);
    ELSIF R_GET_TMP.COD_PART_FLUX = 'FTEL' THEN
      GEN_REBOND( 'FTTH_SIO2_OF_CPN_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID);
    ELSIF R_GET_TMP.COD_PART_FLUX = 'AXIO' THEN
      GEN_REBOND( 'FTTH_SIO2_AXNE_CPN_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID);
    ELSIF R_GET_TMP.COD_PART_FLUX = 'COVA' THEN
      GEN_REBOND( 'FTTH_SIO2_COVA_CPN_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID);
    ELSIF R_GET_TMP.COD_PART_FLUX = 'ALTI' THEN
      GEN_REBOND( 'FTTH_SIO2_ALTI_CPN_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID);
    ELSIF R_GET_TMP.COD_PART_FLUX = NAT_FTTH_OI.P_CODOI_SIMPSON THEN
      GEN_REBOND( 'FTTH_SIO2_SMP_CPN_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID);
    ELSIF R_GET_TMP.COD_PART_FLUX = 'SIEA' THEN
      GEN_REBOND( 'FTTH_SIO2_SIEA_CPN_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID);
    ELSIF R_GET_TMP.COD_PART_FLUX = 'SFRA' THEN
      GEN_REBOND( 'FTTH_SIO2_SFR_CPN_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID);
    END IF;
  END;


  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN COVAGE 3.0
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_COVA_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    update CPN_COVA_30_TMP c
       set c.COMMENTAIRE=substr(COMMENTAIRE,1,instr(COMMENTAIRE, chr(13))-1)
     where instr(COMMENTAIRE, chr(13))>0;

    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CPN_IN_V30(P_FILE_ID,vCodOi,'ZMD');
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN FTEL
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_FTEL_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
    vTypzon VARCHAR2(3);
  BEGIN
    -- Correction sur le dernier champs
    UPDATE CPN_FTEL_30_TMP Z
       SET Z.COMMENTAIRE =SUBSTR(Z.COMMENTAIRE,1,INSTR(Z.COMMENTAIRE, CHR(13))-1)
     WHERE INSTR(Z.COMMENTAIRE, CHR(13))>0 ;

    vCod_Oi := GET_OI(P_FILE_ID);
    vTypzon := 'ZMD';

    DELETE FROM CPN_FTEL_30_TMP i
     WHERE EXISTS (SELECT 1
                     FROM LST_PM_OF_TO_SFOR l
                    WHERE l.IDPM = i.REFERENCEPM
                      AND l.DATMIG is not null);

    POS_TRT_CPN_IN_V30(P_FILE_ID,vCod_Oi,vTypzon);
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN FTEL (cas particulier SFOR)
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_SFOR (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vTypzon VARCHAR2(3);
  BEGIN
    -- Correction sur le dernier champs
    UPDATE CPN_SFOR_30_TMP Z
       SET Z.ZMD_ZSP     =SUBSTR(Z.ZMD_ZSP,1,INSTR(Z.ZMD_ZSP, CHR(13))-1)
     WHERE INSTR(Z.ZMD_ZSP, CHR(13))>0 ;

    vTypzon := 'ZMS';

    POS_TRT_CPN_IN_V30(P_FILE_ID,'SFOR',vTypzon);
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN FTEL
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_ZSP_IN_FTEL_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    -- Correction sur le dernier champs
    UPDATE CPN_FTEL_ZSP_30_TMP Z
       SET Z.COMMENTAIRE =SUBSTR(Z.COMMENTAIRE,1,INSTR(Z.COMMENTAIRE, CHR(13))-1)
     WHERE INSTR(Z.COMMENTAIRE, CHR(13))>0 ;

    DELETE FROM CPN_FTEL_ZSP_30_TMP i
     WHERE EXISTS (SELECT 1
                     FROM LST_PM_OF_TO_SFOR l
                    WHERE l.IDPM = i.REFERENCEPM
                      AND l.DATMIG is not null);

    POS_TRT_CPN_IN_V30(P_FILE_ID,'FTEL','ZSP');
  END;
  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN SEQU (Axione)
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_AXIO_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    update CPN_AXIO_30_TMP c
       set c.COMMENTAIRE=substr(COMMENTAIRE,1,instr(COMMENTAIRE, chr(13))-1)
     where instr(COMMENTAIRE, chr(13))>0 ;

    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CPN_IN_V30(P_FILE_ID,vCodOi,'ZMD');
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN ALTI
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_ALTI_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    update CPN_ALTI_30_TMP c
       set c.COMMENTAIRE=substr(COMMENTAIRE,1,instr(COMMENTAIRE, chr(13))-1)
     where instr(COMMENTAIRE, chr(13))>0 ;

    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CPN_IN_V30(P_FILE_ID,vCodOi,'ZMD');
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN TDF
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_TDF_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    update CPN_TDF_30_TMP c
       set c.COMMENTAIRE=substr(COMMENTAIRE,1,instr(COMMENTAIRE, chr(13))-1)
     where instr(COMMENTAIRE, chr(13))>0 ;

    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CPN_IN_V30(P_FILE_ID,vCodOi,'ZMD');
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN FTEL
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_ZMD_IN_SMP_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
    vTypzon VARCHAR2(3);
  BEGIN
    -- Correction sur le dernier champs
    UPDATE CPN_SMP_30_TMP Z
       SET Z.COMMENTAIRE =SUBSTR(Z.COMMENTAIRE,1,INSTR(Z.COMMENTAIRE, CHR(13))-1)
     WHERE INSTR(Z.COMMENTAIRE, CHR(13))>0 ;

    vCod_Oi := GET_OI(P_FILE_ID);
    vTypzon := 'ZMD';

    DELETE FROM CPN_SMP_30_TMP i
     WHERE EXISTS (SELECT 1
                     FROM LST_PM_OF_TO_SFOR l
                    WHERE l.IDPM = i.REFERENCEPM
                      AND l.DATMIG is not null);

    POS_TRT_CPN_IN_V30(P_FILE_ID,vCod_Oi,vTypzon);
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN FTEL
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_ZSP_IN_SMP_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  BEGIN
    -- Correction sur le dernier champs
    UPDATE CPN_SMP_ZSP_30_TMP Z
       SET Z.COMMENTAIRE =SUBSTR(Z.COMMENTAIRE,1,INSTR(Z.COMMENTAIRE, CHR(13))-1)
     WHERE INSTR(Z.COMMENTAIRE, CHR(13))>0 ;

    vCod_Oi := GET_OI(P_FILE_ID);

    DELETE FROM CPN_SMP_ZSP_30_TMP i
     WHERE EXISTS (SELECT 1
                     FROM LST_PM_OF_TO_SFOR l
                    WHERE l.IDPM = i.REFERENCEPM
                      AND l.DATMIG is not null);

    POS_TRT_CPN_IN_V30(P_FILE_ID,vCod_Oi,'ZSP');
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN SIEA
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_SIEA_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    update CPN_SIEA_30_TMP c
       set c.COMMENTAIRE=substr(COMMENTAIRE,1,instr(COMMENTAIRE, chr(13))-1)
     where instr(COMMENTAIRE, chr(13))>0 ;

    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CPN_IN_V30(P_FILE_ID,vCodOi,'ZMD');
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN SFR  protocole V 3.0
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_SFRA_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCodOi REF_OI.COD_OI%TYPE;
    CURSOR C_INFO_IFC IS
      SELECT f.IFC_ID,
             f.PRM_ID,
             f.NOM_FIC
        FROM FILE_IO f
       WHERE f.FILE_ID = P_FILE_ID;
    R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
    update CPN_SFRA_V30_TMP c
       set c.COMMENTAIRE=substr(COMMENTAIRE,1,instr(COMMENTAIRE, chr(13))-1)
     where instr(COMMENTAIRE, chr(13))>0 ;

    vCodOi := GET_OI(P_FILE_ID);
   /** IF vCodOi = 'SFOR' THEN
      -- MEP Juillet --> On ne traite pas le CPN SFOR venant de SFR
      OPEN C_INFO_IFC;
      FETCH C_INFO_IFC INTO R_INFO_IFC;
      CLOSE C_INFO_IFC;
      NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                           P_TYP_IFC  => 'IN',
                           P_DATTRT   => SYSDATE,
                           P_IDPM     => NULL,
                           P_CODOI    => 'SFOR',
                           P_COD_PART => NULL,
                           P_IFC_ID   => R_INFO_IFC.IFC_ID,
                           P_PRM_ID   => R_INFO_IFC.PRM_ID);
    ELSE
      POS_TRT_CPN_IN_V30(P_FILE_ID,vCodOi,'ZMD');
    END IF; **/

    POS_TRT_CPN_IN_V30(P_FILE_ID,vCodOi,'ZMD');

  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN SFR  protocole V 3.1
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_SFRA_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCodOi REF_OI.COD_OI%TYPE;
    CURSOR C_INFO_IFC IS
      SELECT f.IFC_ID,
             f.PRM_ID,
             f.NOM_FIC
        FROM FILE_IO f
       WHERE f.FILE_ID = P_FILE_ID;
    R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
    update CPN_SFRA_V31_TMP c
       set c.COMMENTAIRE=substr(COMMENTAIRE,1,instr(COMMENTAIRE, chr(13))-1)
     where instr(COMMENTAIRE, chr(13))>0 ;

    vCodOi := GET_OI(P_FILE_ID);
    /** IF vCodOi = 'SFOR' THEN
      -- MEP Juillet --> On ne traite pas le CPN SFOR venant de SFR
      OPEN C_INFO_IFC;
      FETCH C_INFO_IFC INTO R_INFO_IFC;
      CLOSE C_INFO_IFC;
      NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                           P_TYP_IFC  => 'IN',
                           P_DATTRT   => SYSDATE,
                           P_IDPM     => NULL,
                           P_CODOI    => 'SFOR',
                           P_COD_PART => NULL,
                           P_IFC_ID   => R_INFO_IFC.IFC_ID,
                           P_PRM_ID   => R_INFO_IFC.PRM_ID);
    ELSE
      POS_TRT_CPN_IN_V31(P_FILE_ID,vCodOi,'ZMD');
    END IF; **/

    POS_TRT_CPN_IN_V31(P_FILE_ID,vCodOi,'ZMD');

  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier AR MAD NRO PM NUME
  -- fichier de CR de commande de lien
  -- %Param P_FILE_ID  Identifiant informatique du fichier
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_ARCMD_PM_IN_NUME (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  CURSOR C_AR_CMD_PM IS
    SELECT REFERENCEPM,
           REFERENCECOMMANDEPMINTERNEOC,
           TO_DATE(DATEARCOMMANDEPM,'YYYY/MM/DD') AS DATEARCOMMANDEPM,
           REFERENCEPRESTATIONPM,
           ETATARCOMMANDEPM,
           MOTIFARCOMMANDEPM,
           DATE_IMP,
           FILE_ID
      FROM AR_CMD_PM_NUME_22_TMP
     WHERE FILE_ID = P_FILE_ID;

    R_AR_CMD_PM C_AR_CMD_PM%ROWTYPE;

    vIdPmTrt       VARCHAR2(255);

  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID
      FROM FILE_IO f
     WHERE f.FILE_ID = P_FILE_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
    BEGIN
      SELECT DISTINCT REFERENCEPM
        INTO vIdPmTrt
        FROM AR_CMD_PM_NUME_22_TMP a
       WHERE a.FILE_ID = P_FILE_ID;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la recuperation de l''IDPM de la table temp','SQLERRM', SQLERRM,'','');
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;

    OPEN C_AR_CMD_PM;
    FETCH C_AR_CMD_PM INTO R_AR_CMD_PM;
    CLOSE C_AR_CMD_PM;
    IF vIdPmTrt IS NOT NULL  THEN
      BEGIN
        NAT_FF1_TRT_FLX.TRT_ARCMD_IN(R_AR_CMD_PM.FILE_ID,
                                     R_AR_CMD_PM.REFERENCEPM,
                                     R_AR_CMD_PM.REFERENCECOMMANDEPMINTERNEOC,
                                     R_AR_CMD_PM.DATEARCOMMANDEPM,
                                     R_AR_CMD_PM.REFERENCEPRESTATIONPM,
                                     R_AR_CMD_PM.ETATARCOMMANDEPM,
                                     R_AR_CMD_PM.MOTIFARCOMMANDEPM
                                     );
        NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_AR_CMD_PM.REFERENCEPM,P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors de l''insert dans la table fonctionnelle  AR_CMD_PM','SQLERRM', SQLERRM,'','');
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      END;
    ELSE
      plog.ERROR('AR existe deja pour ce PM','REFERENCEPM', R_AR_CMD_PM.REFERENCEPM,'','');
      plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
    END IF;


    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => R_AR_CMD_PM.REFERENCEPM,
                         P_CODOI    => 'NUME',
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier AR MAD NRO PM FREE
  -- fichier de CR de commande de lien
  -- %Param P_FILE_ID  Identifiant informatique du fichier
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_ARCMD_PM_IN_FREE (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  CURSOR C_AR_CMD_PM IS
    SELECT REFERENCEPM,
           REFERENCECOMMANDEPMINTERNEOC,
           TO_DATE(DATEARCOMMANDEPM,'YYYY/MM/DD') AS DATEARCOMMANDEPM,
           REFERENCEPRESTATIONPM,
           ETATARCOMMANDEPM,
           MOTIFARCOMMANDEPM,
           DATE_IMP,
           FILE_ID
      FROM AR_CMD_PM_FREE_30_TMP
     WHERE FILE_ID = P_FILE_ID;

    R_AR_CMD_PM C_AR_CMD_PM%ROWTYPE;

    vIdPmTrt       VARCHAR2(255);
  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID
      FROM FILE_IO f
     WHERE f.FILE_ID = P_FILE_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
    BEGIN
      SELECT DISTINCT REFERENCEPM
        INTO vIdPmTrt
        FROM AR_CMD_PM_FREE_30_TMP a
       WHERE a.FILE_ID = FILE_ID;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la recuperation de l''IDPM de la table temp','SQLERRM', SQLERRM,'','');
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;

    OPEN C_AR_CMD_PM;
    FETCH C_AR_CMD_PM INTO R_AR_CMD_PM;

    IF vIdPmTrt IS NOT NULL  THEN
      BEGIN
        NAT_FF1_TRT_FLX.TRT_ARCMD_IN(R_AR_CMD_PM.FILE_ID,
                                     R_AR_CMD_PM.REFERENCEPM,
                                     R_AR_CMD_PM.REFERENCECOMMANDEPMINTERNEOC,
                                     R_AR_CMD_PM.DATEARCOMMANDEPM,
                                     R_AR_CMD_PM.REFERENCEPRESTATIONPM,
                                     R_AR_CMD_PM.ETATARCOMMANDEPM,
                                     R_AR_CMD_PM.MOTIFARCOMMANDEPM
                                     );
        NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_AR_CMD_PM.REFERENCEPM,P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors de l''insert dans la table fonctionnelle  AR_CMD_PM','SQLERRM', SQLERRM,'','');
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      END;
    ELSE
      plog.ERROR('AR existe deja pour ce PM','REFERENCEPM', R_AR_CMD_PM.REFERENCEPM,'','');
      plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
    END IF;
    CLOSE C_AR_CMD_PM;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => R_AR_CMD_PM.REFERENCEPM,
                         P_CODOI    => 'FREE',
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
  END;

    -------------------------------------------------------------------------------
  -- Post traitement du fichier AR MAD NRO PM COVA
  -- fichier de CR de commande de lien
  -- %Param P_FILE_ID  Identifiant informatique du fichier
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_ARCMD_PM_IN_COVA (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  CURSOR C_AR_CMD_PM IS
    SELECT REFERENCEPM,
           REFERENCECOMMANDEPMINTERNEOC,
           TO_DATE(DATEARCOMMANDEPM,'YYYY/MM/DD') AS DATEARCOMMANDEPM,
           REFERENCEPRESTATIONPM,
           ETATARCOMMANDEPM,
           MOTIFARCOMMANDEPM,
           DATE_IMP,
           FILE_ID
      FROM AR_CMD_PM_COVA_30_TMP
     WHERE FILE_ID = P_FILE_ID;

    R_AR_CMD_PM C_AR_CMD_PM%ROWTYPE;

    vIdPmTrt       VARCHAR2(255);
    vCodOi REF_OI.COD_OI%TYPE;

  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID
      FROM FILE_IO f
     WHERE f.FILE_ID = P_FILE_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    BEGIN
      SELECT DISTINCT REFERENCEPM
        INTO vIdPmTrt
        FROM AR_CMD_PM_COVA_30_TMP a
       WHERE a.FILE_ID = P_FILE_ID;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la recuperation de l''IDPM de la table temp','SQLERRM', SQLERRM,'','');
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;

    OPEN C_AR_CMD_PM;
    FETCH C_AR_CMD_PM INTO R_AR_CMD_PM;

    IF vIdPmTrt IS NOT NULL  THEN
      BEGIN
        NAT_FF1_TRT_FLX.TRT_ARCMD_IN(R_AR_CMD_PM.FILE_ID,
                                     R_AR_CMD_PM.REFERENCEPM,
                                     R_AR_CMD_PM.REFERENCECOMMANDEPMINTERNEOC,
                                     R_AR_CMD_PM.DATEARCOMMANDEPM,
                                     R_AR_CMD_PM.REFERENCEPRESTATIONPM,
                                     R_AR_CMD_PM.ETATARCOMMANDEPM,
                                     R_AR_CMD_PM.MOTIFARCOMMANDEPM
                                     );
        NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_AR_CMD_PM.REFERENCEPM,P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors de l''insert dans la table fonctionnelle  AR_CMD_PM','SQLERRM', SQLERRM,'','');
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      END;
    ELSE
      plog.ERROR('AR existe deja pour ce PM','REFERENCEPM', R_AR_CMD_PM.REFERENCEPM,'','');
      plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
    END IF;
    CLOSE C_AR_CMD_PM;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => R_AR_CMD_PM.REFERENCEPM,
                         P_CODOI    => vCodOi,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
  END;
 -------------------------------------------------------------------------------
  -- Post traitement du fichier AR MAD NRO PM PDF
  -- fichier de CR de commande de lien
  -- %Param P_FILE_ID  Identifiant informatique du fichier
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_ARCMD_PM_IN_TDF (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  CURSOR C_AR_CMD_PM IS
    SELECT REFERENCEPM,
           REFERENCECOMMANDEPMINTERNEOC,
           TO_DATE(DATEARCOMMANDEPM,'YYYY/MM/DD') AS DATEARCOMMANDEPM,
           REFERENCEPRESTATIONPM,
           ETATARCOMMANDEPM,
           MOTIFARCOMMANDEPM,
           DATE_IMP,
           FILE_ID
      FROM AR_CMD_PM_TDF_30_TMP
     WHERE FILE_ID = P_FILE_ID;

    R_AR_CMD_PM C_AR_CMD_PM%ROWTYPE;

    vIdPmTrt       VARCHAR2(255);
    vCodOi REF_OI.COD_OI%TYPE;

  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID
      FROM FILE_IO f
     WHERE f.FILE_ID = P_FILE_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    BEGIN
      SELECT DISTINCT REFERENCEPM
        INTO vIdPmTrt
        FROM AR_CMD_PM_TDF_30_TMP a
       WHERE a.FILE_ID = P_FILE_ID;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la recuperation de l''IDPM de la table temp','SQLERRM', SQLERRM,'','');
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;

    OPEN C_AR_CMD_PM;
    FETCH C_AR_CMD_PM INTO R_AR_CMD_PM;

    IF vIdPmTrt IS NOT NULL  THEN
      BEGIN
        NAT_FF1_TRT_FLX.TRT_ARCMD_IN(R_AR_CMD_PM.FILE_ID,
                                     R_AR_CMD_PM.REFERENCEPM,
                                     R_AR_CMD_PM.REFERENCECOMMANDEPMINTERNEOC,
                                     R_AR_CMD_PM.DATEARCOMMANDEPM,
                                     R_AR_CMD_PM.REFERENCEPRESTATIONPM,
                                     R_AR_CMD_PM.ETATARCOMMANDEPM,
                                     R_AR_CMD_PM.MOTIFARCOMMANDEPM
                                     );
        NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_AR_CMD_PM.REFERENCEPM,P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors de l''insert dans la table fonctionnelle  AR_CMD_PM','SQLERRM', SQLERRM,'','');
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      END;
    ELSE
      plog.ERROR('AR existe deja pour ce PM','REFERENCEPM', R_AR_CMD_PM.REFERENCEPM,'','');
      plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
    END IF;
    CLOSE C_AR_CMD_PM;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => R_AR_CMD_PM.REFERENCEPM,
                         P_CODOI    => vCodOi,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
  END;
  -------------------------------------------------------------------------------
  -- Post traitement du fichier AR MAD NRO PM ALTI
  -- fichier de CR de commande de lien
  -- %Param P_FILE_ID  Identifiant informatique du fichier
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_ARCMD_PM_IN_ALTI (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  CURSOR C_AR_CMD_PM IS
    SELECT REFERENCEPM,
           REFERENCECOMMANDEPMINTERNEOC,
           TO_DATE(DATEARCOMMANDEPM,'YYYY/MM/DD') AS DATEARCOMMANDEPM,
           REFERENCEPRESTATIONPM,
           ETATARCOMMANDEPM,
           a.MOTIFARCOMMANDEPM,
           DATE_IMP,
           FILE_ID
      FROM AR_CMD_PM_ALTI_30_TMP a
     WHERE FILE_ID = P_FILE_ID;

    R_AR_CMD_PM C_AR_CMD_PM%ROWTYPE;

    vIdPmTrt       VARCHAR2(255);
    vCodOi REF_OI.COD_OI%TYPE;

  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID
      FROM FILE_IO f
     WHERE f.FILE_ID = P_FILE_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    BEGIN
      SELECT DISTINCT REFERENCEPM
        INTO vIdPmTrt
        FROM AR_CMD_PM_ALTI_30_TMP a
       WHERE a.FILE_ID = P_FILE_ID;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la recuperation de l''IDPM de la table temp','SQLERRM', SQLERRM,'','');
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;

    OPEN C_AR_CMD_PM;
    FETCH C_AR_CMD_PM INTO R_AR_CMD_PM;

    IF vIdPmTrt IS NOT NULL  THEN
      BEGIN
        NAT_FF1_TRT_FLX.TRT_ARCMD_IN(R_AR_CMD_PM.FILE_ID,
                                     R_AR_CMD_PM.REFERENCEPM,
                                     R_AR_CMD_PM.REFERENCECOMMANDEPMINTERNEOC,
                                     R_AR_CMD_PM.DATEARCOMMANDEPM,
                                     R_AR_CMD_PM.REFERENCEPRESTATIONPM,
                                     R_AR_CMD_PM.ETATARCOMMANDEPM,
                                     R_AR_CMD_PM.MOTIFARCOMMANDEPM
                                     );
        NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_AR_CMD_PM.REFERENCEPM,P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors de l''insert dans la table fonctionnelle  AR_CMD_PM','SQLERRM', SQLERRM,'','');
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      END;
    ELSE
      plog.ERROR('AR existe deja pour ce PM','REFERENCEPM', R_AR_CMD_PM.REFERENCEPM,'','');
      plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
    END IF;
    CLOSE C_AR_CMD_PM;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => R_AR_CMD_PM.REFERENCEPM,
                         P_CODOI    => vCodOi,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier AR Commande PM Simpson
  -- fichier de CR de commande de lien
  -- %Param P_FILE_ID  Identifiant informatique du fichier
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_ARCMD_IN_SMP_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  CURSOR C_AR_CMD_PM IS
    SELECT REFERENCEPM,
           REFERENCECOMMANDEPMINTERNEOC,
           TO_DATE(DATEARCOMMANDEPM,'YYYY/MM/DD') AS DATEARCOMMANDEPM,
           REFERENCEPRESTATIONPM,
           ETATARCOMMANDEPM,
           a.MOTIFARCOMMANDEPM,
           DATE_IMP,
           FILE_ID
      FROM AR_CMD_PM_SMP_30_TMP a
     WHERE FILE_ID = P_FILE_ID;

    R_AR_CMD_PM C_AR_CMD_PM%ROWTYPE;

    vIdPmTrt       VARCHAR2(255);
    vCodOi REF_OI.COD_OI%TYPE;

  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID
      FROM FILE_IO f
     WHERE f.FILE_ID = P_FILE_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    BEGIN
      SELECT DISTINCT REFERENCEPM
        INTO vIdPmTrt
        FROM AR_CMD_PM_SMP_30_TMP a
       WHERE a.FILE_ID = P_FILE_ID;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la recuperation de l''IDPM de la table temp','SQLERRM', SQLERRM,'','');
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;

    OPEN C_AR_CMD_PM;
    FETCH C_AR_CMD_PM INTO R_AR_CMD_PM;

    IF vIdPmTrt IS NOT NULL  THEN
      BEGIN
        NAT_FF1_TRT_FLX.TRT_ARCMD_IN(R_AR_CMD_PM.FILE_ID,
                                     R_AR_CMD_PM.REFERENCEPM,
                                     R_AR_CMD_PM.REFERENCECOMMANDEPMINTERNEOC,
                                     R_AR_CMD_PM.DATEARCOMMANDEPM,
                                     R_AR_CMD_PM.REFERENCEPRESTATIONPM,
                                     R_AR_CMD_PM.ETATARCOMMANDEPM,
                                     R_AR_CMD_PM.MOTIFARCOMMANDEPM
                                     );
        NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_AR_CMD_PM.REFERENCEPM,P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors de l''insert dans la table fonctionnelle  AR_CMD_PM','SQLERRM', SQLERRM,'','');
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      END;
    ELSE
      plog.ERROR('AR existe deja pour ce PM','REFERENCEPM', R_AR_CMD_PM.REFERENCEPM,'','');
      plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
    END IF;
    CLOSE C_AR_CMD_PM;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => R_AR_CMD_PM.REFERENCEPM,
                         P_CODOI    => vCodOi,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
  END;

   -------------------------------------------------------------------------------
  -- Post traitement du fichier AR Commande PM SIEA
  -- fichier de CR de commande de lien
  -- %Param P_FILE_ID  Identifiant informatique du fichier
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_ARCMD_IN_SIEA_V30 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    CURSOR C_AR_CMD_PM IS
      SELECT REFERENCEPM,
             REFERENCECOMMANDEPMINTERNEOC,
             TO_DATE(DATEARCOMMANDEPM,'YYYY/MM/DD') AS DATEARCOMMANDEPM,
             REFERENCEPRESTATIONPM,
             ETATARCOMMANDEPM,
             MOTIFARCOMMANDEPM,
             DATE_IMP,
             FILE_ID
        FROM AR_CMD_PM_SIEA_30_TMP
       WHERE FILE_ID = P_FILE_ID;

      R_AR_CMD_PM C_AR_CMD_PM%ROWTYPE;

      vIdPmTrt       VARCHAR2(255);
      vCodOi REF_OI.COD_OI%TYPE;

    CURSOR C_INFO_IFC IS
      SELECT f.IFC_ID,
             f.PRM_ID
        FROM FILE_IO f
       WHERE f.FILE_ID = P_FILE_ID;
    R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    BEGIN
      SELECT DISTINCT REFERENCEPM
        INTO vIdPmTrt
        FROM AR_CMD_PM_SIEA_30_TMP a
       WHERE a.FILE_ID = P_FILE_ID;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la recuperation de l''IDPM de la table temp','SQLERRM', SQLERRM,'','');
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;

    OPEN C_AR_CMD_PM;
    FETCH C_AR_CMD_PM INTO R_AR_CMD_PM;

    IF vIdPmTrt IS NOT NULL  THEN
      BEGIN
        NAT_FF1_TRT_FLX.TRT_ARCMD_IN(R_AR_CMD_PM.FILE_ID,
                                     R_AR_CMD_PM.REFERENCEPM,
                                     R_AR_CMD_PM.REFERENCECOMMANDEPMINTERNEOC,
                                     R_AR_CMD_PM.DATEARCOMMANDEPM,
                                     R_AR_CMD_PM.REFERENCEPRESTATIONPM,
                                     R_AR_CMD_PM.ETATARCOMMANDEPM,
                                     R_AR_CMD_PM.MOTIFARCOMMANDEPM
                                     );
        NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_AR_CMD_PM.REFERENCEPM,P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors de l''insert dans la table fonctionnelle  AR_CMD_PM','SQLERRM', SQLERRM,'','');
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      END;
    ELSE
      plog.ERROR('AR existe deja pour ce PM','REFERENCEPM', R_AR_CMD_PM.REFERENCEPM,'','');
      plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
    END IF;
    CLOSE C_AR_CMD_PM;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => R_AR_CMD_PM.REFERENCEPM,
                         P_CODOI    => vCodOi,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
  END;

  -------------------------------------------------------------------------------
  -- Fonction pour ramener la version de protocole
  -- %Param P_COD_PART_FLX Code du Part Flux
  -------------------------------------------------------------------------------
  FUNCTION GET_VER_PRTCL(P_COD_PART_FLX IN PART_FLX.COD_PART_FLUX%TYPE)
    RETURN VARCHAR2 IS
  vPRTCL VARCHAR2(4);
  CURSOR C_VER_PRTCL IS
    SELECT pflx.PRTCL
      FROM PART_FLX pflx
     WHERE pflx.cod_part_flux = P_COD_PART_FLX;
  R_VER_PRTCL C_VER_PRTCL%ROWTYPE;
  BEGIN
    OPEN C_VER_PRTCL;
    FETCH C_VER_PRTCL INTO R_VER_PRTCL;
    CLOSE C_VER_PRTCL;

     vPRTCL := R_VER_PRTCL.PRTCL;

  RETURN vPRTCL;
  END;
  ------------------------------------------------------------------
  -- Pre-traitement de la sous-interface PRE_TRT_IPE_IN_SFRA_ZTD_V31
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  ------------------------------------------------------------------
  PROCEDURE PRE_TRT_IPE_IN_SFRA_ZTD_V31 (FILEIO_ID INTEGER) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
    vTypzon VARCHAR2(3);
  BEGIN
      plog.info('PRE TRAITEMENT IPE FT ZTD : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      EXECUTE IMMEDIATE 'TRUNCATE TABLE IPE_SFRA_ZTD_V31_TMP';

      vCod_Oi := GET_OI(FILEIO_ID);
      vTypzon := 'ZTD';

      NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => vCod_Oi,
                                     P_TYPZON => vTypzon,
                                     P_FILE_ID => FILEIO_ID);
      plog.info('PRE TRAITEMENT IPE FT ZTD : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  -------------------------------------------------------------
  -- Pre-traitement de la sous-interface PRE_TRT_IPE_IN_SFRA_V31
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  -------------------------------------------------------------
  PROCEDURE PRE_TRT_IPE_IN_SFRA_ZMD_V31 (FILEIO_ID INTEGER) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
    vTypzon VARCHAR2(3);
  BEGIN
      plog.info('PRE TRAITEMENT IPE SFR ZMD : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      EXECUTE IMMEDIATE 'TRUNCATE TABLE IPE_SFRA_ZMD_V31_TMP';

      vCod_Oi := GET_OI(FILEIO_ID);
      vTypzon := 'ZMD';

      NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => vCod_Oi,
                                     P_TYPZON => vTypzon,
                                     P_FILE_ID => FILEIO_ID);
      plog.info('PRE TRAITEMENT IPE SFR ZMD : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  -----------------------------------------------------------------
  -- Pre-traitement de la sous-interface PRE_TRT_IPE_IN_FT_ZMD_V31
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  -----------------------------------------------------------------
  PROCEDURE PRE_TRT_IPE_IN_FT_ZMD_V31 (FILEIO_ID INTEGER) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  vTypzon VARCHAR2(3);
  BEGIN

    plog.info('PRE TRAITEMENT IPE FT ZMD : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    EXECUTE IMMEDIATE 'TRUNCATE TABLE IPE_FT_ZMD_V31_TMP';

    vCod_Oi := GET_OI(FILEIO_ID);
    vTypzon := 'ZMD';

    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => vCod_Oi,
                                   P_TYPZON => vTypzon,
                                   P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE FT ZMD : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  -----------------------------------------------------------------
  -- Pre-traitement de la sous-interface PRE_TRT_IPE_IN_FT_ZTD_V31
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  -----------------------------------------------------------------
  PROCEDURE PRE_TRT_IPE_IN_FT_ZTD_V31 (FILEIO_ID INTEGER) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
    vTypzon VARCHAR2(3);
  BEGIN
    plog.info('PRE TRAITEMENT IPE FT ZTD : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    EXECUTE IMMEDIATE 'TRUNCATE TABLE IPE_FT_ZTD_V31_TMP';

    vCod_Oi := GET_OI(FILEIO_ID);
    vTypzon := 'ZTD';

    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => vCod_Oi,
                                   P_TYPZON => vTypzon,
                                   P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE FT ZTD : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  -----------------------------------------------------------------
  -- Pre-traitement de la sous-interface PRE_TRT_IPE_IN_FT_ZSP_V31
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  -----------------------------------------------------------------
  PROCEDURE PRE_TRT_IPE_IN_FT_ZSP_V31 (FILEIO_ID INTEGER) IS
  BEGIN
    plog.info('PRE TRAITEMENT IPE FT ZSP : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    EXECUTE IMMEDIATE 'TRUNCATE TABLE IPE_FT_ZSP_V31_TMP';
    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => 'FTEL',
                                   P_TYPZON => 'ZSP',
                                   P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE FT ZSP : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  -------------------------------------------------------------
  -- Pre-traitement de la sous-interface PRE_TRT_IPE_IN_COVA_V31
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  -------------------------------------------------------------

  PROCEDURE PRE_TRT_IPE_IN_COVA_V31 (FILEIO_ID INTEGER) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  vTypzon VARCHAR2(3);
  BEGIN
    plog.info('PRE TRAITEMENT IPE COVAGE : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    vCod_Oi := GET_OI(FILEIO_ID);

    CASE vCod_Oi
      WHEN 'SEQU' THEN
        vTypzon := 'ZTD';
      ELSE
        vTypzon := 'ZMD';
    END CASE;

    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => vCod_Oi,
                                   P_TYPZON => vTypzon,
                                   P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE COVAGE : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  -------------------------------------------------------------
  -- Pre-traitement de la sous-interface PRE_TRT_IPE_IN_AXIO_V31
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  -------------------------------------------------------------
  PROCEDURE PRE_TRT_IPE_IN_AXIO_V31 (FILEIO_ID INTEGER) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  vTypzon VARCHAR2(3);
  BEGIN
    plog.info('PRE TRAITEMENT IPE AXIO : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    vCod_Oi := GET_OI(FILEIO_ID);

    CASE vCod_Oi
      WHEN 'SEQU' THEN
        vTypzon := 'ZTD';
      ELSE
        vTypzon := 'ZMD';
     END CASE;

    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => vCod_Oi,
                                   P_TYPZON => vTypzon,
                                   P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE AXIO : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  -------------------------------------------------------------
  -- Pre-traitement de la sous-interface PRE_TRT_IPE_IN_ALTI_V31
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  -------------------------------------------------------------
  PROCEDURE PRE_TRT_IPE_IN_ALTI_V31 (FILEIO_ID INTEGER) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  vTypzon VARCHAR2(3);
  BEGIN
    plog.info('PRE TRAITEMENT IPE ALTI : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    vCod_Oi := GET_OI(FILEIO_ID);

    vTypzon := 'ZMD';
    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => vCod_Oi,
                                 P_TYPZON => vTypzon,
                                 P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE ALTI : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  -------------------------------------------------------------
  -- Pre-traitement de la sous-interface PRE_TRT_IPE_IN_FREE_V31
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  -------------------------------------------------------------
  PROCEDURE PRE_TRT_IPE_IN_FREE_V31 (FILEIO_ID INTEGER) IS
  BEGIN
    plog.info('PRE TRAITEMENT IPE FREE : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => 'FREE',
                                   P_TYPZON => 'ZTD',
                                   P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE FREE : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  -------------------------------------------------------------
  -- Pre-traitement de la sous-interface PRE_TRT_IPE_IN_TDF_V31
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  -------------------------------------------------------------
  PROCEDURE PRE_TRT_IPE_IN_TDF_V31 (FILEIO_ID INTEGER) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  vTypzon VARCHAR2(3);
  BEGIN
    plog.info('PRE TRAITEMENT IPE TDF : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    vCod_Oi := GET_OI(FILEIO_ID);

    vTypzon := 'ZMD';
    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => vCod_Oi,
                                 P_TYPZON => vTypzon,
                                 P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE TDF : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  -----------------------------------------------------------------
  -- Pre-traitement de la sous-interface PRE_TRT_IPE_ZMD_IN_SMP_V31
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  -----------------------------------------------------------------
  PROCEDURE PRE_TRT_IPE_IN_SMP_ZMD_V31 (FILEIO_ID INTEGER) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  vTypzon VARCHAR2(3);
  BEGIN
    IF NAT_FF1.CAN_RUN_TRT_IPE(NAT_FTTH_OI.P_CODOI_SIMPSON) = 1 THEN --> On lance uniquement si possible
    plog.info('PRE TRAITEMENT IPE Simpson ZMD : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    EXECUTE IMMEDIATE 'TRUNCATE TABLE IPE_SMP_ZMD_V31_TMP';

    vCod_Oi := GET_OI(FILEIO_ID);
    vTypzon := 'ZMD';

    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => vCod_Oi,
                                   P_TYPZON => vTypzon,
                                   P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE Simpson ZMD : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    END IF;
  END;


  -----------------------------------------------------------------
  -- Pre-traitement de la sous-interface PRE_TRT_IPE_ZSP_IN_SMP_V31
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  -----------------------------------------------------------------
  PROCEDURE PRE_TRT_IPE_IN_SMP_ZSP_V31 (FILEIO_ID INTEGER) IS
  BEGIN
    IF NAT_FF1.CAN_RUN_TRT_IPE(NAT_FTTH_OI.P_CODOI_SIMPSON) = 1 THEN --> On lance uniquement si possible
    plog.info('PRE TRAITEMENT IPE Simpson ZSP : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    EXECUTE IMMEDIATE 'TRUNCATE TABLE IPE_SMP_ZSP_V31_TMP';
    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => 'SDIF',
                                   P_TYPZON => 'ZSP',
                                   P_FILE_ID => FILEIO_ID);
    plog.info('PRE TRAITEMENT IPE Simpson ZSP : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    END IF;
  END;

    -------------------------------------------------------------
  -- Pre-traitement de la sous-interface PRE_TRT_IPE_IN_SIEA_V31
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  -------------------------------------------------------------
  PROCEDURE PRE_TRT_IPE_IN_SIEA_V31 (FILEIO_ID INTEGER) IS
  BEGIN
    plog.info('PRE TRAITEMENT IPE SIEA : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

    NAT_FTTH_OI.PRE_TRT_SPVION_IPE(P_CODOI => GET_OI(FILEIO_ID),
                                   P_TYPZON => 'ZMD',
                                   P_FILE_ID => FILEIO_ID);

    plog.info('PRE TRAITEMENT IPE SIEA : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;
---------------------------------------------------------
          -- Pré traitement des CR_INFO_SYNDIC 3.1 --
---------------------------------------------------------
  PROCEDURE PRE_TRT_CRSYN_IN_COVA_V31 (P_FILE_ID INTEGER) IS
  BEGIN
    NULL;
  END;

    PROCEDURE PRE_TRT_CRSYN_IN_FTEL_V31 (P_FILE_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRSYN_IN_SFRA_V31 (P_FILE_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRSYN_IN_FREE_V31 (P_FILE_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRSYN_IN_ALTI_V31 (P_FILE_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRSYN_IN_TDF_V31 (P_FILE_ID INTEGER) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRSYN_IN_SMP_V31 (P_FILE_ID INTEGER) IS
  BEGIN
    NULL;
  END;
----------------------------------------------------------
     --  Pre TRAITEMENT Lettre Info Syn 3.1 --
----------------------------------------------------------
  PROCEDURE PRE_TRT_LTRSYN_IN_COVA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_LTRSYN_IN_FTEL_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_LTRSYN_IN_SFRA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_LTRSYN_IN_FREE_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_LTRSYN_IN_ALTI_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_LTRSYN_IN_TDF_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_LTRSYN_IN_SMP_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;
  ----------------------------------------------------------
       --  Pre TRAITEMENT CRMAD PM  3.1 --
  ----------------------------------------------------------
  PROCEDURE PRE_TRT_CRMADPM_IN_COVA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRMADPM_IN_FT_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRMADPM_IN_SFRA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRMADPM_IN_AXIO_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRMADPM_IN_FREE_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRMADPM_IN_ALTI_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRMADPM_IN_TDF_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRMADPM_IN_SMP_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRMADPM_IN_SIEA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;
  ----------------------------------------------------------
       --  Pre TRAITEMENT PLAN MAD  3.1 --
  ----------------------------------------------------------
  PROCEDURE PRE_TRT_PLANMAD_IN_COVA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_PLANMAD_IN_FT_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_PLANMAD_IN_SFRA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_PLANMAD_IN_AXIO_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_PLANMAD_IN_FREE_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_PLANMAD_IN_ALTI_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_PLANMAD_IN_TDF_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_PLANMAD_IN_SMP_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_PLANMAD_IN_SIEA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;
   ----------------------------------------------------------
       --  Pre TRAITEMENT CR MAD POSITION 3.1 --
  ----------------------------------------------------------
  PROCEDURE PRE_TRT_POSITION_IN_COVA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_POSITION_IN_FT_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_POSITION_IN_SFRA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_POSITION_IN_AXIO_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_POSITION_IN_FREE_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_POSITION_IN_ALTI_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_POSITION_IN_TDF_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_POSITION_IN_SMP_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;
  ----------------------------------------------------------
       --  Pre TRAITEMENT CRNA 3.1 --
  ----------------------------------------------------------
  PROCEDURE PRE_TRT_CRNA_IN_COVA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRNA_IN_FT_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRNA_IN_SFRA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRNA_IN_AXIO_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRNA_IN_FREE_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRNA_IN_ALTI_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRNA_IN_TDF_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRNA_IN_SMP_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CRNA_IN_SIEA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;
  -------------------------------------------------------------------------------
  -- Les pré traitement CPN 3.1
  -------------------------------------------------------------------------------
  PROCEDURE PRE_TRT_CPN_IN_COVA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_IN_FTEL_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_IN_FTEL_ZSP_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_IN_AXIO_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_IN_SFOR_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_IN_ALTI_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_IN_TDF_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_IN_SMP_ZMD_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_IN_SMP_ZSP_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_IN_SIEA_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_CPN_IN_SFRA_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  -------------------------------------------------------------------------------
  -- Les pré traitement AR de commande unitaire et dmd info 3.1
  -------------------------------------------------------------------------------
  PROCEDURE PRE_TRT_ARCMD_PM_IN_COVA_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_ARCMD_PM_IN_FREE_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_ARCMD_PM_IN_ALTI_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_ARCMD_PM_IN_TDF_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_ARCMD_IN_SMP_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_ARCMD_PM_IN_SFRA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_ARCMD_PM_IN_FT_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE)IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_ARCMD_PM_IN_AXIO_V31(FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  PROCEDURE PRE_TRT_ARCMD_IN_SIEA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    NULL;
  END;

  ----------------------------------------------------------
  -- CLEAN_IPE_ZMD FTEL 3.1
  ----------------------------------------------------------
  PROCEDURE CLEAN_IPE_ZMD_FT_V31 IS

  BEGIN
    /*DELETE FROM IPE_FT_ZMD_V31_TMP it1
          WHERE it1.REFERENCEPM IS NULL;
    COMMIT;*/

    /*UPDATE IPE_FT_ZMD_V31_TMP it1 set it1.ETATIMMEUBLE = UPPER(PKG_TOOLS.TRANSLATE(it1.ETATIMMEUBLE));
    UPDATE IPE_FT_ZMD_V31_TMP it1 set it1.ETATPM = UPPER(PKG_TOOLS.TRANSLATE(it1.ETATPM));
    COMMIT;*/

   /* DELETE FROM IPE_FT_ZMD_V31_TMP it
          WHERE it.ETATIMMEUBLE NOT IN ('CIBLE', 'SIGNE','EN COURS DE DEPLOIEMENT', 'DEPLOYE')
            AND it.ETATPM       NOT IN ('EN COURS DE DEPLOIEMENT', 'DEPLOYE');*/

    /*DELETE FROM IPE_FT_ZMD_V31_TMP it
          WHERE NOT EXISTS (SELECT 1
                              FROM SOUSCRIPTION s
                             WHERE it.CODEINSEEPM = s.COD_INSEE
                               AND s.COD_OI       IN ('FTEL',NAT_FTTH_OI.P_CODOI_SIMPSON));
    COMMIT;*/
         -- TODO : vérifier si on utilise la date de début, date de fin de la souscription
         --       dans notre pour le codeinsee du pm
    DELETE FROM IPE_FT_ZMD_V31_TMP i
     WHERE EXISTS (SELECT 1
                     FROM LST_PM_OF_TO_SFOR l
                    WHERE l.IDPM = i.REFERENCEPM
                      AND l.DATMIG is not null);
  END;

  ----------------------------------------------------------
  -- CLEAN_IPE_ZSP FTEL 3.1
  ----------------------------------------------------------
  PROCEDURE CLEAN_IPE_ZSP_FT_V31 IS

  BEGIN
    /*DELETE FROM IPE_FT_ZSP_V31_TMP it1
          WHERE it1.REFERENCEPM IS NULL;
    COMMIT;*/

    /*UPDATE IPE_FT_ZSP_V31_TMP it1 set it1.ETATIMMEUBLE = UPPER(PKG_TOOLS.TRANSLATE(it1.ETATIMMEUBLE));
    UPDATE IPE_FT_ZSP_V31_TMP it1 set it1.ETATPM = UPPER(PKG_TOOLS.TRANSLATE(it1.ETATPM));
    COMMIT;*/

    /*DELETE FROM IPE_FT_ZSP_V31_TMP it
          WHERE it.ETATIMMEUBLE NOT IN ('CIBLE', 'SIGNE','EN COURS DE DEPLOIEMENT', 'DEPLOYE')
            AND it.ETATPM       NOT IN ('EN COURS DE DEPLOIEMENT', 'DEPLOYE')
            AND NOT EXISTS (SELECT 1
                              FROM LST_CMN_ZTD_ZSP l
                             WHERE l.CODE_INSEE = it.CODEINSEEIMMEUBLE);*/

    /*DELETE FROM IPE_FT_ZSP_V31_TMP it
          WHERE NOT EXISTS (SELECT 1
                              FROM SOUSCRIPTION s
                             WHERE it.CODEINSEEPM = s.COD_INSEE
                               AND s.COD_OI       = 'FTEL')
            AND NOT EXISTS (SELECT 1
                              FROM LST_CMN_ZTD_ZSP l
                             WHERE l.CODE_INSEE = it.CODEINSEEIMMEUBLE);
    COMMIT;*/
         -- TODO : vérifier si on utilise la date de début, date de fin de la souscription
         --       dans notre pour le codeinsee du pm
    DELETE FROM IPE_FT_ZSP_V31_TMP i
     WHERE EXISTS (SELECT 1
                     FROM LST_PM_OF_TO_SFOR l
                    WHERE l.IDPM = i.REFERENCEPM
                      AND l.DATMIG is not null);
    COMMIT;
  END;


  ----------------------------------------------------------
  -- CLEAN_IPE_ZMD SMP 3.1
  ----------------------------------------------------------
  PROCEDURE CLEAN_IPE_ZMD_SMP_V31 IS
  BEGIN
    /*DELETE FROM IPE_SMP_ZMD_V31_TMP it1
          WHERE it1.REFERENCEPM IS NULL;
    COMMIT;

    DELETE FROM IPE_SMP_ZMD_V31_TMP it
          WHERE it.ETATIMMEUBLE NOT IN ('CIBLE', 'SIGNE','EN COURS DE DEPLOIEMENT', 'DEPLOYE')
            AND it.ETATPM       NOT IN ('EN COURS DE DEPLOIEMENT', 'DEPLOYE');*/

    /*DELETE FROM IPE_SMP_ZMD_V31_TMP it
          WHERE NOT EXISTS (SELECT 1
                              FROM SOUSCRIPTION s
                             WHERE it.CODEINSEEPM = s.COD_INSEE
                               AND s.COD_OI       = NAT_FTTH_OI.P_CODOI_SIMPSON);
    COMMIT;*/
         -- TODO : vérifier si on utilise la date de début, date de fin de la souscription
         --       dans notre pour le codeinsee du pm
    DELETE FROM IPE_SMP_ZMD_V31_TMP i
     WHERE EXISTS (SELECT 1
                     FROM LST_PM_OF_TO_SFOR l
                    WHERE l.IDPM = i.REFERENCEPM
                      AND l.DATMIG is not null);
    COMMIT;
  END;

  ----------------------------------------------------------
  -- CLEAN_IPE_ZMD SFRA 3.1
  ----------------------------------------------------------
  PROCEDURE CLEAN_IPE_ZMD_SFRA_V31 IS

  BEGIN
    /*DELETE FROM IPE_SFRA_ZMD_V31_TMP it1
          WHERE it1.REFERENCEPM IS NULL;
    COMMIT;*/

    /*DELETE FROM IPE_FT_ZMD_V31_TMP it
          WHERE it.ETATIMMEUBLE NOT IN ('CIBLE', 'SIGNE','EN COURS DE DEPLOIEMENT', 'DEPLOYE')
            AND it.ETATPM       NOT IN ('EN COURS DE DEPLOIEMENT', 'DEPLOYE');*/

    /*DELETE FROM IPE_SFRA_ZMD_V31_TMP it
          WHERE NOT EXISTS (SELECT 1
                              FROM SOUSCRIPTION s
                             WHERE it.CODEINSEEPM = s.COD_INSEE
                               AND s.COD_OI       = 'SFMD');
    COMMIT;*/
    NULL;
         -- TODO : vérifier si on utilise la date de début, date de fin de la souscription
         --       dans notre pour le codeinsee du pm
  END;
  -----------------------------------------------------------------------------------
  -- Création des PM à partir de l'IPE FT ZMD 3.1
  -----------------------------------------------------------------------------------

  PROCEDURE CHK_N_CREATE_PM_FTEL_ZMD_31(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
  -- Récupération des PM qui n'existent pas dans ECO
  CURSOR C_VERIF_PM IS
  SELECT *
         FROM (SELECT DISTINCT i.REFERENCEPM,
                               i.NUMEROVOIEPM as NUMEROVOIEPM,
                               (SELECT btyp.CODVAL
                                  FROM BDMVAL btyp
                                 WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                   AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                               (SELECT bcomp.CODVAL
                                  FROM BDMVAL bcomp
                                 WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                   AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                               i.NOMVOIEPM,
                               (SELECT cmn.COD_INSEE
                                  FROM BDCOM cmn
                                 WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                               (SELECT DISTINCT pos.CODPTTCMN
                                  FROM BDCOMPTL pos
                                 WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                   AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                               cpn.REFERENCENRO,
                               i.FILE_ID,
                               i.ETATPM
                          FROM CPN             cpn,
                               IPE_FT_ZMD_V31_TMP i
                         WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                           AND cpn.CODOI           = P_COD_OI
                           AND NOT EXISTS (SELECT 1
                                             FROM PM p
                                            WHERE p.IDPM = i.REFERENCEPM)
                           AND EXISTS ( SELECT 1
                                          FROM SOUSCRIPTION s
                                         WHERE s.COD_INSEE = i.CODEINSEEPM
                                           AND s.COD_OI    = P_COD_OI)) A

  WHERE A.CODEINSEEPM IS NOT NULL
    AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL; -- il faut qu'il existe au moins un code postal associé au code insee

  CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
    SELECT GEO_ID
      FROM PM
     WHERE IDPM = vIDPM;
  R_GEO_ID C_GEO_ID%ROWTYPE;
  BEGIN
    -- Création du PM avec un etat adductable
    FOR R_PM IN C_VERIF_PM LOOP
      BEGIN
        NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                           P_NOMSIT    => R_PM.REFERENCEPM,
                           P_NUMVOI    => R_PM.NUMEROVOIEPM,
                           P_TYPVOI    => R_PM.TYPEVOIEPM,
                           P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                           P_NOMVOI    => R_PM.NOMVOIEPM,
                           P_COD_INSEE => R_PM.CODEINSEEPM,
                           P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                           P_COD_OI    => P_COD_OI,
                           P_IDNRO     => R_PM.REFERENCENRO,
                           P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                           P_NOMGEO_COLOC => NULL,
                           P_TYP_ZONE     => 'ZMD',
                           P_IS_ZA        => 1);

        OPEN C_GEO_ID(R_PM.REFERENCEPM);
        FETCH C_GEO_ID INTO R_GEO_ID;
        CLOSE C_GEO_ID;

        PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'ORA','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
        ----- Création alertes
        --> Alerte 1
           -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
             -- dans le module CR MAD
           -- Cloture de l'alerte à la réception du CR MAD
       IF R_PM.ETATPM = 'DEPLOYE' THEN
         NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
       END IF;

       EXCEPTION
         WHEN OTHERS THEN
           plog.ERROR('Erreur lors de la création du PM via IPE 3.1','SQLERRM', SQLERRM);
           plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
           plog.full_call_stack('File_ID',R_PM.FILE_ID);
       END;
     END LOOP;
     COMMIT;
  END;


  -----------------------------------------------------------------------------------
  -- Création des PM à partir de l'IPE FT ZSP 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE CHK_N_CREATE_PM_FTEL_ZSP_31 IS
  -- Récupération des PM qui n'existent pas dans ECO
  CURSOR C_VERIF_PM IS
  SELECT *
         FROM (SELECT DISTINCT i.REFERENCEPM,
                               i.NUMEROVOIEPM as NUMEROVOIEPM,
                               (SELECT btyp.CODVAL
                                  FROM BDMVAL btyp
                                 WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                   AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                               (SELECT bcomp.CODVAL
                                  FROM BDMVAL bcomp
                                 WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                   AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                               i.NOMVOIEPM,
                               (SELECT cmn.COD_INSEE
                                  FROM BDCOM cmn
                                 WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                               (SELECT DISTINCT pos.CODPTTCMN
                                  FROM BDCOMPTL pos
                                 WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                   AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                               cpn.REFERENCENRO,
                               i.FILE_ID,
                               i.ETATPM
                          FROM CPN             cpn,
                               IPE_FT_ZSP_V31_TMP i
                         WHERE NOT EXISTS (SELECT 1
                                             FROM LST_CMN_ZTD_ZSP l
                                            WHERE l.CODE_INSEE = i.CODEINSEEPM)
                           AND cpn.REFERENCEPM     = i.REFERENCEPM
                           AND cpn.CODOI           = 'FTEL'
                           AND NOT EXISTS (SELECT 1
                                             FROM PM p
                                            WHERE p.IDPM = i.REFERENCEPM)) A

  WHERE A.CODEINSEEPM IS NOT NULL
    AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL; -- il faut qu'il existe au moins un code postal associé au code insee

  CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
    SELECT GEO_ID
      FROM PM
     WHERE IDPM = vIDPM;
  R_GEO_ID C_GEO_ID%ROWTYPE;
  BEGIN
    -- Création du PM avec un etat adductable
    FOR R_PM IN C_VERIF_PM LOOP
      BEGIN
        NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                           P_NOMSIT    => R_PM.REFERENCEPM,
                           P_NUMVOI    => R_PM.NUMEROVOIEPM,
                           P_TYPVOI    => R_PM.TYPEVOIEPM,
                           P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                           P_NOMVOI    => R_PM.NOMVOIEPM,
                           P_COD_INSEE => R_PM.CODEINSEEPM,
                           P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                           P_COD_OI    => 'FTEL',
                           P_IDNRO     => R_PM.REFERENCENRO,
                           P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                           P_NOMGEO_COLOC => NULL,
                           P_TYP_ZONE     => 'ZMD',
                           P_IS_ZA        => 1);

        OPEN C_GEO_ID(R_PM.REFERENCEPM);
        FETCH C_GEO_ID INTO R_GEO_ID;
        CLOSE C_GEO_ID;

        PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'ORA','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
        ----- Création alertes
        --> Alerte 1
           -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
             -- dans le module CR MAD
           -- Cloture de l'alerte à la réception du CR MAD
       IF R_PM.ETATPM = 'DEPLOYE' THEN
         NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
       END IF;

       EXCEPTION
         WHEN OTHERS THEN
           plog.ERROR('Erreur lors de la création du PM via IPE ZSP 3.1','SQLERRM', SQLERRM);
           plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
           plog.full_call_stack('File_ID',R_PM.FILE_ID);
       END;
     END LOOP;
     COMMIT;
  END;


  -----------------------------------------------------------------------------------
  -- Création des PM à partir de l'IPE SFOR ZMD 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE CHK_N_CREATE_PM_SFOR_ZMD_31(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
  -- Récupération des PM qui n'existent pas dans ECO
  CURSOR C_VERIF_PM IS
  SELECT *
         FROM (SELECT DISTINCT i.REFERENCEPM,
                               i.NUMEROVOIEPM as NUMEROVOIEPM,
                               (SELECT btyp.CODVAL
                                  FROM BDMVAL btyp
                                 WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                   AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                               (SELECT bcomp.CODVAL
                                  FROM BDMVAL bcomp
                                 WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                   AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                               i.NOMVOIEPM,
                               (SELECT cmn.COD_INSEE
                                  FROM BDCOM cmn
                                 WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                               (SELECT DISTINCT pos.CODPTTCMN
                                  FROM BDCOMPTL pos
                                 WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                   AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                               cpn.REFERENCENRO,
                               i.FILE_ID,
                               i.ETATPM
                          FROM CPN             cpn,
                               IPE_SFRA_ZMD_V31_TMP i
                         WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                           AND cpn.CODOI           = P_COD_OI
                           AND NOT EXISTS (SELECT 1
                                             FROM PM p
                                            WHERE p.IDPM = i.REFERENCEPM)
                           AND EXISTS ( SELECT 1
                                          FROM SOUSCRIPTION s
                                         WHERE s.COD_INSEE = i.CODEINSEEPM
                                           AND s.COD_OI    = P_COD_OI)) A

  WHERE A.CODEINSEEPM IS NOT NULL
    AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL; -- il faut qu'il existe au moins un code postal associé au code insee

  CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
    SELECT GEO_ID
      FROM PM
     WHERE IDPM = vIDPM;
  R_GEO_ID C_GEO_ID%ROWTYPE;
  BEGIN
    -- Création du PM avec un etat adductable
    FOR R_PM IN C_VERIF_PM LOOP
      BEGIN
        NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                           P_NOMSIT    => R_PM.REFERENCEPM,
                           P_NUMVOI    => R_PM.NUMEROVOIEPM,
                           P_TYPVOI    => R_PM.TYPEVOIEPM,
                           P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                           P_NOMVOI    => R_PM.NOMVOIEPM,
                           P_COD_INSEE => R_PM.CODEINSEEPM,
                           P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                           P_COD_OI    => P_COD_OI,
                           P_IDNRO     => R_PM.REFERENCENRO,
                           P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                           P_NOMGEO_COLOC => NULL,
                           P_TYP_ZONE     => 'ZMD',
                           P_IS_ZA        => 1);

        OPEN C_GEO_ID(R_PM.REFERENCEPM);
        FETCH C_GEO_ID INTO R_GEO_ID;
        CLOSE C_GEO_ID;

        PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'SFR','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
        ----- Création alertes
        --> Alerte 1
           -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
             -- dans le module CR MAD
           -- Cloture de l'alerte à la réception du CR MAD
       IF R_PM.ETATPM = 'DEPLOYE' THEN
         NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
       END IF;

       EXCEPTION
         WHEN OTHERS THEN
           plog.ERROR('Erreur lors de la création du PM via IPE 3.1','SQLERRM', SQLERRM);
           plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
           plog.full_call_stack('File_ID',R_PM.FILE_ID);
       END;
     END LOOP;
     COMMIT;
  END;


  -----------------------------------------------------------------------------------
  -- Création des PM à partir de l'IPE SFRA ZMD 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE CHK_N_CREATE_PM_SFRA_ZMD_31(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
  -- Récupération des PM qui n'existent pas dans ECO
  CURSOR C_VERIF_PM IS
  SELECT *
         FROM (SELECT DISTINCT i.REFERENCEPM,
                               i.NUMEROVOIEPM as NUMEROVOIEPM,
                               (SELECT btyp.CODVAL
                                  FROM BDMVAL btyp
                                 WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                   AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                               (SELECT bcomp.CODVAL
                                  FROM BDMVAL bcomp
                                 WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                   AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                               i.NOMVOIEPM,
                               (SELECT cmn.COD_INSEE
                                  FROM BDCOM cmn
                                 WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                               (SELECT DISTINCT pos.CODPTTCMN
                                  FROM BDCOMPTL pos
                                 WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                   AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                               eli.REFERENCEPRDM AS REFERENCENRO,
                               i.FILE_ID,
                               i.ETATPM
                          FROM PM_ELIGIBLES_SFR eli,
                               IPE_SFRA_ZMD_V31_TMP i
                         WHERE eli.REFERENCEPM = i.REFERENCEPM
                           AND NOT EXISTS (SELECT 1
                                             FROM PM p
                                            WHERE p.IDPM = i.REFERENCEPM)
        UNION ALL

                SELECT DISTINCT j.REFERENCEPM,
                            j.NUMEROVOIEPM as NUMEROVOIEPM,
                            (SELECT btyp.CODVAL
                               FROM BDMVAL btyp
                               WHERE UPPER(btyp.LIBVAL)  = UPPER(j.TYPEVOIEPM)
                                 AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                            (SELECT bcomp.CODVAL
                               FROM BDMVAL bcomp
                              WHERE UPPER(bcomp.LIBVAL)  = UPPER(j.COMPLEMENTVOIEPM)
                                AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                            j.NOMVOIEPM,
                            (SELECT cmn.COD_INSEE
                               FROM BDCOM cmn
                              WHERE cmn.COD_INSEE = j.CODEINSEEPM) AS CODEINSEEPM,
                            (SELECT DISTINCT pos.CODPTTCMN
                               FROM BDCOMPTL pos
                              WHERE pos.CODPTTCMN = j.CODEPOSTALPM
                                AND pos.COD_INSEE = j.CODEINSEEPM) AS CODEPOSTALPM,
                            (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = j.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                            cpn.REFERENCENRO,
                            j.FILE_ID,
                            j.ETATPM
                        FROM IPE_SFRA_ZMD_V31_TMP j,
                             CPN             cpn
                       WHERE cpn.REFERENCEPM     = j.REFERENCEPM
                         AND cpn.CODOI           = P_COD_OI
                         AND NOT EXISTS (SELECT 1
                                           FROM PM p
                                          WHERE p.IDPM = j.REFERENCEPM)
                         AND NOT EXISTS (SELECT 1
                                           FROM PM_ELIGIBLES_SFR eli
                                          WHERE eli.REFERENCEPM = j.REFERENCEPM)
                         AND EXISTS ( SELECT 1
                                        FROM SOUSCRIPTION s
                                       WHERE s.COD_INSEE = j.CODEINSEEPM
                                         AND s.COD_OI    = P_COD_OI)) A
  WHERE A.CODEINSEEPM IS NOT NULL
    AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL -- il faut qu'il existe au moins un code postal associé au code insee
    AND A.REFERENCENRO IS NOT NULL;

  CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
    SELECT GEO_ID
      FROM PM
     WHERE IDPM = vIDPM;
  R_GEO_ID C_GEO_ID%ROWTYPE;
  BEGIN
    -- Création du PM avec un etat adductable
    FOR R_PM IN C_VERIF_PM LOOP
      BEGIN
        NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                           P_NOMSIT    => R_PM.REFERENCEPM,
                           P_NUMVOI    => R_PM.NUMEROVOIEPM,
                           P_TYPVOI    => R_PM.TYPEVOIEPM,
                           P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                           P_NOMVOI    => R_PM.NOMVOIEPM,
                           P_COD_INSEE => R_PM.CODEINSEEPM,
                           P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                           P_COD_OI    => P_COD_OI,
                           P_IDNRO     => R_PM.REFERENCENRO,
                           P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                           P_NOMGEO_COLOC => NULL,
                           P_TYP_ZONE     => 'ZMD',
                           P_IS_ZA        => 1);

        OPEN C_GEO_ID(R_PM.REFERENCEPM);
        FETCH C_GEO_ID INTO R_GEO_ID;
        CLOSE C_GEO_ID;

        PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'SFR','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
        ----- Création alertes
        --> Alerte 1
           -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
             -- dans le module CR MAD
           -- Cloture de l'alerte à la réception du CR MAD
       IF R_PM.ETATPM = 'DEPLOYE' THEN
         NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
       END IF;

       EXCEPTION
         WHEN OTHERS THEN
           plog.ERROR('Erreur lors de la création du PM via IPE 3.1','SQLERRM', SQLERRM);
           plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
           plog.full_call_stack('File_ID',R_PM.FILE_ID);
       END;
     END LOOP;
     COMMIT;
  END;



  -----------------------------------------------------------------------------------
  -- Création des PM à partir de l'IPE TDF ZMD 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE CHK_N_CREATE_PM_TDF_ZMD_31(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
  -- Récupération des PM qui n'existent pas dans ECO
  CURSOR C_VERIF_PM IS
  SELECT *
         FROM (SELECT DISTINCT i.REFERENCEPM,
                               i.NUMEROVOIEPM as NUMEROVOIEPM,
                               (SELECT btyp.CODVAL
                                  FROM BDMVAL btyp
                                 WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                   AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                               (SELECT bcomp.CODVAL
                                  FROM BDMVAL bcomp
                                 WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                   AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                               i.NOMVOIEPM,
                               (SELECT cmn.COD_INSEE
                                  FROM BDCOM cmn
                                 WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                               (SELECT DISTINCT pos.CODPTTCMN
                                  FROM BDCOMPTL pos
                                 WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                   AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                               cpn.REFERENCENRO,
                               i.FILE_ID,
                               i.ETATPM
                          FROM CPN             cpn,
                               IPE_TDF_V31_TMP i
                         WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                           AND cpn.CODOI           = P_COD_OI
                           AND NOT EXISTS (SELECT 1
                                             FROM PM p
                                            WHERE p.IDPM = i.REFERENCEPM)
                           AND EXISTS ( SELECT 1
                                          FROM SOUSCRIPTION s
                                         WHERE s.COD_INSEE = i.CODEINSEEPM
                                           AND s.COD_OI    = P_COD_OI)) A

  WHERE A.CODEINSEEPM IS NOT NULL
    AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL; -- il faut qu'il existe au moins un code postal associé au code insee

  CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
    SELECT GEO_ID
      FROM PM
     WHERE IDPM = vIDPM;
  R_GEO_ID C_GEO_ID%ROWTYPE;
  BEGIN
    -- Création du PM avec un etat adductable
    FOR R_PM IN C_VERIF_PM LOOP
      BEGIN
        NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                           P_NOMSIT    => R_PM.REFERENCEPM,
                           P_NUMVOI    => R_PM.NUMEROVOIEPM,
                           P_TYPVOI    => R_PM.TYPEVOIEPM,
                           P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                           P_NOMVOI    => R_PM.NOMVOIEPM,
                           P_COD_INSEE => R_PM.CODEINSEEPM,
                           P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                           P_COD_OI    => P_COD_OI,
                           P_IDNRO     => R_PM.REFERENCENRO,
                           P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                           P_NOMGEO_COLOC => NULL,
                           P_TYP_ZONE     => 'ZMD',
                           P_IS_ZA        => 1);

        OPEN C_GEO_ID(R_PM.REFERENCEPM);
        FETCH C_GEO_ID INTO R_GEO_ID;
        CLOSE C_GEO_ID;

        PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'TDF','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
        ----- Création alertes
        --> Alerte 1
           -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
             -- dans le module CR MAD
           -- Cloture de l'alerte à la réception du CR MAD
       IF R_PM.ETATPM = 'DEPLOYE' THEN
         NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
       END IF;

       EXCEPTION
         WHEN OTHERS THEN
           plog.ERROR('Erreur lors de la création du PM via IPE 3.1','SQLERRM', SQLERRM);
           plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
           plog.full_call_stack('File_ID',R_PM.FILE_ID);
       END;
     END LOOP;
     COMMIT;
  END;

  ----------------------------------------------------------
  -- CHK_N_CREATE_PM_COVA_ZMD_31
  -- %PARAM P_COD_OI Code de l'OI
  ----------------------------------------------------------
  PROCEDURE CHK_N_CREATE_PM_COVA_ZMD_31(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
  -- Récupération des PM qui n'existent pas dans ECO
  CURSOR C_VERIF_PM IS
  SELECT *
         FROM (SELECT DISTINCT i.REFERENCEPM,
                               i.NUMEROVOIEPM as NUMEROVOIEPM,
                               (SELECT btyp.CODVAL
                                  FROM BDMVAL btyp
                                 WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                   AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                               (SELECT bcomp.CODVAL
                                  FROM BDMVAL bcomp
                                 WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                   AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                               i.NOMVOIEPM,
                               (SELECT cmn.COD_INSEE
                                  FROM BDCOM cmn
                                 WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                               (SELECT DISTINCT pos.CODPTTCMN
                                  FROM BDCOMPTL pos
                                 WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                   AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                               cpn.REFERENCENRO,
                               i.FILE_ID,
                               i.ETATPM
                          FROM CPN             cpn,
                               IPE_COVA_V31_TMP i
                         WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                           AND cpn.CODOI           = P_COD_OI
                           AND NOT EXISTS (SELECT 1
                                             FROM PM p
                                            WHERE p.IDPM = i.REFERENCEPM)
                           AND EXISTS ( SELECT 1
                                          FROM SOUSCRIPTION s
                                         WHERE s.COD_INSEE = i.CODEINSEEPM
                                           AND s.COD_OI    = P_COD_OI)) A

  WHERE A.CODEINSEEPM IS NOT NULL
    AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL; -- il faut qu'il existe au moins un code postal associé au code insee

  CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
    SELECT GEO_ID
      FROM PM
     WHERE IDPM = vIDPM;
  R_GEO_ID C_GEO_ID%ROWTYPE;
  BEGIN
    -- Création du PM avec un etat adductable
    FOR R_PM IN C_VERIF_PM LOOP
      BEGIN
        NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                           P_NOMSIT    => R_PM.REFERENCEPM,
                           P_NUMVOI    => R_PM.NUMEROVOIEPM,
                           P_TYPVOI    => R_PM.TYPEVOIEPM,
                           P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                           P_NOMVOI    => R_PM.NOMVOIEPM,
                           P_COD_INSEE => R_PM.CODEINSEEPM,
                           P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                           P_COD_OI    => P_COD_OI,
                           P_IDNRO     => R_PM.REFERENCENRO,
                           P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                           P_NOMGEO_COLOC => NULL,
                           P_TYP_ZONE     => 'ZMD',
                           P_IS_ZA        => 1);

        OPEN C_GEO_ID(R_PM.REFERENCEPM);
        FETCH C_GEO_ID INTO R_GEO_ID;
        CLOSE C_GEO_ID;

        PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'COV','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
        ----- Création alertes
        --> Alerte 1
           -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
             -- dans le module CR MAD
           -- Cloture de l'alerte à la réception du CR MAD
       IF R_PM.ETATPM = 'DEPLOYE' THEN
         NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
       END IF;

       EXCEPTION
         WHEN OTHERS THEN
           plog.ERROR('Erreur lors de la création du PM via IPE 3.1','SQLERRM', SQLERRM);
           plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
           plog.full_call_stack('File_ID',R_PM.FILE_ID);
       END;
     END LOOP;
     COMMIT;
  END;

  -----------------------------------------------------------------------------------
  -- Création des PM à partir de l'IPE AXIO ZMD 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE CHK_N_CREATE_PM_AXIO_ZMD_31(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
  -- Récupération des PM qui n'existent pas dans ECO
  CURSOR C_VERIF_PM IS
  SELECT *
         FROM (SELECT DISTINCT i.REFERENCEPM,
                               i.NUMEROVOIEPM as NUMEROVOIEPM,
                               (SELECT btyp.CODVAL
                                  FROM BDMVAL btyp
                                 WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                   AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                               (SELECT bcomp.CODVAL
                                  FROM BDMVAL bcomp
                                 WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                   AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                               i.NOMVOIEPM,
                               (SELECT cmn.COD_INSEE
                                  FROM BDCOM cmn
                                 WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                               (SELECT DISTINCT pos.CODPTTCMN
                                  FROM BDCOMPTL pos
                                 WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                   AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                               cpn.REFERENCENRO,
                               i.FILE_ID,
                               i.ETATPM
                          FROM CPN             cpn,
                               IPE_AXIO_V31_TMP i
                         WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                           AND cpn.CODOI           = P_COD_OI
                           AND NOT EXISTS (SELECT 1
                                             FROM PM p
                                            WHERE p.IDPM = i.REFERENCEPM)
                           AND EXISTS ( SELECT 1
                                          FROM SOUSCRIPTION s
                                         WHERE s.COD_INSEE = i.CODEINSEEPM
                                           AND s.COD_OI    = P_COD_OI)) A

  WHERE A.CODEINSEEPM IS NOT NULL
    AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL; -- il faut qu'il existe au moins un code postal associé au code insee

  CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
    SELECT GEO_ID
      FROM PM
     WHERE IDPM = vIDPM;
  R_GEO_ID C_GEO_ID%ROWTYPE;
  BEGIN
    -- Création du PM avec un etat adductable
    FOR R_PM IN C_VERIF_PM LOOP
      BEGIN
        NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                           P_NOMSIT    => R_PM.REFERENCEPM,
                           P_NUMVOI    => R_PM.NUMEROVOIEPM,
                           P_TYPVOI    => R_PM.TYPEVOIEPM,
                           P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                           P_NOMVOI    => R_PM.NOMVOIEPM,
                           P_COD_INSEE => R_PM.CODEINSEEPM,
                           P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                           P_COD_OI    => P_COD_OI,
                           P_IDNRO     => R_PM.REFERENCENRO,
                           P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                           P_NOMGEO_COLOC => NULL,
                           P_TYP_ZONE     => 'ZMD',
                           P_IS_ZA        => 1);

        OPEN C_GEO_ID(R_PM.REFERENCEPM);
        FETCH C_GEO_ID INTO R_GEO_ID;
        CLOSE C_GEO_ID;

        PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'AXE','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
        ----- Création alertes
        --> Alerte 1
           -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
             -- dans le module CR MAD
           -- Cloture de l'alerte à la réception du CR MAD
       IF R_PM.ETATPM = 'DEPLOYE' THEN
         NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
       END IF;

       EXCEPTION
         WHEN OTHERS THEN
           plog.ERROR('Erreur lors de la création du PM via IPE 3.1','SQLERRM', SQLERRM);
           plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
           plog.full_call_stack('File_ID',R_PM.FILE_ID);
       END;
     END LOOP;
     COMMIT;
  END;

  -----------------------------------------------------------------------------------
  -- Création des PM à partir de l'IPE ALTITUDE ZMD 3.1
  -----------------------------------------------------------------------------------

PROCEDURE CHK_N_CREATE_PM_ALTI_ZMD_31(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
-- Récupération des PM qui n'existent pas dans ECO
CURSOR C_VERIF_PM IS
SELECT *
       FROM (SELECT DISTINCT i.REFERENCEPM,
                             i.NUMEROVOIEPM as NUMEROVOIEPM,
                             (SELECT btyp.CODVAL
                                FROM BDMVAL btyp
                               WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                 AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                             (SELECT bcomp.CODVAL
                                FROM BDMVAL bcomp
                               WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                 AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                             i.NOMVOIEPM,
                             (SELECT cmn.COD_INSEE
                                FROM BDCOM cmn
                               WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                             (SELECT DISTINCT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                 AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                             cpn.REFERENCENRO,
                             i.FILE_ID,
                             i.ETATPM
                        FROM CPN             cpn,
                             IPE_ALTI_V31_TMP i
                       WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                         AND cpn.CODOI           = P_COD_OI
                         AND NOT EXISTS (SELECT 1
                                           FROM PM p
                                          WHERE p.IDPM = i.REFERENCEPM)
                         AND EXISTS ( SELECT 1
                                        FROM SOUSCRIPTION s
                                       WHERE s.COD_INSEE = i.CODEINSEEPM
                                         AND s.COD_OI    = P_COD_OI)) A

WHERE A.CODEINSEEPM IS NOT NULL
  AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL; -- il faut qu'il existe au moins un code postal associé au code insee

CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
  SELECT GEO_ID
    FROM PM
   WHERE IDPM = vIDPM;
R_GEO_ID C_GEO_ID%ROWTYPE;
BEGIN
  -- Création du PM avec un etat adductable
  FOR R_PM IN C_VERIF_PM LOOP
    BEGIN
      NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                         P_NOMSIT    => R_PM.REFERENCEPM,
                         P_NUMVOI    => R_PM.NUMEROVOIEPM,
                         P_TYPVOI    => R_PM.TYPEVOIEPM,
                         P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                         P_NOMVOI    => R_PM.NOMVOIEPM,
                         P_COD_INSEE => R_PM.CODEINSEEPM,
                         P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                         P_COD_OI    => P_COD_OI,
                         P_IDNRO     => R_PM.REFERENCENRO,
                         P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                         P_NOMGEO_COLOC => NULL,
                         P_TYP_ZONE     => 'ZMD',
                         P_IS_ZA        => 1);

      OPEN C_GEO_ID(R_PM.REFERENCEPM);
      FETCH C_GEO_ID INTO R_GEO_ID;
      CLOSE C_GEO_ID;

      PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'ALT','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
      ----- Création alertes
      --> Alerte 1
         -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
           -- dans le module CR MAD
         -- Cloture de l'alerte à la réception du CR MAD
     IF R_PM.ETATPM = 'DEPLOYE' THEN
       NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
     END IF;

     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via IPE 3.1','SQLERRM', SQLERRM);
         plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
         plog.full_call_stack('File_ID',R_PM.FILE_ID);
     END;
   END LOOP;
   COMMIT;
END;

  -----------------------------------------------------------------------------------
  -- Création des PM à partir de l'IPE Simpson ZMD 3.1
  -----------------------------------------------------------------------------------

  PROCEDURE CHK_N_CREATE_PM_SMP_ZMD_31(P_COD_OI      IN REF_OI_PRM.COD_OI%TYPE) IS
  -- Récupération des PM qui n'existent pas dans ECO
  CURSOR C_VERIF_PM IS
  SELECT *
         FROM (SELECT DISTINCT i.REFERENCEPM,
                               i.NUMEROVOIEPM as NUMEROVOIEPM,
                               (SELECT btyp.CODVAL
                                  FROM BDMVAL btyp
                                 WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                   AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                               (SELECT bcomp.CODVAL
                                  FROM BDMVAL bcomp
                                 WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                   AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                               i.NOMVOIEPM,
                               (SELECT cmn.COD_INSEE
                                  FROM BDCOM cmn
                                 WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                               (SELECT DISTINCT pos.CODPTTCMN
                                  FROM BDCOMPTL pos
                                 WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                   AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                               cpn.REFERENCENRO,
                               i.FILE_ID,
                               i.ETATPM
                          FROM CPN                 cpn,
                               IPE_SMP_ZMD_V31_TMP i
                         WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                           AND cpn.CODOI           = P_COD_OI
                           AND NOT EXISTS (SELECT 1
                                             FROM PM p
                                            WHERE p.IDPM = i.REFERENCEPM)
                           AND EXISTS ( SELECT 1
                                          FROM SOUSCRIPTION s
                                         WHERE s.COD_INSEE = i.CODEINSEEPM
                                           AND s.COD_OI    = P_COD_OI)) A

  WHERE A.CODEINSEEPM IS NOT NULL
    AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL; -- il faut qu'il existe au moins un code postal associé au code insee

  CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
    SELECT GEO_ID
      FROM PM
     WHERE IDPM = vIDPM;
  R_GEO_ID C_GEO_ID%ROWTYPE;
  BEGIN
    -- Création du PM avec un etat adductable
    FOR R_PM IN C_VERIF_PM LOOP
      BEGIN
        NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                           P_NOMSIT    => R_PM.REFERENCEPM,
                           P_NUMVOI    => R_PM.NUMEROVOIEPM,
                           P_TYPVOI    => R_PM.TYPEVOIEPM,
                           P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                           P_NOMVOI    => R_PM.NOMVOIEPM,
                           P_COD_INSEE => R_PM.CODEINSEEPM,
                           P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                           P_COD_OI    => P_COD_OI,
                           P_IDNRO     => R_PM.REFERENCENRO,
                           P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                           P_NOMGEO_COLOC => NULL,
                           P_TYP_ZONE     => 'ZMD',
                           P_IS_ZA        => 1);

        OPEN C_GEO_ID(R_PM.REFERENCEPM);
        FETCH C_GEO_ID INTO R_GEO_ID;
        CLOSE C_GEO_ID;

        PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'ORA','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
        ----- Création alertes
        --> Alerte 1
           -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
             -- dans le module CR MAD
           -- Cloture de l'alerte à la réception du CR MAD
       IF R_PM.ETATPM = 'DEPLOYE' THEN
         NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
       END IF;

       EXCEPTION
         WHEN OTHERS THEN
           plog.ERROR('Erreur lors de la création du PM via IPE 3.1','SQLERRM', SQLERRM);
           plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
           plog.full_call_stack('File_ID',R_PM.FILE_ID);
       END;
     END LOOP;
     COMMIT;
  END;


  -----------------------------------------------------------------------------------
  -- Création des PM à partir de l'IPE Simpson ZSP 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE CHK_N_CREATE_PM_SMP_ZSP_31(P_COD_OI      IN REF_OI_PRM.COD_OI%TYPE) IS
  -- Récupération des PM qui n'existent pas dans ECO
  CURSOR C_VERIF_PM IS
  SELECT *
         FROM (SELECT DISTINCT i.REFERENCEPM,
                               i.NUMEROVOIEPM as NUMEROVOIEPM,
                               (SELECT btyp.CODVAL
                                  FROM BDMVAL btyp
                                 WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                   AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                               (SELECT bcomp.CODVAL
                                  FROM BDMVAL bcomp
                                 WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                   AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                               i.NOMVOIEPM,
                               (SELECT cmn.COD_INSEE
                                  FROM BDCOM cmn
                                 WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                               (SELECT DISTINCT pos.CODPTTCMN
                                  FROM BDCOMPTL pos
                                 WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                   AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                               cpn.REFERENCENRO,
                               i.FILE_ID,
                               i.ETATPM
                          FROM CPN                 cpn,
                               IPE_SMP_ZSP_V31_TMP i
                         WHERE NOT EXISTS (SELECT 1
                                             FROM LST_CMN_ZTD_ZSP l
                                            WHERE l.CODE_INSEE = i.CODEINSEEPM)
                           AND cpn.REFERENCEPM     = i.REFERENCEPM
                           AND cpn.CODOI           = P_COD_OI
                           AND NOT EXISTS (SELECT 1
                                             FROM PM p
                                            WHERE p.IDPM = i.REFERENCEPM)) A

  WHERE A.CODEINSEEPM IS NOT NULL
    AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL; -- il faut qu'il existe au moins un code postal associé au code insee

  CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
    SELECT GEO_ID
      FROM PM
     WHERE IDPM = vIDPM;
  R_GEO_ID C_GEO_ID%ROWTYPE;
  BEGIN
    -- Création du PM avec un etat adductable
    FOR R_PM IN C_VERIF_PM LOOP
      BEGIN
        NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                           P_NOMSIT    => R_PM.REFERENCEPM,
                           P_NUMVOI    => R_PM.NUMEROVOIEPM,
                           P_TYPVOI    => R_PM.TYPEVOIEPM,
                           P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                           P_NOMVOI    => R_PM.NOMVOIEPM,
                           P_COD_INSEE => R_PM.CODEINSEEPM,
                           P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                           P_COD_OI    => P_COD_OI,
                           P_IDNRO     => R_PM.REFERENCENRO,
                           P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                           P_NOMGEO_COLOC => NULL,
                           P_TYP_ZONE     => 'ZMD',
                           P_IS_ZA        => 1);

        OPEN C_GEO_ID(R_PM.REFERENCEPM);
        FETCH C_GEO_ID INTO R_GEO_ID;
        CLOSE C_GEO_ID;

        PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id,'ORA','CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
        ----- Création alertes
        --> Alerte 1
           -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
             -- dans le module CR MAD
           -- Cloture de l'alerte à la réception du CR MAD
       IF R_PM.ETATPM = 'DEPLOYE' THEN
         NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
       END IF;

       EXCEPTION
         WHEN OTHERS THEN
           plog.ERROR('Erreur lors de la création du PM via IPE ZSP 3.1','SQLERRM', SQLERRM);
           plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
           plog.full_call_stack('File_ID',R_PM.FILE_ID);
       END;
     END LOOP;
     COMMIT;
  END;
PROCEDURE CHK_N_CREATE_PM_SIEA_ZMD_31(P_COD_OI IN REF_OI_PRM.COD_OI%TYPE) IS
  -- Récupération des PM qui n'existent pas dans ECO
  CURSOR C_VERIF_PM IS
  SELECT *
         FROM (SELECT DISTINCT i.REFERENCEPM,
                               i.NUMEROVOIEPM as NUMEROVOIEPM,
                               (SELECT btyp.CODVAL
                                  FROM BDMVAL btyp
                                 WHERE UPPER(btyp.LIBVAL)  = UPPER(i.TYPEVOIEPM)
                                   AND btyp.LSTVAL_ID     = 'TYPVOI' ) AS TYPEVOIEPM,
                               (SELECT bcomp.CODVAL
                                  FROM BDMVAL bcomp
                                 WHERE UPPER(bcomp.LIBVAL)  = UPPER(i.COMPLEMENTVOIEPM)
                                   AND bcomp.LSTVAL_ID     = 'CMPVOI' ) AS COMPLEMENTVOIEPM,
                               i.NOMVOIEPM,
                               (SELECT cmn.COD_INSEE
                                  FROM BDCOM cmn
                                 WHERE cmn.COD_INSEE = i.CODEINSEEPM) AS CODEINSEEPM,
                               (SELECT DISTINCT pos.CODPTTCMN
                                  FROM BDCOMPTL pos
                                 WHERE pos.CODPTTCMN = i.CODEPOSTALPM
                                   AND pos.COD_INSEE = i.CODEINSEEPM) AS CODEPOSTALPM,
                             (SELECT pos.CODPTTCMN
                                FROM BDCOMPTL pos
                               WHERE pos.COD_INSEE = i.CODEINSEEPM
                                 AND ROWNUM        = 1) AS CODEPOSTALPM_2,
                               cpn.REFERENCENRO,
                               i.FILE_ID,
                               i.ETATPM
                          FROM CPN             cpn,
                               IPE_SIEA_V31_TMP i
                         WHERE cpn.REFERENCEPM     = i.REFERENCEPM
                           AND cpn.CODOI           = P_COD_OI
                           AND NOT EXISTS (SELECT 1
                                             FROM PM p
                                            WHERE p.IDPM = i.REFERENCEPM)
                           AND EXISTS ( SELECT 1
                                          FROM SOUSCRIPTION s
                                         WHERE s.COD_INSEE = i.CODEINSEEPM
                                           AND s.COD_OI    = P_COD_OI)) A

  WHERE A.CODEINSEEPM IS NOT NULL
    AND NVL(A.CODEPOSTALPM, A.CODEPOSTALPM_2) IS NOT NULL; -- il faut qu'il existe au moins un code postal associé au code insee

  CURSOR C_GEO_ID(vIdPM VARCHAR2) IS
    SELECT GEO_ID
      FROM PM
     WHERE IDPM = vIDPM;
  R_GEO_ID C_GEO_ID%ROWTYPE;
BEGIN
  -- Création du PM avec un etat adductable
  FOR R_PM IN C_VERIF_PM LOOP
    BEGIN
      NAT_FF1.NEW_PM_FF1(P_IDPM      => R_PM.REFERENCEPM,
                         P_NOMSIT    => R_PM.REFERENCEPM,
                         P_NUMVOI    => R_PM.NUMEROVOIEPM,
                         P_TYPVOI    => R_PM.TYPEVOIEPM,
                         P_CMPVOI    => R_PM.COMPLEMENTVOIEPM,
                         P_NOMVOI    => R_PM.NOMVOIEPM,
                         P_COD_INSEE => R_PM.CODEINSEEPM,
                         P_CODPTTCMN => NVL(R_PM.CODEPOSTALPM, R_PM.CODEPOSTALPM_2),
                         P_COD_OI    => P_COD_OI,
                         P_IDNRO     => R_PM.REFERENCENRO,
                         P_ETAPM     => NAT_FF1.P_ADDUCTABLE,
                         P_NOMGEO_COLOC => NULL,
                         P_TYP_ZONE     => 'ZMD',
                         P_IS_ZA        => 1);

      OPEN C_GEO_ID(R_PM.REFERENCEPM);
      FETCH C_GEO_ID INTO R_GEO_ID;
      CLOSE C_GEO_ID;

      PKG_OS1_SITE.INSERTOPRSITE(R_GEO_ID.geo_id, NAT_FTTH_OI.P_OC_SIEA,'CHA',NULL,'PM_', R_PM.REFERENCEPM,NULL,NULL);
      ----- Création alertes
      --> Alerte 1
         -- Si le PM est créé avec le champs ETATPM = DEPLOYE, alors création alerte
           -- dans le module CR MAD
         -- Cloture de l'alerte à la réception du CR MAD
     IF R_PM.ETATPM = 'DEPLOYE' THEN
       NAT_FF1_CR_MAD_PM.CTRL_CRMAD_PM_DPL(R_PM.REFERENCEPM);
     END IF;

     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la création du PM via IPE SIEA 3.1','SQLERRM', SQLERRM);
         plog.full_error_backtrace('Referencepm',R_PM.REFERENCEPM);
         plog.full_call_stack('File_ID',R_PM.FILE_ID);
     END;
   END LOOP;
   COMMIT;
END;
------------------------------------------------------------------------------------
-- Traitement IPE 3.1
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_IPE_V31(P_CODOI         IN REF_OI.COD_OI%TYPE,
                          P_TYPE          IN VARCHAR2,
                          P_FILE_ID       IN FILE_IO.FILE_ID%TYPE,
                          P_COD_PART_FLUX IN PART_FLX.COD_PART_FLUX%TYPE DEFAULT NULL) IS
-- Les informations du fichier
CURSOR C_INFO_FIC IS
  SELECT fio.NOM_FIC,
         fio.REP_FIC,
         fio.EMETTEUR
    FROM FILE_IO fio
   WHERE fio.FILE_ID = P_FILE_ID;
R_INFO_FIC C_INFO_FIC%ROWTYPE;

CURSOR C_PRJPM (vRefPM IPE.REFERENCEPM%TYPE) IS
  SELECT prj.PRJPM_ID,
         prj.PART_ADD,
         pm.IDPM
    FROM ETAPRJPM eta,
         PRJPM prj,
         PM    pm
   WHERE pm.IDPM         = vRefPM
     AND prj.GEO_ID      = pm.GEO_ID
     AND eta.ETAPRJPM_ID = prj.ETAPRJPM_ID
     AND eta.ETAPRJPM    <> 'ABN';
R_PRJPM   C_PRJPM%ROWTYPE;
vFoundPrj BOOLEAN;
vExistingAdrBlkGelOI VARCHAR2(20);

CURSOR C_PMOFSFOR (vRefPM IPE.REFERENCEPM%TYPE) IS
  SELECT 1
    FROM LST_PM_OF_TO_SFOR lstp
   WHERE lstp.IDPM         = vRefPM ;
R_PMOFSFOR   C_PMOFSFOR%ROWTYPE;
vFoundPMOFSFOR BOOLEAN;

V_CUR       SYS_REFCURSOR;
R_CUR       IPE_FT_ZTD_V31_TMP%ROWTYPE;

V_CUR_NB    SYS_REFCURSOR;
V_CUR_NB_DPL SYS_REFCURSOR;
V_CUR_NB_DOUBLON_IMB  SYS_REFCURSOR;


vtableName  VARCHAR2(100);
vNB_REC     NUMBER;
vNB_REC_DPL NUMBER;
vCtrlNbRec  NUMBER;
vCtrlAllTol NUMBER;
vControleOC NUMBER;
vImm_id     NUMBER;
vAdr_Imm_Oi_Id      NUMBER;
vIS_NEW_FOR_OI_ONLY NUMBER;
vIS_MAJ_OSS         NUMBER;
vNomIfcOut          VARCHAR2(100);
vId_Preparation     NUMBER;
v_Fileio_OUT        NUMBER;
vProtocol           VARCHAR2(5);
vCtrlAdr            NUMBER;
vCtrlAdrItg         NUMBER;
vCtrlAdrItg_za      NUMBER;
vCtrlAdr_za         NUMBER;
v_compt             NUMBER;
vHexacle            HEXA_BTL.HEXABTL%TYPE;
vDatMajHexaBytel    DATE;
vHexaExistingAdrBlk ADR_IMM_OI.CODEADRESSEIMMEUBLE%TYPE;
vNB_DOUBLON_IMB     NUMBER;

-----------------------------------------
-- les variables pour synthèse traitement
vNBLGNIPE NUMBER;
vNBLGNTRT NUMBER;
-----------------------------------------
  CURSOR C_VERIF_BLK(P_IDENTIFIANTIMMEUBLE ADR_BLK.IDENTIFIANTIMMEUBLE%TYPE) IS
  SELECT 1
    FROM ADR_BLK a
     WHERE a.IDENTIFIANTIMMEUBLE = P_IDENTIFIANTIMMEUBLE
     AND a.BLK_VALID = 1
       AND a.CODOI     = P_CODOI;
R_VERIF_BLK C_VERIF_BLK%ROWTYPE;
vFoundBlk   BOOLEAN;
vBlk        VARCHAR2(3);

  CURSOR C_VERIF_GEL_BLK(P_IDENTIFIANTIMMEUBLE ADR_BLK.IDENTIFIANTIMMEUBLE%TYPE,P_MTFBLK ADR_BLK.MTFBLK%TYPE) IS
    SELECT 1
      FROM ADR_BLK a
     WHERE a.IDENTIFIANTIMMEUBLE   = P_IDENTIFIANTIMMEUBLE
       AND a.BLK_VALID = 1
       AND a.MTFBLK    = P_MTFBLK
       AND a.CODOI     = P_CODOI;
  R_VERIF_GEL_BLK C_VERIF_GEL_BLK%ROWTYPE;
  vFoundBlkGel    BOOLEAN;
  vBlkGel         VARCHAR2(3);
--------------------------------------------------
-- récupération de la table temporaire
CURSOR C_GET_TMP IS
  SELECT (CASE P_TYPE
            WHEN 'ZTD' THEN
              flx.IPE_ZTD_TMP
            WHEN 'ZSP' THEN
              flx.IPE_ZSP_TMP
            ELSE
              flx.IPE_ZMD_TMP
         END) AS IPE_TMP,
         flx.COD_PART_FLUX,
         DECODE(flx.COD_PART_FLUX, 'ZTD', 'OF_',
                                   'ZMD', 'AMI',
                                   'ZSP', 'AMI',
                                   'SDIF', 'AST',
                                   'AXIO', 'RIP',
                                   'ALTI', 'ALT',
                                   'COVA', 'COV',
                                   'TDF', 'TDF',
                                   'SIEA', 'SIA',
                                   'SFRA', DECODE(roi.RIP, 1, 'RSF', 'ZAS'),
                                   flx.COD_PART_FLUX) AS PART_ADD_PRJ
    FROM PART_FLX   flx,
         REF_OI_PRM rop,
         REF_OI     roi
   WHERE roi.COD_OI = P_CODOI
     AND rop.COD_OI = roi.COD_OI
     AND rop.PRTCL  = '3.1'
     AND rop.OBS    = 0
     AND flx.COD_PART_FLUX = rop.COD_PART_FLUX;
R_GET_TMP C_GET_TMP%ROWTYPE;
vFoundTmp BOOLEAN;
vPartFlx  PART_FLX.COD_PART_FLUX%TYPE;
vPartAddPrj PRJPM.PART_ADD%TYPE;
  vSTATE VARCHAR2(30);


CURSOR C_GET_PART_FLUX IS
  SELECT (CASE r.COD_PART_FLUX
            WHEN 'FTEL' THEN
               CASE WHEN r.Cod_Oi = 'FTEL' THEN
                    'AMI'
               ELSE 'OFC' END
            WHEN 'SDIF' THEN
              'AST'
            WHEN 'AXIO' THEN
              'RIP'
            WHEN 'ALTI' THEN
              'ALT'
            WHEN 'COVA' THEN
              'COV'
            WHEN 'TDF' THEN
              'TDF'
            WHEN 'SFRA' THEN
              CASE
                WHEN roi.RIP = 1 THEN
                  'RSF'
                WHEN r.Cod_Oi = 'SFOR' THEN
                    'AMI'
                ELSE 'ZAS'
              END
            WHEN 'SIEA' THEN
              'SIA'
          END)  AS COD_PART_ADDU
    FROM REF_OI roi,
         REF_OI_PRM r
   WHERE r.COD_OI = P_CODOI
     AND r.OBS  = 0
     AND roi.COD_OI = r.COD_OI;
  R_GET_PART_FLUX C_GET_PART_FLUX%ROWTYPE;

----------------------------------------------------
-- récupération du PM si son état fait partie des états
-- sélectionnés pour le lancement de la commande unitaire
CURSOR C_GET_PM_ETAT (pPmId VARCHAR2) IS
  SELECT DISTINCT i.REFERENCEPM
    FROM IPE i
   WHERE i.REFERENCEPM = pPmId
     AND i.ETATPM IN (SELECT val.LIBVAL
                        FROM REF_OI_CMD_PRM prm_oi,
                             BDMVAL         val
                       WHERE prm_oi.ETAPM_IPE = val.CODVAL
                         AND val.LSTVAL_ID = 'ETAIPE'
                         AND prm_oi.COD_OI = i.CODOI
                         AND prm_oi.ACTIF = 1);
R_GET_PM_ETAT C_GET_PM_ETAT%ROWTYPE;
vFoundPmEtat  BOOLEAN;



vMajOss NUMBER;

vRunCmd NUMBER(1);
vPmEcours IPE.REFERENCEPM%TYPE;
vREF_CNSLT SOUSCRIPTION.REF_CNSLT%TYPE;
vAdresse   PM_CMD.ADR_SIG%TYPE;
vCATRACLGMT_CAL     ADR_IMM_OI.CATRACLGMT_CAL%TYPE;

CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID,
         f.NOM_FIC
    FROM FILE_IO f
   WHERE f.FILE_ID = P_FILE_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
vFromZsp NUMBER(1);

CURSOR C_IS_ZSP_ZTD(vCODEINSEEPM LST_CMN_ZTD_ZSP.CODE_INSEE%TYPE) IS
  SELECT 1
    FROM LST_CMN_ZTD_ZSP
   WHERE CODE_INSEE = vCODEINSEEPM;
R_IS_ZSP_ZTD C_IS_ZSP_ZTD%ROWTYPE;
vFoundZspZtD BOOLEAN;
vType        VARCHAR2(3);
CURSOR C_VERIF_REFCONSUL_14(vRefConsul VARCHAR2) IS
SELECT 1
  FROM DUAL
 WHERE REGEXP_LIKE(UPPER(vRefConsul),UPPER('*.*S-*.*'));
R_VERIF_REFCONSUL_14 C_VERIF_REFCONSUL_14%ROWTYPE;
vFoundRefconsul14 BOOLEAN;
  vMtfBlK VARCHAR2(5);
  vCodOI REF_OI.COD_OI%TYPE;

CURSOR C_CHK_BLK(P_IDENTIFIANTIMMEUBLE IN ADR_BLK.IDENTIFIANTIMMEUBLE%TYPE,
                 P_HEXACLE             IN ADR_BLK.HEXACLE%TYPE) IS
 SELECT 1
   FROM ADR_BLK a
  WHERE nvl(a.IDENTIFIANTIMMEUBLE,1) = nvl(P_IDENTIFIANTIMMEUBLE,1)
    AND nvl(a.HEXACLE,1)             = nvl(P_HEXACLE,1)
    AND a.BLK_VALID = 1
    AND a.MTFBLK NOT IN ('GAF','GAT','GAS','GAA','GA' ,'GAS', 'GAL','AGO','GAI');
R_CHK_BLK   C_CHK_BLK%ROWTYPE;

  v_score_dep_imb NUMBER;
  v_score_dep_pm NUMBER;
  v_score_blk NUMBER;
  v_score NUMBER;
  vMotifBlocage ADR_IMM_OI.MOTIFBLOCAGE%TYPE;
  vOriginAdrBlk ADR_IMM_OI.ORIGINEBLOCAGE%TYPE;

BEGIN
  OPEN C_INFO_IFC;
  FETCH C_INFO_IFC INTO R_INFO_IFC;
  CLOSE C_INFO_IFC;

  BEGIN
    DELETE FROM FIC_FTTH WHERE FILE_ID = P_FILE_ID;
    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => NULL,
                         P_CODOI    => P_CODOI,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
     COMMIT;
   EXCEPTION
     WHEN OTHERS THEN
     plog.info('POST TRAITEMENT IPE : Erreur FIC_FTTH',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
   END;
  v_compt := 0;
  vRunCmd := 0;
  vPmEcours := 'INIT';

  -- Récupération de la table temporaire
  OPEN C_GET_TMP;
  FETCH C_GET_TMP INTO R_GET_TMP;
  vFoundTmp := C_GET_TMP%FOUND;
  CLOSE C_GET_TMP;

  IF vFoundTmp THEN
    vtableName :=  R_GET_TMP.IPE_TMP;
    vPartFlx   :=  R_GET_TMP.COD_PART_FLUX;
  END IF;

  IF vPartFlx IS NOT NULL THEN
    CASE vPartFlx
      -- Transfert du fichier
      WHEN 'FTEL' THEN
        GEN_REBOND( 'FTTH_SIO2_FT_IPE_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,NULL);
      WHEN 'SFRA' THEN
        GEN_REBOND( 'FTTH_SIO2_SFR_IPE_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,NULL);
      WHEN 'AXIO' THEN
        GEN_REBOND( 'FTTH_SIO2_AXNE_IPE_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,NULL);
      WHEN 'FREE' THEN
        GEN_REBOND( 'FTTH_SIO2_FREE_IPE_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,NULL);
      WHEN 'COVA' THEN
        GEN_REBOND( 'FTTH_SIO2_COVA_IPE_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,NULL);
      WHEN 'ALTI' THEN
        GEN_REBOND( 'FTTH_SIO2_ALTI_IPE_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,NULL);
      WHEN 'TDF' THEN
        GEN_REBOND( 'FTTH_SIO2_TDF_IPE_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,NULL);
      WHEN NAT_FTTH_OI.P_CODOI_SIMPSON THEN
        GEN_REBOND( 'FTTH_SIO2_SMP_IPE_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,NULL);
      WHEN 'SIEA' THEN
        GEN_REBOND( 'FTTH_SIO2_SIEA_IPE_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,NULL);
      END CASE;
  END IF;

  CASE P_TYPE
    WHEN 'ZTD' THEN
      vProtocol := '3.1';
      vFromZsp  := 0;
      vType     := 'ZTD';
    WHEN 'ZSP' THEN
      vProtocol := 'ZSP';
      vFromZsp  := 1;
      vType     := 'ZSP';
    ELSE
      vProtocol := 'ZMD';
      vFromZsp  := 0;
      vType     := 'ZMD';
  END CASE;

  V_CUR_NB := NAT_FTTH_OI.GET_FTTH_NB_REC(vtableName);
  LOOP
    FETCH V_CUR_NB INTO vNB_REC;
    EXIT WHEN V_CUR_NB%NOTFOUND;
  END LOOP;

  -- On récupère le nombre de lignes DEPLOYE
  V_CUR_NB_DPL := NAT_FTTH_OI.GET_FTTH_NB_REC_DPL(vtableName);
  LOOP
    FETCH V_CUR_NB_DPL INTO vNB_REC_DPL;
    EXIT WHEN V_CUR_NB_DPL%NOTFOUND;
  END LOOP;

  -- On récupère le nombre de doublon IMB
  V_CUR_NB_DOUBLON_IMB := NAT_FTTH_OI.GET_FTTH_NB_IMB_EN_DOUBLON(vtableName);
  LOOP
    FETCH V_CUR_NB_DOUBLON_IMB INTO vNB_DOUBLON_IMB;
    EXIT WHEN V_CUR_NB_DOUBLON_IMB%NOTFOUND;
  END LOOP;

  plog.info('POST TRAITEMENT IPE : Calcul nombre des IMB en doublon du fichier',
                     'FILEID', P_FILE_ID,
                     'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'),
                     'Nombre des IMB en doublons dans le fichier', vNB_DOUBLON_IMB);


  -- Controle IPE
  -- contrôle du nombre de lignes du nouveau fichier vs la base
  IF P_TYPE = 'ZSP' THEN
    vCtrlNbRec := 1;
    plog.info('POST TRAITEMENT IPE : Pas de Contrôle nombre de lignes DEPLOYE du fichier',
                   'FILEID', P_FILE_ID,
                   'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'),
                   'Résultat', 'OK');
  ELSE
    plog.info('POST TRAITEMENT IPE : Début Contrôle nombre de lignes DEPLOYE du fichier',
                     'FILEID', P_FILE_ID,
                     'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'),
                     'Nombre de lignes DEPLOYE dans le fichier', vNB_REC_DPL);
    vCtrlNbRec := NAT_FF1_CTRL_IPE.CTRL_NB_RECORDS_IPE (P_CODOI,
                                                        vProtocol,
                                                        vNB_REC_DPL,
                                                        P_FILE_ID);
    plog.info('POST TRAITEMENT IPE : Fin Contrôle nombre de lignes DEPLOYE du fichier',
                     'FILEID', P_FILE_ID,
                     'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'),
                     'Résultat', (CASE WHEN vCtrlNbRec=1
                                       THEN 'OK'
                                       ELSE 'NOK'
                                  END));
  END IF;
  vNBLGNIPE := vNB_REC;
  vNBLGNTRT := 0;
  -- contrôle tolérence sur :
    -- Code Adresse Immeuble
    -- Code Insee
    -- Code Rivoli
    -- Num Voie
    -- Ecart Date Mes/EtatPM
  plog.info('POST TRAITEMENT IPE : Début Contrôle tolérance',
                   'FILEID', P_FILE_ID,
                   'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  vCtrlAllTol := NAT_FF1_CTRL_IPE.CTRL_ALL_TOLERANCE(P_CODOI,
                                                     P_TYPE,
                                                     P_FILE_ID,
                                                     '3.1',
                                                     vNB_REC_DPL
                                                     );

  plog.info('POST TRAITEMENT IPE : Fin Contrôle tolérance',
                   'FILEID', P_FILE_ID,
                   'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'),
                   'Résultat', (CASE WHEN vCtrlAllTol=1
                                     THEN 'OK'
                                     ELSE 'NOK'
                                END));


  IF vCtrlNbRec = 1 AND vCtrlAllTol = 1 THEN
    plog.info('POST TRAITEMENT IPE : Début Suppression IPE',
                     'FILEID', P_FILE_ID,
                     'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    CASE P_TYPE
      WHEN 'ZSP' THEN
        DELETE FROM IPE i
         WHERE i.CODOI    = NAT_FTTH_OI.P_CODOI_SIMPSON
           AND i.FROM_ZSP = 1
           AND i.REFERENCEPM IS NULL;
      ELSE
        DELETE FROM IPE i
         WHERE i.CODOI  = P_CODOI
           AND i.TYPZON = P_TYPE
           AND (i.FROM_ZSP IS NULL OR i.FROM_ZSP = 0)
           AND i.REFERENCEPM IS NULL;
     END CASE;
     plog.info('POST TRAITEMENT IPE : Fin Suppression IPE ',
                     'FILEID', P_FILE_ID,
                     'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

      OPEN C_INFO_FIC;
      FETCH C_INFO_FIC INTO R_INFO_FIC;
      CLOSE C_INFO_FIC;

      -- Récupérer le partenaire
      OPEN C_GET_PART_FLUX;
      FETCH C_GET_PART_FLUX INTO R_GET_PART_FLUX;
      CLOSE C_GET_PART_FLUX;

      V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(vtableName);
      plog.info('POST TRAITEMENT IPE : Début itération IPE',
                       'FILEID', P_FILE_ID,
                       'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    LOOP
      FETCH V_CUR INTO R_CUR;
      EXIT WHEN V_CUR%NOTFOUND;
      BEGIN
      ----- Vérif dans le cas ZSP
      IF P_TYPE = 'ZSP' THEN
        OPEN C_IS_ZSP_ZTD(R_CUR.CODEINSEEPM);
        FETCH C_IS_ZSP_ZTD INTO R_IS_ZSP_ZTD;
        vFoundZspZtD := C_IS_ZSP_ZTD%FOUND;
        CLOSE C_IS_ZSP_ZTD;

        IF vFoundZspZtD THEN
          vType := 'ZTD';
        ELSE
          vType := 'ZMD';
        END IF;
      ELSE
        vType := P_TYPE;
      END IF;
      vCodOI := P_CODOI;

      -- Vérification hexacle et remplacement
      --> l'hexa de l'IPE doit être null
      --> Sur un immeuble déployé
      --> dont le code insee du PM est dans le module souscription
      IF R_CUR.CODEADRESSEIMMEUBLE IS NULL AND
         R_CUR.IDENTIFIANTIMMEUBLE IS NOT NULL AND
         R_CUR.CODEINSEEIMMEUBLE   IS NOT NULL THEN
        vHexacle := APP_FF1_ADR.GET_HEXA_CLE_BYTEL(P_NUMEROVOIEIMMEUBLE     => R_CUR.NUMEROVOIEIMMEUBLE,
                                                   P_COMPLEMENTVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                   P_TYPEVOIEIMMEUBLE       => R_CUR.TYPEVOIEIMMEUBLE,
                                                   P_NOMVOIEIMMEUBLE        => R_CUR.NOMVOIEIMMEUBLE,
                                                   P_CODEINSEEIMMEUBLE      => R_CUR.CODEINSEEIMMEUBLE,
                                                   P_CODERIVOLIIMMEUBLE     => R_CUR.CODERIVOLIIMMEUBLE);
        vDatMajHexaBytel := sysdate;
      ELSE
        vHexacle := R_CUR.CODEADRESSEIMMEUBLE;
        vDatMajHexaBytel := NULL;
      END IF;

      v_compt := v_compt + 1;
      IF R_CUR.REFERENCEPM IS NOT NULL THEN
        IF vPmEcours <> R_CUR.REFERENCEPM THEN
          -- Nettoyage de la table IPE pour le PM Concerné
          DELETE FROM IPE i
           WHERE i.CODOI  = vCodOI
             AND i.TYPZON = vTYPE
             AND i.REFERENCEPM = R_CUR.REFERENCEPM;
          -- Nettoyage de la base d'adresses des données CR MAD
          /*DELETE FROM ADR_IMM_OI a
           WHERE a.REFERENCEPM = R_CUR.REFERENCEPM
             AND a.SRCADR      = 'MAD'; --> Pour la gestion delta Export OSS */
          -- Alerte 2
            --> Si l'étatPM = DEPLOYE dans l'IPE et etat PM dans la base adresse = EN COURS DE DEPLOIEMENT, alors alerte
            --> Dans le module CR MAD
            --> Cloture de l'alerte à la réception du  CR MAD associé
         NAT_FF1_CR_MAD_PM.CTRL_CRMAD_ETAPM (R_CUR.REFERENCEPM,
                                             R_CUR.ETATPM);
          --  Alerte 3
            --> Si l'étatPM = EN COURS DE DEPLOIEMENT dans l'IPE et DEPLOYE dans la base adresse, alors alerte
            --> Dans le module CR MAD
            --> Cloture à la réception d'un nouvel IPE avec l'état du PM à DEPLOYE
         NAT_FF1_CR_MAD_PM.CTRL_CRMAD_ETAPM_NDPL(R_CUR.REFERENCEPM,
                                                 R_CUR.ETATPM);
        END IF;
      END IF;

      -- L'adresse peut-elle être intégrée ?
      vCtrlAdrItg := NAT_FF1_CTRL_ADR.CTRL_ITG_ADR(vHexacle,
                                                   R_CUR.CODEINSEEIMMEUBLE,
                                                   R_CUR.IDENTIFIANTIMMEUBLE);
      --Tous les controles des alertes
      vCtrlAdr := 0;
      IF (vCtrlAdrItg = 1) THEN
        -- Taille code adresse (intégré ? fermé manuellement)
        -- Format code adresse (Sauf SFR, fermé manuellement)
        -- Etat Immeuble
        -- Coherence etat immeuble
        -- nombre de logements PM (doit etre intégré)
       -- Nouveaux contrôles :
       -- 6 Si le PM est à l'état déployé dans l'IPE
          -- si l'adresse associée est à l'état déployé, alors on vérifie sa présence dans le réf adresses à l'état déployé
          --> Par contre c'est une alerte non bloquante dans le module adresse
       -- 7 Si le PM de l'adresse n'est pas à l'état déployé dans l'IPE reçu,
          -- alors on vérifie que l'état de l'adresse n'est pas à l'état déployé dans l'IPE reçu
               --> Sinon alerte non bloquante dans le module adresse
        vCtrlAdr := NAT_FF1_CTRL_ADR.CTRL_ALL_ADRESSE(vCodOI,
                                                      R_CUR.REFERENCEPM,
                                                      vHexacle,
                                                      R_CUR.CODEINSEEIMMEUBLE,
                                                      R_CUR.CODERIVOLIIMMEUBLE,
                                                      R_CUR.ETATIMMEUBLE,
                                                      R_CUR.ETATPM,
                                                      R_CUR.NOMBRELOGEMENTSPM,
                                                      R_CUR.NUMEROVOIEIMMEUBLE,
                                                      R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                      R_CUR.IDENTIFIANTIMMEUBLE,
                                                      R_CUR.BATIMENTIMMEUBLE);

        IF R_CUR.REFERENCEPM IS NOT NULL THEN
          IF vPmEcours <> R_CUR.REFERENCEPM THEN --> Si on traite le PM la première fois
            OPEN C_PRJPM(R_CUR.REFERENCEPM);
            FETCH C_PRJPM INTO R_PRJPM;
            vFoundPrj := C_PRJPM%FOUND;
            CLOSE C_PRJPM;

            IF vFoundPrj THEN
              IF vType = 'ZTD' THEN
                CASE R_PRJPM.PART_ADD
                  WHEN 'SFR' THEN
                    vControleOC := NAT_FF1_CTRL.CTRL_IPE_DATE_OC(R_PRJPM.PRJPM_ID ,R_CUR.REFERENCEPM, '2.1');
                  WHEN 'OF_' THEN
                    vControleOC := NAT_FF1_CTRL_OF.CTRL_OC_DATE_OC(R_PRJPM.PRJPM_ID ,R_CUR.REFERENCEPM, '2.1');
                  WHEN 'SEQ' THEN
                    vControleOC := NAT_FF1_CTRL_SEQ.CTRL_OC_DATE_OC(R_PRJPM.PRJPM_ID ,R_CUR.REFERENCEPM, '2.1');
                  ELSE vControleOC := 1;
                END CASE;
              ELSE
                vControleOC := 1;
              END IF;
            ELSE
              vControleOC := 1;

              IF vType = 'ZMD' AND vCodOI = 'SFOR' AND P_COD_PART_FLUX = 'SFRA' THEN
                -- Pas de projet, en ZMD : on essaye de le créer
                OPEN C_PMOFSFOR(R_CUR.REFERENCEPM);
                FETCH C_PMOFSFOR INTO R_PMOFSFOR;
                vFoundPMOFSFOR := C_PMOFSFOR%FOUND;
                CLOSE C_PMOFSFOR;

                IF  vFoundPMOFSFOR THEN
                  -- PM existe dans la table LST_PM_OF_TO_SFOR
                  NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,'AMI');
                ELSE
                  NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,'ZSF');
                END IF;
              ELSIF vType = 'ZMD' AND vCodOI = NAT_FTTH_OI.P_CODOI_SIMPSON AND P_COD_PART_FLUX = NAT_FTTH_OI.P_CODOI_SIMPSON THEN
                -- Pas de projet, en ZMD : on essaye de le créer
                NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,NAT_FTTH_OI.P_CODOC_SIMPSON);
              ELSIF vType = 'ZMD' AND P_CODOI <> 'FTEL' AND P_COD_PART_FLUX = 'FTEL' THEN
                -- Pas de projet, en ZMD : on essaye de le créer
                NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,'OFC');
              ELSIF vType = 'ZMD' AND P_COD_PART_FLUX = 'AXIO'  THEN
                -- Pas de projet, en RIP : on essaye de le créer
                NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,'RIP');
              ELSIF vType = 'ZMD' AND P_COD_PART_FLUX = 'ALTI'  THEN
                -- Pas de projet, en RIP ALTITUDE : on essaye de le créer
                NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,'ALT');
              ELSIF vType = 'ZMD' AND P_COD_PART_FLUX = 'COVA'  THEN
                -- Pas de projet, en RIP ALTITUDE : on essaye de le créer
                NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,'COV');
              ELSIF vType = 'ZMD' AND P_COD_PART_FLUX = 'TDF'  THEN
                -- Pas de projet, en RIP : on essaye de le créer
                NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,'TDF');
              ELSIF vType = 'ZMD' AND vCodOI = 'SFMD'  AND P_COD_PART_FLUX = 'SFRA' THEN
                --  On essaye de créer un projet ZSF
                NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,'ZSF');
              ELSIF vType = 'ZMD' AND P_COD_PART_FLUX = 'SFRA'  THEN
                IF R_GET_PART_FLUX.COD_PART_ADDU = 'RSF' THEN
                  -- Création du projet RIP SFR
                  NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM,'RSF');
                ELSE
                  NULL;
                END IF;
              ELSIF vType = 'ZMD' AND P_COD_PART_FLUX = NAT_FTTH_OI.P_OC_SIEA  THEN
                -- Pas de projet, en RIP SIEA : on essaye de le créer
                NAT_FF1_ZMD.NEW_PRJPM(R_CUR.REFERENCEPM, 'SIA');
              END IF;
            END IF;
          END IF;
        ELSE -->Dans le cas ou l'IDPM est NULL
          vControleOC := 1 ;
        END IF;
        IF vControleOC = 1 AND vCtrlAdr = 1 THEN

          -- Contrôle de présence
          --> On vérifie si l'immeuble n'existe pas pour cette OI
            --> Si l'immeuble n'existe pas pour cette OI, on vérifie si l'immeuble existe pour une autre OI
            --> Si c'est la cas, on ne va pas insérer une nouvelle ligne dans la table des immeubles
          vImm_id := NAT_FF1_TRT_FLX.GET_IMM_FROM_ADR(P_CODOI,
                                                      R_CUR.IDENTIFIANTIMMEUBLE,
                                                      vAdr_Imm_Oi_Id);

           -- Récupération des Scores
            v_score_dep_imb := NAT_FF1_ADR.GET_SCORE_DEP_IMB(P_ETAT_IMMEUBLE => R_CUR.ETATIMMEUBLE ,
                                                             P_DATE_MESC => TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD') );
            -- Score deploiement PM
            v_score_dep_pm := NAT_FF1_ADR.GET_SCORE_DEP_PM(P_REFERENCEPM => R_CUR.REFERENCEPM,
                                                           P_TYPE_ZONE   => vType);
            --Score blacklistage P_FOR_CALCUL_PIRE_MTF
            v_score_blk := NAT_FF1_ADR.GET_SCORE_BLK(P_IDENTIFIANTIMMEUBLE  => R_CUR.IDENTIFIANTIMMEUBLE,
                                                     P_HEXACLE              => vHexacle,
                                                     P_CODOI                => vCodOI,
                                                     P_BLOCAGEELIGIBILITE  => nvl(R_CUR.BLOCAGEELIGIBILITE,'N') ,
                                                     P_DATPREVDEBLOCAGE => TO_DATE(R_CUR.DATPREVDEBLOCAGE,'YYYY/MM/DD'));

            --Score final
            v_score := NAT_FF1_ADR.GET_SCORE(P_SOCRE_DEP_IMM => v_score_dep_imb,
                                             P_SOCRE_DEP_PM  => v_score_dep_pm,
                                             P_SOCRE_BLK     => v_score_blk);

          -- Gestion Blcklistage à la volée
              BEGIN
                CASE P_COD_PART_FLUX
                   WHEN 'FREE' THEN vMtfBlK := 'GAF';
                   WHEN 'ALTI' THEN vMtfBlK := 'GAL';
                   WHEN 'AXIO' THEN vMtfBlK := 'GAA';
                   WHEN 'COVA' THEN vMtfBlK := 'GAC';
                   WHEN 'SIEA' THEN vMtfBlK := 'GAI';
                   WHEN 'SFRA' THEN vMtfBlK := 'GAS';
                   WHEN 'TDF'  THEN vMtfBlK := 'GAT';
                   WHEN 'FTEL' THEN vMtfBlK := 'AGO';
                   WHEN 'SDIF' THEN vMtfBlK := 'AGO';
                   ELSE  vMtfBlK := 'GA';
                END CASE;
                   vExistingAdrBlkGelOI := NAT_FF1_ADR.GET_EXISTING_ADR_BLK_GEL_OI(P_CODOI,
                                                                                   R_CUR.IDENTIFIANTIMMEUBLE,
                                                                                   vMtfBlk);

                 IF vExistingAdrBlkGelOI IS NOT NULL THEN
                     vBlkGel := 'OUI';
                 ELSE
                     OPEN C_VERIF_GEL_BLK(R_CUR.IDENTIFIANTIMMEUBLE,vMtfBlK);
                     FETCH C_VERIF_GEL_BLK INTO R_VERIF_GEL_BLK;
                     vFoundBlkGel := C_VERIF_GEL_BLK%FOUND;
                     CLOSE C_VERIF_GEL_BLK;

                     IF vFoundBlkGel THEN
                        vBlkGel := 'OUI';
                     ELSE
                        vBlkGel := 'NON';
                     END IF;
                 END IF;
                END;

            -- Gestion blcklistage
            IF vDatMajHexaBytel IS NULL THEN
                 vHexaExistingAdrBlk := NAT_FF1_ADR.GET_EXISTING_ADR_HEXABTL_BLK(R_CUR.IDENTIFIANTIMMEUBLE,R_CUR.REFERENCEPM);
              ELSE
                  vHexaExistingAdrBlk := NAT_FF1_ADR.GET_EXISTING_ADR_BLK(R_CUR.IDENTIFIANTIMMEUBLE,R_CUR.REFERENCEPM);
              END IF;
              IF vHexaExistingAdrBlk IS NOT NULL THEN
                 vBlk := 'OUI';
              ELSE

              OPEN C_VERIF_BLK(R_CUR.IDENTIFIANTIMMEUBLE);
              FETCH C_VERIF_BLK INTO R_VERIF_BLK;
              vFoundBlk := C_VERIF_BLK%FOUND;
              CLOSE C_VERIF_BLK;

              IF vFoundBlk THEN
                vBlk := 'OUI';
              ELSE
                vBlk := 'NON';
              END IF;
              END IF;


          /*IF (vImm_id IS NULL) OR (vImm_id IS NOT NULL AND vIS_NEW_FOR_OI_ONLY = 1)  THEN --> On est sure que l'immeuble n'exite pas*/
            IF vImm_id IS NULL THEN
              -- Création de l'immeuble
              NAT_FF1_TRT_FLX.NEW_IMMEUBLE(vImm_id,
                                           vHexacle,
                                           vtableName);
            ELSE
              -- MAJ de l'info adresse
              NAT_FF1_TRT_FLX.SET_IMMEUBLE(vImm_id,
                                           vHexacle,
                                           vtableName);
            END IF;
         IF vAdr_Imm_Oi_Id IS NULL THEN
            -- Insertion de l'adresse :
            BEGIN

              NAT_FTTH_OI.INS_ADR_IMM_OI(P_REFERENCEPM                  => R_CUR.REFERENCEPM,
                                           P_IMM_ID                       => vImm_id,
                                           P_IDENTIFIANTIMMEUBLE          => R_CUR.IDENTIFIANTIMMEUBLE,
                                           P_CODERIVOLIIMMEUBLE           => R_CUR.CODERIVOLIIMMEUBLE,
                                           P_CODEINSEEIMMEUBLE            => R_CUR.CODEINSEEIMMEUBLE,
                                           P_CODEPOSTALIMMEUBLE           => R_CUR.CODEPOSTALIMMEUBLE,
                                           P_VILLEIMMEUBLE                => R_CUR.COMMUNEIMMEUBLE,
                                           P_CODEADRESSEIMMEUBLE          => vHexacle,
                                           P_TYPEVOIEIMMEUBLE             => R_CUR.TYPEVOIEIMMEUBLE,
                                           P_NOMVOIEIMMEUBLE              => R_CUR.NOMVOIEIMMEUBLE,
                                           P_NUMEROVOIEIMMEUBLE           => R_CUR.NUMEROVOIEIMMEUBLE,
                                           P_COMPLEMENTNUMEROVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                           P_BATIMENTIMMEUBLE             => R_CUR.BATIMENTIMMEUBLE,
                                           P_NBRELOGEMENTSINFOPREALABLES  => TO_NUMBER(R_CUR.NOMBRELOGEMENTSINFOPREALABLES),
                                           P_ETATIMMEUBLE                 => R_CUR.ETATIMMEUBLE,
                                           P_ETATPM                       => R_CUR.ETATPM,
                                           P_DATEINSTALLATIONPM           => TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD') ,
                                           P_CODERIVOLIPM                 => R_CUR.CODEVOIERIVOLIPM,
                                           P_CODEINSEEPM                  => R_CUR.CODEINSEEPM,
                                           P_CODEPOSTALPM                 => R_CUR.CODEPOSTALPM,
                                           P_VILLEPM                      => R_CUR.COMMUNEPM,
                                           P_CODEADRESSEPM                => R_CUR.CODEADRESSEPM,
                                           P_TYPEVOIEPM                   => R_CUR.TYPEVOIEPM,
                                           P_NOMVOIEPM                    => R_CUR.NOMVOIEPM,
                                           P_NUMEROVOIEPM                 => R_CUR.NUMEROVOIEPM,
                                           P_COMPLEMENTVOIEPM             => R_CUR.COMPLEMENTVOIEPM,
                                           P_DATE_IMP                     => R_CUR.DATE_IMP,
                                           P_FILE_ID                      => R_CUR.FILE_ID,
                                           P_BATIMENTPM                   => R_CUR.BATIMENTPM,
                                           P_CODOI                        => vCodOI,
                                           P_TYPZON                       => vType,
                                           P_DATENVOSSFAI                 => NULL,
                                           P_NOMBREPMTECHNIQUES           => TO_NUMBER(R_CUR.NOMBREPMTECHNIQUES),
                                           P_TYPEIMMEUBLE                 => R_CUR.TYPEIMMEUBLE,
                                           P_TYPEPROJECTIONGEOGRAPHIQUE   => R_CUR.TYPEPROJECTIONGEOGRAPHIQUE,
                                           P_COORDONNEEPMX                => ROUND(TO_NUMBER(R_CUR.COORDONNEEPMX),5),
                                           P_COORDONNEEPMY                => ROUND(TO_NUMBER(R_CUR.COORDONNEEPMY),5),
                                           P_COORDONNEEIMMEUBLEX          => ROUND(TO_NUMBER(R_CUR.COORDONNEEIMMEUBLEX),5),
                                           P_COORDONNEEIMMEUBLEY          => ROUND(TO_NUMBER(R_CUR.COORDONNEEIMMEUBLEY),5),
                                           P_TYPEZONE                     => R_CUR.TYPEZONE,
                                           P_BLACKLIST                    => vBlk,
                                           P_MAJ_OSSF                     => 1,
                                           P_ETAIMMSIR                    => 'A',
                                           P_SRCADR                       => 'IPE',
                                           P_ACRDGESTNAIREIMM             => R_CUR.ACCORDGESTIONNAIRENECESSAIRE,
                                           P_HEXABTL                      => (CASE WHEN vDatMajHexaBytel IS NOT NULL
                                                                                THEN vHexacle
                                                                                ELSE NULL
                                                                              END),
                                           P_DATEMAJHEXABTL               => vDatMajHexaBytel,
                                           P_TYPEINGENIERIE               => R_CUR.TYPEINGENIERIE,
                                           P_DATECABLAGEADRESSE           => TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD') ,
                                           P_TYPRACCOPBPTO                => R_CUR.TYPRACCOPBPTO,
                                           P_TYPPBO                       => R_CUR.TYPPBO,
                                           P_DATEMISEENSERVICECOMEPM      => TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD') ,
                                           P_DATMESCOMIMM                 => TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD') ,
                                           P_DATDEBACPTCMDACSS            => TO_DATE(R_CUR.DATDEBACPTCMDACSS,'YYYY/MM/DD') ,
                                           P_TYPEEMPLACEMENTPM            => R_CUR.TYPEEMPLACEMENTPM,
                                           P_CATRACLGMT_CAL               => vCATRACLGMT_CAL,
                                           P_CODEHEXACLEVOIE              => R_CUR.CODHEXAVOIE,
                                           P_ADR_IMM_OI_ID                => vAdr_Imm_Oi_Id,
                                           P_SCORE_DEPL_IMB               => v_score_dep_imb,
                                           P_SCORE_DEPL_PM                => v_score_dep_pm,
                                           P_SCORE_BLK                    => v_score_blk,
                                           P_SCORE                        => v_score,
                                           P_BLOCAGEELIGIBILITE           => NVL(R_CUR.BLOCAGEELIGIBILITE,'N'),
                                           P_ORIGINEBLOCAGE               => NULL,
                                           P_MOTIFBLOCAGE                 => R_CUR.MOTIFBLOCAGE,
                                           P_DATPREVDEBLOCAGE             => TO_DATE(R_CUR.DATPREVDEBLOCAGE,'YYYY/MM/DD'),
                                           P_DATDEBUTBLOCAGEELIG          => TO_DATE(R_CUR.DATDEBUTBLOCAGEELIG,'YYYY/MM/DD'),
                                           P_RACCORDEMENTLONG             => R_CUR.RACCORDEMENTLONG,
                                           P_REFPRDM                      => R_CUR.REFPRDM,
                                           P_SUPPORTINFRAFTTE             => R_CUR.SUPPORTINFRAFTTE,
                                           P_ETATIMMPBSPECIFIQUE          => R_CUR.ETATIMMPBSPECIFIQUE);

            IF vHexaExistingAdrBlk IS NOT NULL THEN
              NAT_FF1_ADR.INS_ADR_BLK_FROM_PREVIOUS_HEXA(vHexaExistingAdrBlk,
                                                         vHexacle,
                                                         vCodOI,
                                                         R_CUR.IDENTIFIANTIMMEUBLE);
            END IF;

            -- Blcklistage à la volée
            IF R_CUR.BLOCAGEELIGIBILITE = 'O' AND vBlkGel = 'NON' THEN
                  NAT_FF1_ADR.NEW_ADR_BLK(P_HEXACLE => R_CUR.CODEADRESSEIMMEUBLE,
                                          P_ACTBLK  => 'AUT',
                                          P_MTFBLK  => vMtfBlK,
                                          P_CMTBLK  => R_CUR.MOTIFBLOCAGE,
                                          P_SRCBLK  => 'IPE',
                                          P_CODOI   => P_CODOI,
                                          P_STATE   => vSTATE,
                                          P_IDENTIFIANTIMMEUBLE => R_CUR.IDENTIFIANTIMMEUBLE);
                UPDATE ADR_IMM_OI a
                 SET a.BLACKLIST = 'OUI',
                     a.MAJ_OSSF  = 1,
                     a.USRBLKUNI = 'IPE',
                     a.DATBLKUNI = SYSDATE
               WHERE a.IDENTIFIANTIMMEUBLE  = R_CUR.IDENTIFIANTIMMEUBLE;

            ELSE
              IF R_CUR.BLOCAGEELIGIBILITE = 'N' AND vBlkGel = 'OUI' THEN
                   -- Deblcklistage Motif GEL OI
                   NAT_FF1_ADR.DEB_BLK_MTF(P_IMMEUBLE => R_CUR.IDENTIFIANTIMMEUBLE,
                                           P_CODOI => P_CODOI,
                                           P_MOTIF => vMtfBlk);
              END IF;
            END IF;
                -- Récupération Pire Motif
                  vMotifBlocage := NAT_FF1_ADR.GET_PIRE_MOTIF(P_HEXACLE             => vHexacle ,
                                                              P_IDENTIFIANTIMMEUBLE => R_CUR.IDENTIFIANTIMMEUBLE,
                                                              P_BLOCAGEELIGIBILITE  => R_CUR.BLOCAGEELIGIBILITE,
                                                              P_DATPREVDEBLOCAGE    => TO_DATE(R_CUR.DATPREVDEBLOCAGE,'YYYY/MM/DD'),
                                                              P_FOR_CALCUL_PIRE_MTF => 1,
                                                              P_CODOI               => P_CODOI);
                 IF vMotifBlocage IS NOT NULL THEN
                   IF vMotifBlocage IN ('GAF','GAT','GAS','GAA','GA' ,'GAS', 'GAL','AGO','GAI') THEN
                     vOriginAdrBlk := 'OI';
                   ELSE
                     vOriginAdrBlk := 'BYTEL';
                   END IF;
                     UPDATE ADR_IMM_OI aoi
                        SET aoi.MOTIFBLOCAGE   = vMotifBlocage,
                            aoi.ORIGINEBLOCAGE = vOriginAdrBlk
                      WHERE aoi.IDENTIFIANTIMMEUBLE = R_CUR.IDENTIFIANTIMMEUBLE
                        AND aoi.ETAIMMSIR           <> 'S';
                 END IF;
            EXCEPTION
              WHEN OTHERS THEN
                plog.ERROR('Erreur lors de l''insertion adresse 1.0 dans la table finale','SQLERRM', SQLERRM);
                plog.full_error_backtrace('File_ID',P_FILE_ID);
                plog.full_call_stack('File_ID',P_FILE_ID);
            END;
          ELSE --> Dans le cas où l'immeuble existe déjà

            -- MAJ de l'info adresse
            BEGIN
              /*NAT_FF1_TRT_FLX.SET_IMMEUBLE(vImm_id,
                                           vHexacle,
                                           vtableName);*/
              vMajOss := DELTA_IPE_OSS_V2X(vCodOI,
                                           vImm_id,
                                           R_CUR.TYPEIMMEUBLE,
                                           R_CUR.ACCORDGESTIONNAIRENECESSAIRE,
                                           R_CUR.REFERENCEPM,
                                           R_CUR.TYPPBO,
                                           R_CUR.TYPRACCOPBPTO,
                                           r_cur.ETATIMMEUBLE,
                                           R_CUR.CODERIVOLIIMMEUBLE,
                                           R_CUR.CODEADRESSEIMMEUBLE);

              NAT_FTTH_OI.SET_ADR_IMM_OI(P_REFERENCEPM                  => R_CUR.REFERENCEPM,
                                         P_IMM_ID                       => vImm_id,
                                         P_IDENTIFIANTIMMEUBLE          => R_CUR.IDENTIFIANTIMMEUBLE,
                                         P_CODERIVOLIIMMEUBLE           => R_CUR.CODERIVOLIIMMEUBLE,
                                         P_CODEINSEEIMMEUBLE            => R_CUR.CODEINSEEIMMEUBLE,
                                         P_CODEPOSTALIMMEUBLE           => R_CUR.CODEPOSTALIMMEUBLE,
                                         P_VILLEIMMEUBLE                => R_CUR.COMMUNEIMMEUBLE,
                                         P_CODEADRESSEIMMEUBLE          => vHexacle,
                                         P_TYPEVOIEIMMEUBLE             => R_CUR.TYPEVOIEIMMEUBLE,
                                         P_NOMVOIEIMMEUBLE              => R_CUR.NOMVOIEIMMEUBLE,
                                         P_NUMEROVOIEIMMEUBLE           => R_CUR.NUMEROVOIEIMMEUBLE,
                                         P_COMPLEMENTNUMEROVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                         P_BATIMENTIMMEUBLE             => R_CUR.BATIMENTIMMEUBLE,
                                         P_NBRELOGEMENTSINFOPREALABLES  => TO_NUMBER(R_CUR.NOMBRELOGEMENTSINFOPREALABLES),
                                         P_ETATIMMEUBLE                 => R_CUR.ETATIMMEUBLE,
                                         P_ETATPM                       => R_CUR.ETATPM,
                                         P_DATEINSTALLATIONPM           => TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD'),
                                         P_CODERIVOLIPM                 => R_CUR.CODEVOIERIVOLIPM,
                                         P_CODEINSEEPM                  => R_CUR.CODEINSEEPM,
                                         P_CODEPOSTALPM                 => R_CUR.CODEPOSTALPM,
                                         P_VILLEPM                      => R_CUR.COMMUNEPM,
                                         P_CODEADRESSEPM                => R_CUR.CODEADRESSEPM,
                                         P_TYPEVOIEPM                   => R_CUR.TYPEVOIEPM,
                                         P_NOMVOIEPM                    => R_CUR.NOMVOIEPM,
                                         P_NUMEROVOIEPM                 => R_CUR.NUMEROVOIEPM,
                                         P_COMPLEMENTVOIEPM             => R_CUR.COMPLEMENTVOIEPM,
                                         P_DATE_IMP                     => R_CUR.DATE_IMP,
                                         P_FILE_ID                      => R_CUR.FILE_ID,
                                         P_BATIMENTPM                   => R_CUR.BATIMENTPM,
                                         P_CODOI                        => vCodOI,
                                         P_TYPZON                       => vType,
                                         P_DATENVOSSFAI                 => NULL,
                                         P_NOMBREPMTECHNIQUES           => TO_NUMBER(R_CUR.NOMBREPMTECHNIQUES),
                                         P_TYPEIMMEUBLE                 => R_CUR.TYPEIMMEUBLE,
                                         P_TYPEPROJECTIONGEOGRAPHIQUE   => R_CUR.TYPEPROJECTIONGEOGRAPHIQUE,
                                         P_COORDONNEEPMX                => ROUND(TO_NUMBER(R_CUR.COORDONNEEPMX),5),
                                         P_COORDONNEEPMY                => ROUND(TO_NUMBER(R_CUR.COORDONNEEPMY),5),
                                         P_COORDONNEEIMMEUBLEX          => ROUND(TO_NUMBER(R_CUR.COORDONNEEIMMEUBLEX),5),
                                         P_COORDONNEEIMMEUBLEY          => ROUND(TO_NUMBER(R_CUR.COORDONNEEIMMEUBLEY),5),
                                         P_TYPEZONE                     => R_CUR.TYPEZONE,
                                         P_BLACKLIST                    => vBlk,
                                         P_MAJ_OSSF                     => vMajOss,
                                         P_ETAIMMSIR                    => 'M',
                                         P_SRCADR                       => 'IPE',
                                         P_ACRDGESTNAIREIMM             => R_CUR.ACCORDGESTIONNAIRENECESSAIRE,
                                         P_HEXABTL                      => (CASE WHEN vDatMajHexaBytel IS NOT NULL
                                                                                THEN vHexacle
                                                                                ELSE NULL
                                                                            END),
                                         P_DATEMAJHEXABTL               => vDatMajHexaBytel,
                                         P_TYPEINGENIERIE               => R_CUR.TYPEINGENIERIE,
                                         P_DATECABLAGEADRESSE           => TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD') ,
                                         P_TYPRACCOPBPTO                => R_CUR.TYPRACCOPBPTO,
                                         P_TYPPBO                       => R_CUR.TYPPBO,
                                         P_DATEMISEENSERVICECOMEPM      => TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD') ,
                                         P_DATMESCOMIMM                 => TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD') ,
                                         P_DATDEBACPTCMDACSS            => TO_DATE(R_CUR.DATDEBACPTCMDACSS,'YYYY/MM/DD') ,
                                         P_TYPEEMPLACEMENTPM            => R_CUR.TYPEEMPLACEMENTPM,
                                         P_CATRACLGMT_CAL               => vCATRACLGMT_CAL,
                                         P_CODEHEXACLEVOIE              => R_CUR.CODHEXAVOIE,
                                         P_ADR_IMM_OI_ID                => vAdr_Imm_Oi_Id,
                                         P_SCORE_DEPL_IMB               => v_score_dep_imb,
                                         P_SCORE_DEPL_PM                => v_score_dep_pm ,
                                         P_SCORE_BLK                    => v_score_blk,
                                         P_SCORE                        => v_score,
                                         P_BLOCAGEELIGIBILITE           => NVL(R_CUR.BLOCAGEELIGIBILITE,'N'),
                                         P_ORIGINEBLOCAGE               => NULL,
                                         P_MOTIFBLOCAGE                 => NULL,
                                         P_DATPREVDEBLOCAGE             => TO_DATE(R_CUR.DATPREVDEBLOCAGE,'YYYY/MM/DD'),
                                         P_DATDEBUTBLOCAGEELIG          => TO_DATE(R_CUR.DATDEBUTBLOCAGEELIG,'YYYY/MM/DD'),
                                         P_RACCORDEMENTLONG             => R_CUR.RACCORDEMENTLONG,
                                         P_REFPRDM                      => R_CUR.REFPRDM,
                                         P_SUPPORTINFRAFTTE             => R_CUR.SUPPORTINFRAFTTE,
                                         P_ETATIMMPBSPECIFIQUE          => R_CUR.ETATIMMPBSPECIFIQUE);

            IF vHexaExistingAdrBlk IS NOT NULL THEN
              NAT_FF1_ADR.INS_ADR_BLK_FROM_PREVIOUS_HEXA(vHexaExistingAdrBlk,
                                                         vHexacle,
                                                         vCodOI,
                                                         R_CUR.IDENTIFIANTIMMEUBLE);
            END IF;

            -- Blcklistage à la volée
            BEGIN
              IF R_CUR.BLOCAGEELIGIBILITE = 'O' AND vBlkGel = 'NON' THEN
                  NAT_FF1_ADR.NEW_ADR_BLK(P_HEXACLE => R_CUR.CODEADRESSEIMMEUBLE,
                                          P_ACTBLK  => 'AUT',
                                          P_MTFBLK  => vMtfBlK,
                                          P_CMTBLK  => R_CUR.MOTIFBLOCAGE,
                                          P_SRCBLK  => 'IPE',
                                          P_CODOI   => P_CODOI,
                                          P_STATE   => vSTATE,
                                          P_IDENTIFIANTIMMEUBLE => R_CUR.IDENTIFIANTIMMEUBLE);
                UPDATE ADR_IMM_OI a
                 SET a.BLACKLIST = 'OUI',
                     a.MAJ_OSSF  = 1,
                     a.USRBLKUNI = 'IPE',
                     a.DATBLKUNI = SYSDATE
               WHERE a.IDENTIFIANTIMMEUBLE  = R_CUR.IDENTIFIANTIMMEUBLE
                 AND a.REFERENCEPM = R_CUR.REFERENCEPM
                 AND a.CODOI       = P_CODOI;



               ELSIF (R_CUR.BLOCAGEELIGIBILITE IS NULL OR R_CUR.BLOCAGEELIGIBILITE  = 'N') AND vBlkGel = 'OUI' THEN
                   -- Deblcklistage Motif GEL OI
                   NAT_FF1_ADR.DEB_BLK_MTF(P_IMMEUBLE => R_CUR.IDENTIFIANTIMMEUBLE,
                                           P_CODOI => P_CODOI,
                                           P_MOTIF => vMtfBlk);
               END IF;
              -- Récupération Pire Motif
              vMotifBlocage := NAT_FF1_ADR.GET_PIRE_MOTIF(P_HEXACLE             => vHexacle ,
                                                              P_IDENTIFIANTIMMEUBLE => R_CUR.IDENTIFIANTIMMEUBLE,
                                                              P_BLOCAGEELIGIBILITE  => nvl(R_CUR.BLOCAGEELIGIBILITE,'N'),
                                                              P_DATPREVDEBLOCAGE    => TO_DATE(R_CUR.DATPREVDEBLOCAGE,'YYYY/MM/DD'),
                                                              P_FOR_CALCUL_PIRE_MTF => 1,
                                                              P_CODOI               => P_CODOI);
              IF vMotifBlocage IS NOT NULL THEN
                 IF vMotifBlocage IN ('GAF','GAT','GAS','GAA','GA' ,'GAS', 'GAL','AGO','GAI') THEN
                   vOriginAdrBlk := 'OI';
                   UPDATE ADR_IMM_OI aoi
                      SET aoi.MOTIFBLOCAGE   = vMotifBlocage,
                          aoi.ORIGINEBLOCAGE = vOriginAdrBlk
                    WHERE aoi.IDENTIFIANTIMMEUBLE = R_CUR.IDENTIFIANTIMMEUBLE
                      AND aoi.ETAIMMSIR           <> 'S';
                 ELSE
                   vOriginAdrBlk := 'BYTEL';
                   UPDATE ADR_IMM_OI aoi
                      SET aoi.MOTIFBLOCAGE   = vMotifBlocage,
                          aoi.ORIGINEBLOCAGE = vOriginAdrBlk,
                          aoi.DATPREVDEBLOCAGE = NULL,
                          aoi.DATDEBUTBLOCAGEELIG = NULL
                    WHERE aoi.IDENTIFIANTIMMEUBLE = R_CUR.IDENTIFIANTIMMEUBLE
                      AND aoi.ETAIMMSIR           <> 'S';
                 END IF;

              END IF;
            EXCEPTION
              WHEN OTHERS THEN
                plog.ERROR('Erreur lors de l''insertion adresse 3.1 dans la table finale','SQLERRM', SQLERRM);
                plog.full_error_backtrace('File_ID',P_FILE_ID);
                plog.full_call_stack('File_ID',P_FILE_ID);
            END;
            END ;
          END IF;
        END IF;
       END IF;
          BEGIN
            NAT_FF1_TRT_FLX.INS_IPE(R_CUR.IDENTIFIANTIMMEUBLE,
                                  R_CUR.CODERIVOLIIMMEUBLE,
                                  R_CUR.CODEINSEEIMMEUBLE,
                                  TO_NUMBER(replace(R_CUR.CODEPOSTALIMMEUBLE,' ','')),
                                  R_CUR.COMMUNEIMMEUBLE,
                                  R_CUR.CODEADRESSEIMMEUBLE,
                                  R_CUR.TYPEVOIEIMMEUBLE,
                                  R_CUR.NOMVOIEIMMEUBLE,
                                  R_CUR.NUMEROVOIEIMMEUBLE,
                                  R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                  R_CUR.BATIMENTIMMEUBLE,
                                  TO_NUMBER(replace(R_CUR.NOMBRELOGEMENTSINFOPREALABLES,' ','')),
                                  R_CUR.ETATIMMEUBLE,
                                  TO_DATE(R_CUR.DATESIGNATURECONVENTION,'YYYY/MM/DD'),
                                  R_CUR.GESTIONNAIREIMMEUBLE,
                                  TO_NUMBER(replace(R_CUR.CODEPOSTALGESTIONNAIRE,' ','')),
                                  R_CUR.COMMUNEGESTIONNAIRE,
                                  R_CUR.TYPEVOIEGESTIONNAIRE,
                                  R_CUR.NOMVOIEGESTIONNAIRE,
                                  R_CUR.NUMEROVOIEGESTIONNAIRE,
                                  R_CUR.CPLNUMVOIEGESTIONNAIRE,
                                  TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD'),
                                  TO_DATE(R_CUR.DATEDERNIEREMODIFICATION,'YYYYMMDDHH24MI'),
                                  R_CUR.REFERENCEPM,
                                  R_CUR.ETATPM,
                                  TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD'),
                                  R_CUR.CODEVOIERIVOLIPM,
                                  R_CUR.CODEINSEEPM,
                                  TO_NUMBER(replace(R_CUR.CODEPOSTALPM,' ','')),
                                  R_CUR.COMMUNEPM,
                                  R_CUR.CODEADRESSEPM,
                                  R_CUR.TYPEVOIEPM,
                                  R_CUR.NOMVOIEPM,
                                  R_CUR.NUMEROVOIEPM,
                                  R_CUR.COMPLEMENTVOIEPM,
                                  R_CUR.TYPEINGENIERIE,
                                  R_CUR.FIBREDEDIEELIBRE,
                                  TO_NUMBER(replace(R_CUR.NOMBRELOGEMENTSPM,' ','')),
                                  TO_NUMBER(replace(R_CUR.NOMBRECOLONNESMONTANTES,' ','')),
                                  TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD'),
                                  R_CUR.DATE_IMP,
                                  R_CUR.FILE_ID,
                                  0,
                                  R_CUR.SIRETGESTIONNAIRE,
                                  R_CUR.TYPEEMPLACEMENTPM,
                                  R_CUR.COMMENTAIREPM,
                                  TO_NUMBER(replace(R_CUR.CAPACITEMAXPM,' ','')),
                                  R_CUR.BATIMENTPM,
                                  R_CUR.REFERENCECONSULTATIONNATIVE,
                                  vCodOI,
                                  vImm_id,
                                  /*1,
                                  'A',*/
                                  vType,
                                  TO_NUMBER(replace(R_CUR.NOMBREPMTECHNIQUES,' ','')),
                                  R_CUR.TYPEIMMEUBLE,
                                  R_CUR.TYPEPROJECTIONGEOGRAPHIQUE,
                                  ROUND(TO_NUMBER(R_CUR.COORDONNEEPMX),5),
                                  ROUND(TO_NUMBER(R_CUR.COORDONNEEPMY),5),
                                  ROUND(TO_NUMBER(R_CUR.COORDONNEEIMMEUBLEX),5),
                                  ROUND(TO_NUMBER(R_CUR.COORDONNEEIMMEUBLEY),5),
                                  NULL,-- R_CUR.REFREGROUPEMENTPM,
                                  R_CUR.EMPLACEMENTACTIFDISPONIBLE,
                                  R_CUR.QUALITEADRESSEPM,
                                  TO_DATE(R_CUR.DATEPREMIEREMADPM,'YYYY/MM/DD'),
                                  R_CUR.ACCORDGESTIONNAIRENECESSAIRE,
                                  TO_NUMBER(replace(R_CUR.TYPEZONE,' ','')),
                                  -- 2.2
                                  TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD'),--p_datmescomimm => :p_datmescomimm,
                                  R_CUR.IMMEUBLENEUF,--p_immeubleneuf => :p_immeubleneuf,
                                  TO_DATE(R_CUR.DATPRVLIVIMMNEUF,'YYYY/MM/DD'),--p_datprvlivimmneuf => :p_datprvlivimmneuf,
                                  R_CUR.BRASSAGEPMOI,--p_brassagepmoi => :p_brassagepmoi,
                                  R_CUR.REFCONSUL,--p_refconsul => :p_refconsul,
                                  R_CUR.CODHEXAVOIE,--p_codhexavoie => :p_codhexavoie,
                                  R_CUR.CODEBAN,--p_codeban => :p_codeban,
                                  R_CUR.CHMPRSV1,--p_chmprsv1 => :p_chmprsv1,
                                  R_CUR.CHMPRSV2,--p_chmprsv2 => :p_chmprsv2,
                                  R_CUR.CHMPRSV3,--p_chmprsv3 => :p_chmprsv3,
                                  TO_DATE(R_CUR.DATDEBACPTCMDACSS,'YYYY/MM/DD'),--p_datdebacptcmdacss => :p_datdebacptcmdacss,
                                  TO_DATE(R_CUR.DATDEBFOURCRCMDACSS,'YYYY/MM/DD'),--p_datdebfourcrcmdacss => :p_datdebfourcrcmdacss
                                  -- 3.0
                                  R_CUR.CODEOI_IPE,
                                  R_CUR.REFPRDM,
                                  R_CUR.REFLIENPMPRDM,
                                  TO_NUMBER(REPLACE(R_CUR.LONGLGNIMM,',','.' )),
                                  R_CUR.REFPBO,
                                  R_CUR.DATMADPBO,
                                  R_CUR.NBLOGMTPBO,
                                  TO_NUMBER(R_CUR.NBLOGMTMADPM),
                                  R_CUR.CHMPRSV4,
                                  R_CUR.CHMPRSV5,
                                  R_CUR.SUSRACDMD,
                                  R_CUR.TYPPBO,
                                  R_CUR.TYPRACCOPBPTO,
                                  R_CUR.CONDSYNDIC,
                                  -- 3.1
                                  R_CUR.RACCORDEMENTLONG,    -- NULL,
                                  R_CUR.ETATZAPM,       -- NULL,
                                  TO_DATE(R_CUR.DATEZAPMCIBLE,'YYYY/MM/DD'), -- NULL,
                                  R_CUR.SUPPORTINFRAFTTE,    -- NULL,
                                  R_CUR.ETATIMMPBSPECIFIQUE, -- NULL,
                                  R_CUR.BLOCAGEELIGIBILITE,  -- NULL,
                                  R_CUR.MOTIFBLOCAGE,        -- NULL,
                                  TO_DATE(R_CUR.DATPREVDEBLOCAGE,'YYYY/MM/DD'),     -- NULL,
                                  TO_DATE(R_CUR.DATDEBUTBLOCAGEELIG,'YYYY/MM/DD'),  -- NULL,
                                  R_CUR.CHMPRSV6,    -- NULL,
                                  R_CUR.CHMPRSV7     -- NULL,
                                  );
            IF R_CUR.REFERENCEPM IS NOT NULL THEN
              IF vPmEcours <> R_CUR.REFERENCEPM THEN
                BEGIN
                  IF vPmEcours IS NOT NULL THEN
                    BEGIN
                      NAT_FF1.UPD_INFO_ADR_PM_IPE(R_CUR.REFERENCEPM,P_FILE_ID,'IPE','3.1');
                    EXCEPTION
                      WHEN OTHERS THEN
                        plog.ERROR('Erreur lors de la mise à jour de la table ADR_PM','SQLERRM', SQLERRM,'','');
                    END;

                    NAT_FF1_TRT_FLX.TRT_IPE(vPmEcours);
                    NAT_FTTH_OI.TRT_CMD_UNI(P_IDPM                  => R_CUR.REFERENCEPM,
                                P_TYPZON                => P_TYPE,
                                P_TYPZONDET             => vType,
                                P_CODOI                 => vCodOI,
                                P_REFCONSULTATIONNATIVE => R_CUR.REFERENCECONSULTATIONNATIVE,
                                P_REFCONSUL             => R_CUR.REFCONSUL,
                                P_DATEINSTALLATIONPM    => TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYYMMDD'),
                                P_NUMEROVOIEPM          => R_CUR.NUMEROVOIEPM,
                                P_TYPEVOIEPM            => R_CUR.TYPEVOIEPM,
                                P_NOMVOIEPM             => R_CUR.NOMVOIEPM,
                                P_CODEPOSTALPM          => R_CUR.CODEPOSTALPM,
                                P_COMMUNEPM             => R_CUR.COMMUNEPM,
                                P_TYPEEMPLACEMENTPM     => R_CUR.TYPEEMPLACEMENTPM,
                                P_CODEINSEEPM           => R_CUR.CODEINSEEPM);
                    -- controles FEP
                    IF R_PRJPM.PART_ADD = 'BTL' THEN
                      --NAT_FF1_CTRL_FEP.CTRL_ABS_CRMAD_OK(R_PRJPM.IDPM);
                      NAT_FF1_CTRL_FEP.CTRL_ABS_PLN_MAD(R_PRJPM.IDPM);
                      NAT_FF1_CTRL_FEP.CTRL_ABS_INFO_SYN(R_PRJPM.IDPM);
                    END IF;
                    -- cloture des alertes PM supprimé
                    NAT_FF1_CR_MAD_PM.CLS_ALRT_PM_SUPPR_IPE(vPmEcours);

                  END IF;
                EXCEPTION
                  WHEN OTHERS THEN
                     plog.ERROR('Erreur lors du traitement FF de l''IPE','SQLERRM', SQLERRM);
                     plog.full_error_backtrace('File_ID',P_FILE_ID);
                     plog.full_call_stack('File_ID',P_FILE_ID);
                END;
                vPmEcours := R_CUR.REFERENCEPM;

                OPEN C_GET_PM_ETAT(vPmEcours);
                FETCH C_GET_PM_ETAT INTO R_GET_PM_ETAT;
                vFoundPmEtat := C_GET_PM_ETAT%FOUND;
                CLOSE C_GET_PM_ETAT;

                IF vFoundPmEtat THEN
                  IF vType =  'ZTD' THEN
                    BEGIN
                      -- contrôles alertes OI
                      NAT_FF1_CR_MAD_PM.CTRL_ALL_ALRT_SUIVI_CR_MAD(vPmEcours, vCodOI);
                      -- contrôle création projet
                      NAT_FF1_CR_MAD_PM.CTRL_PRM_PM_SS_PRJ(vPmEcours);
                    EXCEPTION
                      WHEN OTHERS THEN
                        plog.ERROR('Echec contrôle CR MAD dans l''IPE 3.1','SQLERRM', SQLERRM);
                    END;
                  END IF;

                ELSE
                  BEGIN
                    -- cloture des alertes OI
                    NAT_FF1_CR_MAD_PM.CLS_ALRT_CR_MAD(vPmEcours);
                  EXCEPTION
                    WHEN OTHERS THEN
                      plog.ERROR('Echec contrôle CR MAD dans l''IPE 3.1','SQLERRM', SQLERRM);
                  END;
                END IF;
             END IF;
           END IF;

         EXCEPTION
           WHEN OTHERS THEN
             plog.ERROR('Erreur lors de l''insertion IPE 3.1 dans la table finale','SQLERRM', SQLERRM);
             plog.full_error_backtrace('File_ID',P_FILE_ID);
             plog.full_call_stack('File_ID',P_FILE_ID);
         END;

     -- On passe l'adresse en provenance du CR MAD à Supprimer
     IF r_cur.IDENTIFIANTIMMEUBLE IS NOT NULL THEN
       UPDATE ADR_IMM_OI a
          SET a.ETAIMMSIR = 'S',
              a.DATSUP = SYSDATE,
              a.FILE_ID_SRC_SUP = P_FILE_ID,
              a.MAJ_OSSF = 1
         WHERE a.IDENTIFIANTIMMEUBLE = R_CUR.IDENTIFIANTIMMEUBLE
           AND a.CODOI               = vCodOI
           AND a.SRCADR              = 'MAD';
     END IF;

     IF (v_compt = 1000) THEN
       COMMIT;
       v_compt := 0;
     END IF;
     vNBLGNTRT := vNBLGNTRT + 1;
    EXCEPTION
      WHEN OTHERS THEN
        -- On incrémente pour correspondre au nombre de lignes de la table temporaire
        vNBLGNTRT := vNBLGNTRT + 1;
        plog.ERROR('Erreur lors de l''insertion IPE 3.1 dans traitement','SQLERRM', SQLERRM);
        plog.full_error_backtrace('File_ID',P_FILE_ID);
        plog.full_call_stack('File_ID',P_FILE_ID);
    END;
    END LOOP;
    CLOSE V_CUR;

    BEGIN
      IF vPmEcours IS NOT NULL THEN
        NAT_FF1_TRT_FLX.TRT_IPE(vPmEcours);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors du traitement FF de l''IPE','SQLERRM', SQLERRM);
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;

    plog.info('POST TRAITEMENT IPE : Fin itération IPE : '||vNBLGNTRT,
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));      -- Gestion des immeubles supprimés

    plog.info('POST TRAITEMENT IPE : Début Contrôle Demande d''info',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    -- Demandes d'information
    -- Controle s'il y a une demande sur un PM qui est passé à abandonné
    NAT_FF1_DMD_INFO.CTRL_PM_ABN_OI(vCodOI);
    -- Controle sur une demande d'information absente de l'IPE
    NAT_FF1_DMD_INFO.CTRL_PM_ABS_IPE(vCodOI);

    -- Contrôle sur l'alerte PM absent
    NAT_FF1_CTRL_IPE.CTRL_ALL_ALRT_PM_ABS;
    /*Traitement propre à ZMD*/
    IF vType <> 'ZTD' THEN
      -- Contrôle Multi-PM
      NAT_FF1_CTRL_ZMD.CTRL_ALL_MULTI_PM(R_GET_PART_FLUX.COD_PART_ADDU);
    END IF;

    plog.info('POST TRAITEMENT IPE : Fin Contrôle Demande d''info',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

    IF vPartAddPrj IN ('AMI','RIP','ALT','COV','TDF','OFC',NAT_FTTH_OI.P_CODOC_SIEA) THEN

    plog.info('POST TRAITEMENT IPE : Début Contrôle date MESC',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    -- contrôle sur les PMs OT
    vControleOC := NAT_FF1_CTRL_ZMD.CTRL_OVT_DAT_MESC(P_PART_ADD => vPartAddPrj);
    plog.info('POST TRAITEMENT IPE : Fin Contrôle date MESC',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

    END IF;

    IF P_TYPE <> 'ZSP' THEN
      -- Gestion des immeubles supprimés
      plog.info('POST TRAITEMENT IPE : Début Gestion des immeubles supprimés',
                'FILEID', P_FILE_ID,
                'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      NAT_FF1_TRT_FLX.SET_IMM_DEL_OI(P_CODOI, P_FILE_ID, P_TYPE); --> a adapter
      plog.info('POST TRAITEMENT IPE : Fin Gestion des immeubles supprimés',
                'FILEID', P_FILE_ID,
                'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    ELSE
      UPDATE IPE i
         SET i.FROM_ZSP = 1
       WHERE i.FILE_ID = P_FILE_ID;

      UPDATE ADR_IMM_OI a
         SET a.FROM_ZSP = 1
       WHERE a.FILE_ID = P_FILE_ID;
      plog.info('POST TRAITEMENT IPE : Pas de Gestion des immeubles supprimés en ZSP',
                'FILEID', P_FILE_ID,
                'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    END IF;

    -- Lancement du blacklistage
    plog.info('POST TRAITEMENT IPE : Début blacklistage',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    NAT_FF1_ADR.RUN_BLK_ALL(P_CODOI); --> a adapter
    plog.info('POST TRAITEMENT IPE : Fin blacklistage',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

     plog.info('POST TRAITEMENT IPE : Début historisation',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     NAT_FF1_CTRL_IPE.NEW_IPE_RECORDS_HIS(P_CODOI,vProtocol,vNB_REC,SYSDATE,P_FILE_ID,vNB_REC_DPL); --> a adapter
     plog.info('POST TRAITEMENT IPE : Fin historisation',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

    BEGIN
      CASE P_CODOI
        WHEN 'FTEL' THEN
          vNomIfcOut := 'FTTH_SIG_IPE_OUT_FT';
        WHEN 'SFRA' THEN
          vNomIfcOut := 'FTTH_SIG_HBIPE_OUT_SFR';
        WHEN 'SFMD' THEN
          vNomIfcOut := 'FTTH_SIG_HBIPE_OUT_SFR';
        WHEN 'NUME' THEN
          vNomIfcOut := 'FTTH_SIG_IPE_OUT_NC';
        WHEN 'FREE' THEN
          vNomIfcOut := 'FTTH_SIG_IPE_OUT_FREE';
        ELSE
          vNomIfcOut := 'FTTH_SIG_IPE_OUT_SEQ';
      END CASE;
      plog.info('POST TRAITEMENT IPE : Début génération et envoie fichier',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      CMN_IFC.GENERER_PREPARATION(P_ID_PREPARATION => vId_Preparation);
      CMN_IFC.ADD_FILE_PREPARATION(P_ID_PREPARATION => vId_Preparation,
                                   P_FILE_ID_SRC    => P_FILE_ID,
                                   P_INTERFACE      => NULL,
                                   P_NOM_FIC        => R_INFO_FIC.NOM_FIC,
                                   P_EMETTEUR       => 'REBOND',
                                   P_FILE_ID        => v_Fileio_OUT);

       NAT_IFC_TRT.UPDATE_LIBVAL2('NOM_FIC_OUT',R_INFO_FIC.NOM_FIC,P_FILE_ID);
       NAT_IFC_TRT.SET_FILE_ID_SRC(v_Fileio_OUT,P_FILE_ID);
       cmn_ifc.generer_interface(vNomIfcOut,
                                 1,
                                 NULL,
                                 vId_Preparation);
     plog.info('POST TRAITEMENT IPE : Fin génération et envoie fichier',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors du rebond IPE 3.1 vers le SIG','SQLERRM', SQLERRM);
     END;

     plog.info('POST TRAITEMENT IPE : Début supervision',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     NAT_FTTH_OI.POS_TRT_SPVION_IPE(P_FILE_ID        => P_FILE_ID,
                                    P_TYPZON         => P_TYPE,
                                    P_CODOI          => P_CODOI,
                                    P_NBLGNIPE       => vNBLGNIPE,
                                    P_NBLGNTRT       => vNBLGNTRT,
                                    P_NB_DOUBLON_IMB => vNB_DOUBLON_IMB);
     plog.info('POST TRAITEMENT IPE : Fin supervision',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

  ELSE
     plog.info('POST TRAITEMENT IPE : Début envoie mail rejet',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     NAT_FF1_CTRL_IPE.SEND_MAIL_REJET_IPE(P_CODOI,P_TYPE,P_FILE_ID);
     plog.info('POST TRAITEMENT IPE : Fin envoie mail rejet',
              'FILEID', P_FILE_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     UPDATE SPVION_IPE
        SET NOK_TO_GEN_ELIG = 4
      WHERE FILE_ID         = P_FILE_ID;
     NAT_FTTH_OI.SEND_MAIL_REPORT_IPE(P_COD_OI  => P_CODOI,
                                      P_TYPZON  => P_TYPE,
                                      P_FILE_ID => P_FILE_ID);

  END IF;
  COMMIT;
END;
  ----------------------------------------------------------
  -- Post traitement IPE FT ZTD 3.1
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  ----------------------------------------------------------
  PROCEDURE POS_TRT_IPE_IN_FT_ZTD_V31 (FILEIO_ID INTEGER) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  vTypzon VARCHAR2(3);
  BEGIN
    plog.info('POST TRAITEMENT IPE ZTD FT : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      update IPE_FT_ZTD_V31_TMP t set t.condsyndic=substr(condsyndic,1,instr(condsyndic, chr(13))-1)
             where   instr(condsyndic, chr(13))>0 ;

    vCod_Oi := GET_OI(FILEIO_ID);
    vTypzon := 'ZTD';

    POS_TRT_IPE_V31(vCod_Oi,vTypzon,FILEIO_ID,'FTEL' );
    plog.info('POST TRAITEMENT IPE ZTD FT : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;


  ----------------------------------------------------------
  -- Post traitement IPE ZMD FT 3.1
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  ----------------------------------------------------------
  PROCEDURE POS_TRT_IPE_IN_FT_ZMD_V31 (FILEIO_ID INTEGER) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  vTypzon VARCHAR2(3);
  vIsConf NUMBER;
  BEGIN
    plog.info('POST TRAITEMENT IPE ZMD FT : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      update IPE_FT_ZMD_V31_TMP set condsyndic=substr(condsyndic,1,instr(condsyndic, chr(13))-1)
             where   instr(condsyndic, chr(13))>0 ;

      vCod_Oi := GET_OI(FILEIO_ID);
      vTypzon := 'ZMD';

      vIsConf := IS_OI_CONF(vCod_Oi, 'FTEL');
      IF vIsConf = 1 THEN
      IF vCod_Oi = 'FTEL' THEN
        CLEAN_IPE_ZMD_FT_V31;
      END IF;

      CHK_N_CREATE_PM_FTEL_ZMD_31(vCod_Oi);

      POS_TRT_IPE_V31(vCod_Oi,vTypzon,FILEIO_ID,'FTEL');
      -- Controles commandes ZMD
      -- Apres réception IPE, comparaison sur le nombre de logements PM
      BEGIN
        NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
      EXCEPTION
        WHEN OTHERS THEN
             plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                        'FILEID', FILEIO_ID,
                        'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      END;
      ELSE
        plog.info('POST TRAITEMENT IPE : Début envoie mail rejet',
                 'FILEID', FILEIO_ID,
                 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
        NAT_FF1_CTRL_IPE.SEND_MAIL_REJET_IPE('FTEL','ZMD',FILEIO_ID);
        plog.info('POST TRAITEMENT IPE : Fin envoie mail rejet',
                 'FILEID', FILEIO_ID,
                 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

        UPDATE SPVION_IPE
           SET NOK_TO_GEN_ELIG = 0
         WHERE FILE_ID         = FILEIO_ID;
      END IF;
    plog.info('POST TRAITEMENT IPE ZMD FT : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  ----------------------------------------------------------
  -- Post traitement IPE ZSP FT 3.1
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  ----------------------------------------------------------
  PROCEDURE POS_TRT_IPE_IN_FT_ZSP_V31 (FILEIO_ID INTEGER) IS
  BEGIN
    plog.info('POST TRAITEMENT IPE ZSP FT : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      update IPE_FT_ZSP_V31_TMP set condsyndic=substr(condsyndic,1,instr(condsyndic, chr(13))-1)
             where   instr(condsyndic, chr(13))>0 ;

      CLEAN_IPE_ZSP_FT_V31;
      CHK_N_CREATE_PM_FTEL_ZSP_31;

      POS_TRT_IPE_V31('FTEL','ZSP',FILEIO_ID,'FTEL' );
      -- Controles commandes ZMD
      -- Apres réception IPE, comparaison sur le nombre de logements PM
      BEGIN
        NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
      EXCEPTION
        WHEN OTHERS THEN
             plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                        'FILEID', FILEIO_ID,
                        'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      END;
    plog.info('POST TRAITEMENT IPE ZSP FT : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;


  ----------------------------------------------------------
  -- Post traitement IPE SFR ZTD 3.1
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  ----------------------------------------------------------
  PROCEDURE POS_TRT_IPE_IN_SFRA_ZTD_V31 (FILEIO_ID INTEGER) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
    vTypzon VARCHAR2(3);
  BEGIN
    plog.info('POST TRAITEMENT IPE ZTD SFRA : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      update IPE_SFRA_ZTD_V31_TMP t set t.condsyndic=substr(condsyndic,1,instr(condsyndic, chr(13))-1)
             where   instr(condsyndic, chr(13))>0 ;

    vCod_Oi := GET_OI(FILEIO_ID);
    vTypzon := 'ZTD';

    POS_TRT_IPE_V31(vCod_Oi,vTypzon,FILEIO_ID,'SFRA');
    plog.info('POST TRAITEMENT IPE ZTD SFRA : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  ----------------------------------------------------------
  -- Post traitement IPE ZMD SFRA 3.1
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  ----------------------------------------------------------
  PROCEDURE POS_TRT_IPE_IN_SFRA_ZMD_V31 (FILEIO_ID INTEGER) IS
  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID
      FROM FILE_IO f
     WHERE f.FILE_ID = FILEIO_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
  vCodOi REF_OI.COD_OI%TYPE;
  vIsConf NUMBER;

  CURSOR C_REF_OI(codOI VARCHAR2) IS
    SELECT r.RIP
      FROM REF_OI r
     WHERE r.COD_OI = codOI;
  R_REF_OI C_REF_OI%ROWTYPE;

  BEGIN
    plog.info('POST TRAITEMENT IPE ZMD SFRA : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      update IPE_SFRA_ZMD_V31_TMP set CONDSYNDIC=substr(CONDSYNDIC,1,instr(CONDSYNDIC, chr(13))-1)
             where   instr(CONDSYNDIC, chr(13))>0 ;

      vCodOi := GET_OI(FILEIO_ID);
      vIsConf := IS_OI_CONF(vCodOi, 'SFRA');
      IF vIsConf = 1 THEN
        OPEN C_REF_OI(vCodOi);
          FETCH C_REF_OI INTO R_REF_OI;
        CLOSE C_REF_OI;
        IF vCodOi = 'SFOR' OR R_REF_OI.RIP = 1 THEN
          CHK_N_CREATE_PM_SFOR_ZMD_31(vCodOi);
        ELSE
          CHK_N_CREATE_PM_SFRA_ZMD_31(vCodOi);
        END IF;

        POS_TRT_IPE_V31(vCodOi,'ZMD',FILEIO_ID,'SFRA' );
        -- Controles commandes ZMD
        -- Apres réception IPE, comparaison sur le nombre de logements PM
      BEGIN
        NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
      EXCEPTION
        WHEN OTHERS THEN
             plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                        'FILEID', FILEIO_ID,
                        'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      END;
      ELSE
        plog.info('POST TRAITEMENT IPE : Début envoie mail rejet',
                  'FILEID', FILEIO_ID,
                  'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
        NAT_FF1_CTRL_IPE.SEND_MAIL_REJET_IPE('SFMD','ZMD',FILEIO_ID);
        plog.info('POST TRAITEMENT IPE : Fin envoie mail rejet',
                  'FILEID', FILEIO_ID,
                  'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

       UPDATE SPVION_IPE
          SET NOK_TO_GEN_ELIG = 0
        WHERE FILE_ID         = FILEIO_ID;

        OPEN C_INFO_IFC;
        FETCH C_INFO_IFC INTO R_INFO_IFC;
        CLOSE C_INFO_IFC;

        NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => FILEIO_ID,
                             P_TYP_IFC  => 'IN',
                             P_DATTRT   => SYSDATE,
                             P_IDPM     => NULL,
                             P_CODOI    => vCodOi,
                             P_COD_PART => NULL,
                             P_IFC_ID   => R_INFO_IFC.IFC_ID,
                             P_PRM_ID   => R_INFO_IFC.PRM_ID);
      END IF;

     plog.info('POST TRAITEMENT IPE ZMD SFRA : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;


  ----------------------------------------------------------
  -- Post traitement IPE FREE 3.1
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  ----------------------------------------------------------
  PROCEDURE POS_TRT_IPE_IN_FREE_V31 (FILEIO_ID INTEGER) IS
  BEGIN
      plog.info('POST TRAITEMENT IPE FREE : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      update IPE_FREE_V31_TMP i set i.condsyndic=substr(i.condsyndic,1,instr(i.condsyndic, chr(13))-1)
             where   instr(i.condsyndic, chr(13))>0 ;

      POS_TRT_IPE_V31('FREE','ZTD',FILEIO_ID,'FREE' );
      plog.info('POST TRAITEMENT IPE FREE : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;


  ----------------------------------------------------------
  -- Post traitement IPE TDF 3.1
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  ----------------------------------------------------------
  PROCEDURE POS_TRT_IPE_IN_TDF_V31 (FILEIO_ID INTEGER) IS
  vCodOi REF_OI.COD_OI%TYPE;
  vIsConf NUMBER;
  BEGIN
    plog.info('POST TRAITEMENT IPE TDF : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    vCodOi := NAT_FTTH_OI.GET_OI(FILEIO_ID);
    vIsConf := IS_OI_CONF(vCodOi, 'TDF');
    IF vIsConf = 1 THEN
      CHK_N_CREATE_PM_TDF_ZMD_31(vCodOi);

      POS_TRT_IPE_V31(vCodOi,'ZMD',FILEIO_ID, 'TDF' );
      -- Controles commandes ZMD
      -- Apres réception IPE, comparaison sur le nombre de logements PM
      BEGIN
        NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
      EXCEPTION
        WHEN OTHERS THEN
             plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                        'FILEID', FILEIO_ID,
                        'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      END;
      plog.info('POST TRAITEMENT IPE TDF : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    ELSE
     plog.info('POST TRAITEMENT IPE : Début envoie mail rejet',
              'FILEID', FILEIO_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     NAT_FF1_CTRL_IPE.SEND_MAIL_REJET_IPE('TDF','ZMD',FILEIO_ID);
     plog.info('POST TRAITEMENT IPE : Fin envoie mail rejet',
              'FILEID', FILEIO_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

     UPDATE SPVION_IPE
        SET NOK_TO_GEN_ELIG = 0
      WHERE FILE_ID         = FILEIO_ID;
    END IF;
    plog.info('POST TRAITEMENT IPE TDF : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  ----------------------------------------------------------
  -- Post traitement IPE ZMD Simpson 3.1
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  ----------------------------------------------------------
  PROCEDURE POS_TRT_IPE_IN_SMP_ZMD_V31 (FILEIO_ID INTEGER) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  vTypzon VARCHAR2(3);
  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID,
           f.NOM_FIC
      FROM FILE_IO f
     WHERE f.FILE_ID = FILEIO_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;

  BEGIN
    IF NAT_FTTH_SMP.CAN_RUN_CTRL_FACTU('ZMD') = 1 THEN
      NAT_FTTH_SMP.NEW_IPE_FACT_ZMD;
      IF NAT_FF1.CAN_RUN_TRT_IPE(NAT_FTTH_OI.P_CODOI_SIMPSON) <> 1 THEN
        OPEN C_INFO_IFC;
        FETCH C_INFO_IFC INTO R_INFO_IFC;
        CLOSE C_INFO_IFC;
        GEN_REBOND( 'FTTH_SIO2_SMP_IPE_OUT', R_INFO_IFC.NOM_FIC, FILEIO_ID,NULL);
      END IF;
    END IF;

    IF NAT_FF1.CAN_RUN_TRT_IPE(NAT_FTTH_OI.P_CODOI_SIMPSON) = 1 THEN --> On lance uniquement si possible
      plog.info('POST TRAITEMENT IPE ZMD Simpson : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
        update IPE_SMP_ZMD_V31_TMP set condsyndic=substr(condsyndic,1,instr(condsyndic, chr(13))-1)
               where   instr(condsyndic, chr(13))>0 ;

        vCod_Oi := GET_OI(FILEIO_ID);
        vTypzon := 'ZMD';

        CLEAN_IPE_ZMD_SMP_V31;
        CHK_N_CREATE_PM_SMP_ZMD_31(NAT_FTTH_OI.P_CODOI_SIMPSON);
        POS_TRT_IPE_V31(vCod_Oi,vTypzon,FILEIO_ID,NAT_FTTH_OI.P_CODOI_SIMPSON);
        -- Controles commandes ZMD
        -- Apres réception IPE, comparaison sur le nombre de logements PM
        BEGIN
          NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
        EXCEPTION
          WHEN OTHERS THEN
               plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                          'FILEID', FILEIO_ID,
                          'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
        END;
      plog.info('POST TRAITEMENT IPE ZMD Simpson : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    END IF;

  END;

  ----------------------------------------------------------
  -- Post traitement IPE ZSP Simpson 3.1
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  ----------------------------------------------------------
  PROCEDURE POS_TRT_IPE_IN_SMP_ZSP_V31 (FILEIO_ID INTEGER) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
    CURSOR C_INFO_IFC IS
      SELECT f.IFC_ID,
             f.PRM_ID,
             f.NOM_FIC
        FROM FILE_IO f
       WHERE f.FILE_ID = FILEIO_ID;
    R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
  IF NAT_FTTH_SMP.CAN_RUN_CTRL_FACTU('ZSP') = 1 THEN
    NAT_FTTH_SMP.NEW_IPE_FACT_ZSP;
    IF NAT_FF1.CAN_RUN_TRT_IPE(NAT_FTTH_OI.P_CODOI_SIMPSON) <> 1 THEN
      OPEN C_INFO_IFC;
      FETCH C_INFO_IFC INTO R_INFO_IFC;
      CLOSE C_INFO_IFC;
      GEN_REBOND( 'FTTH_SIO2_SMP_IPE_OUT', R_INFO_IFC.NOM_FIC, FILEIO_ID,NULL);
    END IF;
  END IF;

  IF NAT_FF1.CAN_RUN_TRT_IPE(NAT_FTTH_OI.P_CODOI_SIMPSON) = 1 THEN
    plog.info('POST TRAITEMENT IPE ZSP Simpson : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      update IPE_FT_ZSP_V31_TMP set condsyndic=substr(condsyndic,1,instr(condsyndic, chr(13))-1)
             where   instr(condsyndic, chr(13))>0 ;

      vCod_Oi := GET_OI(FILEIO_ID);

      --CLEAN_IPE_ZSP_FT_V30; --> Comment gère t on ?

      CHK_N_CREATE_PM_SMP_ZSP_31(NAT_FTTH_OI.P_CODOI_SIMPSON);
      POS_TRT_IPE_V31(vCod_Oi,'ZSP',FILEIO_ID,NAT_FTTH_OI.P_CODOI_SIMPSON );
      -- Controles commandes ZMD
      -- Apres réception IPE, comparaison sur le nombre de logements PM
      BEGIN
        NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
      EXCEPTION
        WHEN OTHERS THEN
             plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                        'FILEID', FILEIO_ID,
                        'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      END;
      plog.info('POST TRAITEMENT IPE ZSP Simpson : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    END IF;
  END;
  ----------------------------------------------------------
  -- Post traitement IPE COVA 3.1
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  ----------------------------------------------------------
  PROCEDURE POS_TRT_IPE_IN_COVA_V31 (FILEIO_ID INTEGER) IS
  vCodOi REF_OI.COD_OI%TYPE;
  vIsConf NUMBER;
  BEGIN
    plog.info('POST TRAITEMENT IPE COVAGE : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    vCodOi := NAT_FTTH_OI.GET_OI(FILEIO_ID);
    IF vCodOi = 'SEQU' THEN
      POS_TRT_IPE_V31('SEQU','ZTD',FILEIO_ID,'COVA' );
    ELSE
      vIsConf := IS_OI_CONF(vCodOi, 'COVA');
      IF vIsConf = 1 THEN
        --CLEAN_IPE_COVA_V31_TMP;
        CHK_N_CREATE_PM_COVA_ZMD_31(vCodOi);

        POS_TRT_IPE_V31(vCodOi,'ZMD',FILEIO_ID,'COVA' );
        -- Controles commandes ZMD
        -- Apres réception IPE, comparaison sur le nombre de logements PM
        BEGIN
          NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
        EXCEPTION
          WHEN OTHERS THEN
               plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                          'FILEID', FILEIO_ID,
                          'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
        END;
      ELSE
       plog.info('POST TRAITEMENT IPE : Début envoie mail rejet',
                'FILEID', FILEIO_ID,
                'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
       NAT_FF1_CTRL_IPE.SEND_MAIL_REJET_IPE('COVA','ZMD',FILEIO_ID);
       plog.info('POST TRAITEMENT IPE : Fin envoie mail rejet',
                'FILEID', FILEIO_ID,
                'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

       UPDATE SPVION_IPE
          SET NOK_TO_GEN_ELIG = 0
        WHERE FILE_ID         = FILEIO_ID;
      END IF;
    END IF;
    plog.info('POST TRAITEMENT IPE COVAGE : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;


  ----------------------------------------------------------
  -- Post traitement IPE AXIO 3.1
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  ----------------------------------------------------------
  PROCEDURE POS_TRT_IPE_IN_AXIO_V31 (FILEIO_ID INTEGER) IS
  vCodOi REF_OI.COD_OI%TYPE;
  vIsConf NUMBER;
  BEGIN
    plog.info('POST TRAITEMENT IPE AXIO : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    vCodOi := NAT_FTTH_OI.GET_OI(FILEIO_ID);
    vIsConf := IS_OI_CONF(vCodOi, 'AXIO');
    IF vIsConf = 1 THEN
      --CLEAN_IPE_ZMD_AXIO_V22;
      CHK_N_CREATE_PM_AXIO_ZMD_31(vCodOi);

      POS_TRT_IPE_V31(vCodOi,'ZMD',FILEIO_ID, 'AXIO' );
      -- Controles commandes ZMD
      -- Apres réception IPE, comparaison sur le nombre de logements PM
      BEGIN
        NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
      EXCEPTION
        WHEN OTHERS THEN
             plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                        'FILEID', FILEIO_ID,
                        'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      END;
    ELSE
     plog.info('POST TRAITEMENT IPE : Début envoie mail rejet',
              'FILEID', FILEIO_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     NAT_FF1_CTRL_IPE.SEND_MAIL_REJET_IPE('AXIO','ZMD',FILEIO_ID);
     plog.info('POST TRAITEMENT IPE : Fin envoie mail rejet',
              'FILEID', FILEIO_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

     UPDATE SPVION_IPE
        SET NOK_TO_GEN_ELIG = 0
      WHERE FILE_ID         = FILEIO_ID;
    END IF;

    plog.info('POST TRAITEMENT IPE AXIO : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;


  ----------------------------------------------------------
  -- Post traitement IPE ALTI 3.1
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  ----------------------------------------------------------
  PROCEDURE POS_TRT_IPE_IN_ALTI_V31 (FILEIO_ID INTEGER) IS
  vCodOi REF_OI.COD_OI%TYPE;
  vIsConf NUMBER;
  BEGIN
    plog.info('POST TRAITEMENT IPE ALTI : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    vCodOi := NAT_FTTH_OI.GET_OI(FILEIO_ID);
    vIsConf := IS_OI_CONF(vCodOi, 'ALTI');
    IF vIsConf = 1 THEN

      UPDATE IPE_ALTI_V31_TMP i
         SET i.COORDONNEEPMX       = replace(COORDONNEEPMX,',','.'),
             i.COORDONNEEPMY       = replace(COORDONNEEPMY,',','.'),
             i.COORDONNEEIMMEUBLEX = replace(COORDONNEEIMMEUBLEX,',','.'),
             i.COORDONNEEIMMEUBLEY = replace(COORDONNEEIMMEUBLEY,',','.');
      COMMIT;

      CHK_N_CREATE_PM_ALTI_ZMD_31(vCodOi);

      POS_TRT_IPE_V31(vCodOi,'ZMD',FILEIO_ID, 'ALTI' );
      -- Controles commandes ZMD
      -- Apres réception IPE, comparaison sur le nombre de logements PM
      BEGIN
        NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
      EXCEPTION
        WHEN OTHERS THEN
             plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                        'FILEID', FILEIO_ID,
                        'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      END;

    ELSE
     plog.info('POST TRAITEMENT IPE : Début envoie mail rejet',
              'FILEID', FILEIO_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     NAT_FF1_CTRL_IPE.SEND_MAIL_REJET_IPE('ALTI','ZMD',FILEIO_ID);
     plog.info('POST TRAITEMENT IPE : Fin envoie mail rejet',
              'FILEID', FILEIO_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

     UPDATE SPVION_IPE
        SET NOK_TO_GEN_ELIG = 0
      WHERE FILE_ID         = FILEIO_ID;
    END IF;
    plog.info('POST TRAITEMENT IPE ALTI : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;

  ----------------------------------------------------------
  -- Post traitement IPE SIEA 3.1
  -- %PARAM P_FILEIO_ID identifiant du fichier a traiter
  ----------------------------------------------------------
  PROCEDURE POS_TRT_IPE_IN_SIEA_V31 (FILEIO_ID INTEGER) IS
    vCodOi REF_OI.COD_OI%TYPE;
    vIsConf NUMBER;
  BEGIN
    plog.info('POST TRAITEMENT IPE SIEA : Début', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    vCodOi := NAT_FTTH_OI.GET_OI(FILEIO_ID);
    vIsConf := IS_OI_CONF(vCodOi, NAT_FTTH_OI.P_OC_SIEA);
    IF vIsConf = 1 THEN
      CHK_N_CREATE_PM_SIEA_ZMD_31(vCodOi);

      POS_TRT_IPE_V31(vCodOi,'ZMD',FILEIO_ID, NAT_FTTH_OI.P_OC_SIEA );
      -- Controles commandes ZMD
      -- Apres réception IPE, comparaison sur le nombre de logements PM
      BEGIN
        NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_NBLGTS;
      EXCEPTION
        WHEN OTHERS THEN
             plog.info('POST TRAITEMENT IPE : Erreur CTRL_ZMD_MDF_NBLGTS',
                        'FILEID', FILEIO_ID,
                        'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
      END;
      plog.info('POST TRAITEMENT IPE SIEA : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
    ELSE
     plog.info('POST TRAITEMENT IPE : Début envoie mail rejet',
              'FILEID', FILEIO_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
     NAT_FF1_CTRL_IPE.SEND_MAIL_REJET_IPE(NAT_FTTH_OI.P_OC_SIEA,'ZMD',FILEIO_ID);
     plog.info('POST TRAITEMENT IPE : Fin envoie mail rejet',
              'FILEID', FILEIO_ID,
              'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));

     UPDATE SPVION_IPE
        SET NOK_TO_GEN_ELIG = 0
      WHERE FILE_ID         = FILEIO_ID;
    END IF;
    plog.info('POST TRAITEMENT IPE SIEA : Fin', 'FILEID', FILEIO_ID, 'Date/heure', TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS'));
  END;
-----------------------------------------------------------------------------------
-- Post Traitement CR Infosyndic 3.1
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRSYN_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                            P_CODOI   IN REF_OI.COD_OI%TYPE) IS
V_CUR          SYS_REFCURSOR;
R_CUR          CR_INFSYN_FT_31_TMP%ROWTYPE;
v_idpm         VARCHAR2(100);
vGeneratedName VARCHAR2(255);
v_opr          VARCHAR2(100);
vRegExp        VARCHAR2(100);
-- récupération de la table temporaire
CURSOR C_GET_TMP IS
  SELECT flx.INFSYN_TMP
    FROM PART_FLX   flx,
         REF_OI_PRM rop,
         REF_OI     roi
   WHERE roi.COD_OI = P_CODOI
     AND rop.COD_OI = roi.COD_OI
     AND rop.PRTCL  = '3.1'
     AND rop.OBS    = 0
     AND flx.COD_PART_FLUX = rop.COD_PART_FLUX;
R_GET_TMP C_GET_TMP%ROWTYPE;
vFoundTmp BOOLEAN;

CURSOR C_INFO_IFC IS
  SELECT f.IFC_ID,
         f.PRM_ID
    FROM FILE_IO f
   WHERE f.FILE_ID = P_FILE_ID;
R_INFO_IFC C_INFO_IFC%ROWTYPE;
BEGIN
  OPEN C_GET_TMP;
  FETCH C_GET_TMP INTO R_GET_TMP;
  vFoundTmp := C_GET_TMP%FOUND;
  CLOSE C_GET_TMP;

  IF vFoundTmp THEN
    V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(R_GET_TMP.INFSYN_TMP);
    LOOP
      FETCH V_CUR INTO R_CUR;
      EXIT WHEN V_CUR%NOTFOUND;
      DELETE FROM CR_INFOSYNDIC p WHERE p.REFERENCEPM = R_CUR.REFERENCEPM;
      BEGIN
        INSERT INTO CR_INFOSYNDIC VALUES (R_CUR.REFERENCEPM,
                                          TO_DATE(R_CUR.DATENOTIFCRINFOGESTIONNAIRE,'YYYY/MM/DD' ),
                                          R_CUR.REFERENCECOMMANDEPMINTERNEOC,
                                          R_CUR.REFERENCEPRESTATIONPM,
                                          R_CUR.DATE_IMP,
                                          R_CUR.FILE_ID,
                                          R_CUR.TYPEINFOSYNDIC);
         NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_CUR.REFERENCEPM,P_FILE_ID);
         v_idpm := R_CUR.REFERENCEPM;
         NAT_FF1_TRT_FLX.TRT_CR_INFOSYN_IN(P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors L''insertion du fichier INFO SYNNDIC dans la table finale','SQLERRM', SQLERRM);
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_CUR.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_CUR.REFERENCEPM);
      END;
    END LOOP;
    CLOSE V_CUR;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => v_idpm,
                         P_CODOI    => P_CODOI,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
    --
    -- Traitement du rebond des fichiers
    --
    BEGIN
      SELECT NOM_FIC
        INTO vGeneratedName
        FROM FILE_IO
       WHERE FILE_ID =  P_FILE_ID;
      v_opr := PKG_FTTH.GET_OPERATEUR(vGeneratedName);
      SELECT 'INFOSY_'||v_opr||'_'||v_idpm
        INTO vRegExp
        FROM DUAL;
      NAT_IFC_TRT.UPDATE_FILE_REGEXP(P_FILE_ID,UPPER(vRegExp));
      COMMIT;

      GEN_REBOND( 'FTTH_HBCRIS_OUT_SFR', vGeneratedName, P_FILE_ID,R_CUR.REFERENCEPM);
      NAT_FF1_TRT_FLX.TRT_CR_INFOSYN_OUT(P_FILE_ID);
     EXCEPTION
       WHEN OTHERS THEN
         plog.ERROR('Erreur lors du rebond HBCRIS SFR vers l''OI','SQLERRM', SQLERRM);
     END;
  END IF;
END;
  ------------------------------------------------------------------------------------------------
  -- Post traitement du CR Info syn COVA 3.1
  -- %Param P_FILE_ID    Identifiant informatique du fichier
  ------------------------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRSYN_IN_COVA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CRSYN_V31(P_FILE_ID, vCodOi);
  END;

  ------------------------------------------------------------------------------------------------
  -- Post traitement du CR Info syn FTEL 3.1
  -- %Param P_FILE_ID    Identifiant informatique du fichier
  ------------------------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRSYN_IN_FTEL_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CRSYN_V31(P_FILE_ID, vCodOi);
  END;

  ------------------------------------------------------------------------------------------------
  -- Post traitement du CR Info syn SFRA 3.1
  -- %Param P_FILE_ID    Identifiant informatique du fichier
  ------------------------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRSYN_IN_SFRA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
  BEGIN
    vCod_Oi := GET_OI(P_FILE_ID);
    POS_TRT_CRSYN_V31(P_FILE_ID, vCod_Oi);
  END;

  ------------------------------------------------------------------------------------------------
  -- Post traitement du CR Info syn FREE 3.1
  -- %Param P_FILE_ID    Identifiant informatique du fichier
  ------------------------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRSYN_IN_FREE_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    POS_TRT_CRSYN_V31(P_FILE_ID, 'FREE');
  END;

  ------------------------------------------------------------------------------------------------
  -- Post traitement du CR Info syn ALTI 3.1
  -- %Param P_FILE_ID    Identifiant informatique du fichier
  ------------------------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRSYN_IN_ALTI_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CRSYN_V31(P_FILE_ID, vCodOi);
  END;

  ------------------------------------------------------------------------------------------------
  -- Post traitement du CR Info syn TDF 3.1
  -- %Param P_FILE_ID    Identifiant informatique du fichier
  ------------------------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRSYN_IN_TDF_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CRSYN_V31(P_FILE_ID, vCodOi);
  END;

  ------------------------------------------------------------------------------------------------
  -- Post traitement du CR Info syn Simpson 3.1
  -- %Param P_FILE_ID    Identifiant informatique du fichier
  ------------------------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRSYN_IN_SMP_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CRSYN_V31(P_FILE_ID, vCodOi);
  END;
-----------------------------------------------------------------------------------
-- Post Traitement Lettre Infosyndic 3.1
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_LTRSYN_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                             P_CODOI   IN REF_OI.COD_OI%TYPE) IS
CURSOR C_FILE_INFO IS
  SELECT fio.NOM_FIC,
         regexp_replace(REGEXP_SUBSTR(fio.NOM_FIC,'_PM_(.*.)_INFOSY_V31'),'(_PM_|_INFOSY_V31)','') AS IDPM,
         fio.IFC_ID,
         fio.PRM_ID
    FROM FILE_IO fio
   WHERE fio.FILE_ID = P_FILE_ID;
R_FILE_INFO C_FILE_INFO%ROWTYPE;

CURSOR C_PRJPM (vIDPM PM.IDPM%TYPE) IS
  SELECT p.PRJPM_ID
    FROM PRJPM p,
         PM pm
   WHERE pm.IDPM = vIDPM
     AND p.GEO_ID = pm.GEO_ID;
vPRJPM_ID PRJPM.PRJPM_ID%TYPE;

BEGIN
  OPEN C_FILE_INFO;
  FETCH C_FILE_INFO INTO R_FILE_INFO;
  CLOSE C_FILE_INFO;

  OPEN C_PRJPM(R_FILE_INFO.IDPM);
  FETCH C_PRJPM INTO vPRJPM_ID;
  CLOSE C_PRJPM;

  NAT_IFC_TRT.UPDATE_FILE_REGEXP(P_FILE_ID,UPPER('INFOSY_PJ_'||P_CODOI||'_'||R_FILE_INFO.IDPM));

  -- Insertion des dans la table PJ
  INSERT INTO FTH_PJ (FTH_PJ_ID,
                      TYP,
                      DATPJ,
                      FILE_ID,
                      IDPM,
                      FILE_ID_PRT,
                      FILE_NET_ID,
                      NOMPJ)
  VALUES(SEQ_FTH_PJ.NEXTVAL,
         'SYN',
         sysdate,
         P_FILE_ID,
         R_FILE_INFO.IDPM,
         NULL,
         NULL,
         R_FILE_INFO.NOM_FIC);

  NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                       P_TYP_IFC  => 'IN',
                       P_DATTRT   => SYSDATE,
                       P_IDPM     => R_FILE_INFO.IDPM,
                       P_CODOI    => P_CODOI,
                       P_COD_PART => NULL,
                       P_IFC_ID   => R_FILE_INFO.IFC_ID,
                       P_PRM_ID   => R_FILE_INFO.PRM_ID);

  BEGIN
    NAT_FF1_TRT_FLX.TRT_FTH_PJ(P_FILE_ID);
    --Contrôle de la présence de la lettre Info Syndic
    NAT_FF1_CTRL_FEP.CTRL_ABS_INFO_SYN (R_FILE_INFO.IDPM);

    GEN_REBOND( 'FTTH_HBCRIS_OUT_SFR', R_FILE_INFO.NOM_FIC, P_FILE_ID,R_FILE_INFO.IDPM);
  EXCEPTION
    WHEN OTHERS THEN
      plog.ERROR('Erreur lors du du traitement de la lettre Info syndic','SQLERRM', SQLERRM);
  END;

  IF vPRJPM_ID IS NOT NULL THEN
    NAT_FF1.AVANCMT_PRJ(vPRJPM_ID);
  END IF;

END;
  -----------------------------------------------------------------------------------
  -- Post Traitement Lettre COVAGE Infosyndic 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_LTRSYN_IN_COVA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_LTRSYN_V31(P_FILE_ID,vCodOi);
  END;

    -----------------------------------------------------------------------------------
  -- Post Traitement Lettre FTEL Infosyndic 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_LTRSYN_IN_FTEL_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_LTRSYN_V31(P_FILE_ID,vCodOi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement Lettre SFRA Infosyndic 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_LTRSYN_IN_SFRA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
  BEGIN
    vCod_Oi := GET_OI(P_FILE_ID);
    POS_TRT_LTRSYN_V31(P_FILE_ID,vCod_Oi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement Lettre FREE Infosyndic 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_LTRSYN_IN_FREE_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    POS_TRT_LTRSYN_V31(P_FILE_ID,'FREE');
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement Lettre ALTI Infosyndic 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_LTRSYN_IN_ALTI_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_LTRSYN_V31(P_FILE_ID,vCodOi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement Lettre TDF Infosyndic 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_LTRSYN_IN_TDF_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_LTRSYN_V31(P_FILE_ID,vCodOi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement Lettre Simpson Infosyndic 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_LTRSYN_IN_SMP_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_LTRSYN_V31(P_FILE_ID,vCodOi);
  END;
----------------------------------------------------------
-- CLEAN_CRMAD_ZMD : Source CR MAD 3.1
----------------------------------------------------------

  PROCEDURE CLEAN_CRMAD_ZMD_OF_V31 (P_COD_OI PM.COD_OI%TYPE) IS

  BEGIN
    DELETE FROM CRD_MAD_PM_FT_31_TMP it
          WHERE NOT EXISTS (SELECT 1
                              FROM SOUSCRIPTION s
                             WHERE it.CODEINSEEPM = s.COD_INSEE
                               AND s.COD_OI       = P_COD_OI);

      DELETE FROM CRD_MAD_PM_FT_31_TMP it
            WHERE it.ETATPM IS NULL;
  END;

  PROCEDURE CLEAN_CRMAD_ZMD_SMP_V31 (P_COD_OI PM.COD_OI%TYPE) IS

  BEGIN
    DELETE FROM CRD_MAD_PM_SMP_31_TMP it
          WHERE NOT EXISTS (SELECT 1
                              FROM SOUSCRIPTION s
                             WHERE it.CODEINSEEPM = s.COD_INSEE
                               AND s.COD_OI       = P_COD_OI);

      DELETE FROM CRD_MAD_PM_SMP_31_TMP it
            WHERE it.ETATPM IS NULL;
  END;
------------------------------------------------------------------------------------
-- Traitement CR MAD PM 3.1
-----------------------------------------------------------------------------------
PROCEDURE POS_TRT_CRMADPM_V31(P_FILE_ID       IN FILE_IO.FILE_ID%TYPE,
                              P_CODOI         IN REF_OI.COD_OI%TYPE,
                              P_TYPZON        IN VARCHAR2,
                              P_COD_PART_FLUX IN PART_FLX.COD_PART_FLUX%TYPE DEFAULT NULL) IS

    rep                 VARCHAR2(255);
    vRegExp             VARCHAR2(100);
    v_idpm              VARCHAR2(100);
    vIDPM               VARCHAR2(100);
    v_refint            CRD_MAD_PM.REFERENCECOMMANDEPMNTERNEOC%TYPE;
    vETATCRCOMMANDEPM   CRD_MAD_PM.ETATCRCOMMANDEPM%TYPE;
    V_CUR               SYS_REFCURSOR;
    R_CUR               CRD_MAD_PM_FT_31_TMP%ROWTYPE;
    vCOD_OI             PM.COD_OI%TYPE;
    vTYPECOMMANDEPM     CRD_MAD_PM.TYPECOMMANDEPM%TYPE;
    vidTrt              NUMBER;
    vidTrtOfSmp         NUMBER;
    vIndice             NUMBER;
    vNomFic             FILE_IO.NOM_FIC%TYPE;
    vIdPmTrt            CRD_MAD_PM_FT_31_TMP.REFERENCEPM%TYPE;
    vImm_id             IMMEUBLE.IMM_ID%TYPE;
    vAdr_Imm_Oi_Id      NUMBER;
    vIS_NEW_FOR_OI_ONLY NUMBER;
    vAlerteOpenId6      NUMBER;
    vAlerteOpenId7      NUMBER;
    vInseePM            CRD_MAD_PM.CODEINSEEPM%TYPE;
    vNumZone            VARCHAR2(50);
    vCATRACLGMT_CAL     ADR_IMM_OI.CATRACLGMT_CAL%TYPE;
    CURSOR C_DMD_INFO(P_IDPM IN DMD_INFO.IDPM%TYPE) IS
      SELECT dmd.DMD_INFO_ID
        FROM ETA_DMD_INFO   eta,
             DMD_INFO       dmd
       WHERE dmd.IDPM            = P_IDPM
         AND eta.ETA_DMD_INFO_ID = dmd.ETA_DMD_INFO_ID
         AND eta.ETA_DMD_INFO NOT IN(NAT_FF1_DMD_INFO.A_DEMANDER,NAT_FF1_DMD_INFO.MIS_A_JOUR);
    vDMD_INFO_ID    DMD_INFO.DMD_INFO_ID%TYPE;
    vPM_DPL_MADKO NUMBER;
    vCTRL_ADR_REG_CRMAD NUMBER;
    vCtrl_ABN_OI NUMBER;
    -- récupération de la table temporaire
    CURSOR C_GET_TMP IS
      SELECT flx.CRMADPM_TMP
        FROM PART_FLX   flx,
             REF_OI_PRM rop,
             REF_OI     roi
       WHERE roi.COD_OI = P_CODOI
         AND rop.COD_OI = roi.COD_OI
         AND rop.PRTCL  = '3.1'
         AND rop.OBS    = 0
         AND flx.COD_PART_FLUX = rop.COD_PART_FLUX;
    R_GET_TMP C_GET_TMP%ROWTYPE;
    vFoundTmp BOOLEAN;
    vIfcOutSig VARCHAR2(50);
    -- Vérification du Partenaire flux et récupération du SIREN
     CURSOR C_VERIF_OI(part_flx VARCHAR2) IS
      SELECT r.COD_OI,
             r.SIREN
        FROM REF_OI_PRM rp,
             REF_OI     r
       WHERE r.COD_OI  = P_CODOI
         AND rp.COD_OI = r.COD_OI
         AND rp.OBS    = 0
         AND rp.COD_PART_FLUX = part_flx;
    R_VERIF_OI C_VERIF_OI%ROWTYPE;
    vFoundOI   BOOLEAN;

    CURSOR C_VERIF_PRJ (vIDPM VARCHAR2) IS
    SELECT DISTINCT
           pm.IDPM,
           prj.PART_ADD,
           prj.PRJPM_ID,
           mad.REFERENCEPMTECHNIQUE AS REFPMT,
           eta.ETAPRJPM
      FROM ETAPRJPM      eta,
           CRD_MAD_PM    mad,
           PRJPM         prj,
           PM            pm
     WHERE pm.IDPM         = vIDPM
       AND prj.GEO_ID      = pm.GEO_ID
       AND eta.ETAPRJPM_ID = prj.ETAPRJPM_ID
       AND eta.ETAPRJPM    <> 'ABN'
       AND mad.REFERENCEPM (+)= pm.IDPM;
    R_VERIF_PRJ C_VERIF_PRJ%ROWTYPE;
    vFoundPrj BOOLEAN;
    vPART_ADD PRJPM.PART_ADD%TYPE;
    vPRJPM_ID PRJPM.PRJPM_ID%TYPE;

    CURSOR C_INFO_IFC IS
      SELECT f.IFC_ID,
             f.PRM_ID,
             f.NOM_FIC
        FROM FILE_IO f
       WHERE f.FILE_ID = P_FILE_ID;
    R_INFO_IFC C_INFO_IFC%ROWTYPE;

    CURSOR C_INFO_IFC_OUT(v_id_trt_ifc NUMBER) IS
      SELECT f.FILE_ID,
             f.IFC_ID,
             f.PRM_ID
        FROM FILE_IO f
       WHERE f.ID_TRT_IFC = v_id_trt_ifc;
    R_INFO_IFC_OUT C_INFO_IFC_OUT%ROWTYPE;

    CURSOR C_PART_FLUX IS
      SELECT oi_prm.COD_PART_FLUX
        FROM REF_OI_PRM oi_prm
       WHERE oi_prm.COD_OI = P_CODOI
         AND oi_prm.obs = 0;
    R_PART_FLUX C_PART_FLUX%ROWTYPE;
    vCodPartFlux PART_FLX.COD_PART_FLUX%TYPE;
    vNomIfc      VARCHAR2(255);
    vNomIfcOfSmp VARCHAR2(255);
    vNomIfcSio2  VARCHAR2(255);
    vTypo        VARCHAR2(255);

      CURSOR C_VERIF_BLK(P_IDENTIFIANTIMMEUBLE ADR_BLK.IDENTIFIANTIMMEUBLE%TYPE) IS
      SELECT 1
        FROM ADR_BLK a
         WHERE a.IDENTIFIANTIMMEUBLE = P_IDENTIFIANTIMMEUBLE
         AND a.BLK_VALID = 1
         AND a.CODOI     = P_CODOI;
    R_VERIF_BLK C_VERIF_BLK%ROWTYPE;
    vFoundBlk               BOOLEAN;
    vBlk                    VARCHAR2(3);
    vHexaExistingAdrBlk ADR_IMM_OI.CODEADRESSEIMMEUBLE%TYPE;
    vHexacle            HEXA_BTL.HEXABTL%TYPE;
    vDatMajHexaBytel DATE;

    CURSOR C_PM(id_pm VARCHAR) IS
      SELECT pm.COD_OI
        FROM PM pm
       WHERE pm.IDPM = id_pm;
    R_PM C_PM%ROWTYPE;

    CURSOR C_GET_PART_FLUX IS
      SELECT (CASE r.COD_PART_FLUX
                WHEN 'FTEL' THEN
                   CASE WHEN r.Cod_Oi = 'FTEL' THEN
                        'AMI'
                   ELSE 'OFC' END
                WHEN 'SDIF' THEN
                  'AST'
                WHEN 'AXIO' THEN
                  'RIP'
                WHEN 'ALTI' THEN
                  'ALT'
                WHEN 'COVA' THEN
                  'COV'
                WHEN 'TDF' THEN
                  'TDF'
                WHEN 'SFRA' THEN
                  CASE
                    WHEN roi.RIP = 1 THEN
                      'RSF'
                    WHEN r.Cod_Oi = 'SFOR' THEN
                      'AMI'
                    ELSE 'ZAS'
                  END
                WHEN 'SIEA' THEN
                  'SIA'
              END)  AS COD_PART_ADDU
        FROM REF_OI roi,
             REF_OI_PRM r
       WHERE r.COD_OI = P_CODOI
         AND r.OBS  = 0
         AND roi.COD_OI = r.COD_OI
         AND ROWNUM = 1;
    R_GET_PART_FLUX C_GET_PART_FLUX%ROWTYPE;

    vFound BOOLEAN;

    CURSOR C_GET_ELG(P_IDENTIFIANTIMMEUBLE IN ADR_IMM_OI.IDENTIFIANTIMMEUBLE%TYPE) IS
      SELECT aoi.BLOCAGEELIGIBILITE,
             aoi.ORIGINEBLOCAGE,
             aoi.MOTIFBLOCAGE,
             aoi.DATPREVDEBLOCAGE,
             aoi.DATDEBUTBLOCAGEELIG,
             aoi.RACCORDEMENTLONG,
             aoi.REFPRDM,
             aoi.SUPPORTINFRAFTTE,
             aoi.ETATIMMPBSPECIFIQUE
        FROM ADR_IMM_OI aoi
       WHERE aoi.IDENTIFIANTIMMEUBLE = P_IDENTIFIANTIMMEUBLE
         AND ROWNUM = 1;
    R_GET_ELG      C_GET_ELG%ROWTYPE;

    v_score_dep_imb NUMBER;
    v_score_dep_pm NUMBER;
    v_score_blk NUMBER;
    v_score NUMBER;
    vMotifBlocage ADR_IMM_OI.MOTIFBLOCAGE%TYPE;
    vOriginAdrBlk ADR_IMM_OI.ORIGINEBLOCAGE%TYPE;
    vDspCovaRM    NUMBER;
    vCtrlAdrItg NUMBER;
    BEGIN
      -- Récupération des infos sur le fichier
      SELECT NOM_FIC,
             REP_FIC
        INTO vNomFic,
             rep
        FROM FILE_IO
       WHERE FILE_ID =  P_FILE_ID;
      -- Récupératoin de la table temporaire
      OPEN C_GET_TMP;
      FETCH C_GET_TMP INTO R_GET_TMP;
      vFoundTmp := C_GET_TMP%FOUND;
      CLOSE C_GET_TMP;

      IF vFoundTmp THEN
        V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(R_GET_TMP.CRMADPM_TMP);
        LOOP
          FETCH V_CUR INTO R_CUR;
          EXIT WHEN V_CUR%NOTFOUND;
          v_idpm            := R_CUR.REFERENCEPM;
          v_refint          := R_CUR.REFERENCECOMMANDEPMNTERNEOC;
          vETATCRCOMMANDEPM := R_CUR.ETATCRCOMMANDEPM;
          vTYPECOMMANDEPM   := R_CUR.TYPECOMMANDEPM ;
        END LOOP;
      END IF;

      -- dans le cas où on ne trouve pas de ligne dans la table tmp
      IF v_idpm IS NULL THEN
        SELECT regexp_replace(regexp_replace(REGEXP_SUBSTR(vNomFic,'_PM_(.*.)+\_'),'(_PM_)',''),'(_CRMAD_.*)|(_CRMAD.*)','')
          INTO vIDPM
          FROM DUAL;
        -- lancement du contrôle du CR MAD reçu mais non traité
        OPEN C_VERIF_PRJ(vIDPM);
        FETCH C_VERIF_PRJ INTO R_VERIF_PRJ;
        CLOSE C_VERIF_PRJ;
        IF R_VERIF_PRJ.PRJPM_ID IS NOT NULL THEN
          NAT_FF1_CTRL.CTRL_CMD_CRMAD_PM_NON_TRT(P_FILE_ID,R_VERIF_PRJ.PRJPM_ID,vIDPM);
        END IF;
        NAT_FF1_DOC.NEW_LOG_FIC_TRT(P_FILE_ID, 'KO', 'Le fichier ne respecte pas la STI, le fichier ne peut pas être intégré.');
      END IF;

      OPEN C_INFO_IFC;
      FETCH C_INFO_IFC INTO R_INFO_IFC;
      CLOSE C_INFO_IFC;

      NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                           P_TYP_IFC  => 'IN',
                           P_DATTRT   => SYSDATE,
                           P_IDPM     => NVL(v_idpm, vIDPM),
                           P_CODOI    => P_CODOI,
                           P_COD_PART => NULL,
                           P_IFC_ID   => R_INFO_IFC.IFC_ID,
                           P_PRM_ID   => R_INFO_IFC.PRM_ID);

      SELECT 'MAD_'||P_CODOI||'_'||NVL(v_idpm, vIDPM)
        INTO vRegExp
        FROM DUAL;
      NAT_IFC_TRT.UPDATE_FILE_REGEXP(P_FILE_ID,UPPER(vRegExp));

      -- Le CR MAD KO reçu contient un OI qui ne correspondant pas à celui du PM (chamgement d'OI)
      -- alors ignorer le traitement de ce CR MAD
      OPEN C_PM(v_idpm);
      FETCH C_PM INTO R_PM;
      vFound := C_PM%FOUND;
      CLOSE C_PM;
      IF vFound AND R_PM.COD_OI <> P_CODOI THEN
        NAT_FF1.INS_PM_COMMENTAIRES(v_idpm, 'CR MAD PM ignoré : l''OI (' || P_CODOI || ') ne correspond pas à celui du PM (' || R_PM.COD_OI || ')');
        NAT_FF1_DOC.NEW_LOG_FIC_TRT(P_FILE_ID, 'KO', 'CR MAD PM ignoré : l''OI (' || P_CODOI || ') ne correspond pas à celui du PM (' || R_PM.COD_OI || ')');
         RETURN;
      END IF;


      V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(R_GET_TMP.CRMADPM_TMP);

      IF v_idpm IS NOT NULL THEN
        -- Suppression des informations CRMAD du referentiel pour ce PM/extension (attention il n'y a qu'un CR MAD pour tout le PM)
        DELETE FROM CRD_MAD_PM P
         WHERE P.REFERENCEPM = v_idpm;


            -------------------Alerte 5--------------------------------------------------------------------
            -- Si létat CR MAD est KO et le PM est à l'état déployé dans la bsse Adresse (à partir de l'IPE)
              --> Aors création l'alerte
        IF vETATCRCOMMANDEPM = 'KO' THEN
          vPM_DPL_MADKO := NAT_FF1_CR_MAD_PM.CTRL_PM_DPL_MADKO(v_idpm);
          IF P_TYPZON = 'ZMD' AND P_CODOI = 'FTEL' THEN
            -- Fermeture alerte si on reçoit un CR MAD KO sur ce PM
            NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS_CLS(v_idpm, 'AMI');
          ELSIF P_TYPZON = 'ZMD' AND P_CODOI = NAT_FTTH_OI.P_CODOI_SIMPSON THEN
            NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS_CLS(v_idpm, NAT_FTTH_OI.P_CODOC_SIMPSON);
          END IF;
        END IF;
        LOOP
          FETCH V_CUR INTO R_CUR;
          EXIT WHEN V_CUR%NOTFOUND;
          BEGIN

            -- Vérification hexacle et remplacement
            --> l'hexa de l'IPE doit être null
            --> Sur un immeuble déployé
            --> dont le code insee du PM est dans le module souscription
            IF R_CUR.CODEADRESSEIMMEUBLE IS NULL AND
               R_CUR.IDENTIFIANTIMMEUBLE IS NOT NULL AND
               R_CUR.CODEINSEEIMMEUBLE   IS NOT NULL THEN
              vHexacle := APP_FF1_ADR.GET_HEXA_CLE_BYTEL(P_NUMEROVOIEIMMEUBLE     => R_CUR.NUMEROVOIEIMMEUBLE,
                                                         P_COMPLEMENTVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                                         P_TYPEVOIEIMMEUBLE       => R_CUR.TYPEVOIEIMMEUBLE,
                                                         P_NOMVOIEIMMEUBLE        => R_CUR.NOMVOIEIMMEUBLE,
                                                         P_CODEINSEEIMMEUBLE      => R_CUR.CODEINSEEIMMEUBLE,
                                                         P_CODERIVOLIIMMEUBLE     => R_CUR.CODEVOIERIVOLIIMMEUBLE);
              vDatMajHexaBytel := sysdate;
            ELSE
              vHexacle := R_CUR.CODEADRESSEIMMEUBLE;
              vDatMajHexaBytel := NULL;
            END IF;
        --Les contôles
        -------------------------------------------------------------------------------------------------
        -- Contrôle de présence
        --> On vérifie si l'immeuble n'existe pas pour cette OI
          --> Si l'immeuble n'existe pas pour cette OI, on vérifie si l'immeuble existe pour une autre OI
          --> Si c'est la cas, on ne va pas insérer une nouvelle ligne dans la table des immeubles
        vImm_id := NAT_FF1_TRT_FLX.GET_IMM_FROM_ADR(P_CODOI,
                                                    R_CUR.IDENTIFIANTIMMEUBLE,
                                                    vAdr_Imm_Oi_Id);

        -- Récupération des Scores
        v_score_dep_imb := NAT_FF1_ADR.GET_SCORE_DEP_IMB(P_ETAT_IMMEUBLE => R_CUR.ETATIMMEUBLE ,
                                                         P_DATE_MESC     => TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD') );
        -- Score deploiement PM
        v_score_dep_pm := NAT_FF1_ADR.GET_SCORE_DEP_PM(P_REFERENCEPM => R_CUR.REFERENCEPM,
                                                       P_TYPE_ZONE   => P_TYPZON );

        OPEN C_GET_ELG(R_CUR.IDENTIFIANTIMMEUBLE);
        FETCH C_GET_ELG INTO R_GET_ELG;
        CLOSE C_GET_ELG;
        --Score blacklistage
        v_score_blk := NAT_FF1_ADR.GET_SCORE_BLK(P_IDENTIFIANTIMMEUBLE => R_CUR.IDENTIFIANTIMMEUBLE,
                                                 P_HEXACLE             => vHexacle,
                                                 P_CODOI               => P_CODOI,
                                                 P_BLOCAGEELIGIBILITE  => nvl(R_GET_ELG.BLOCAGEELIGIBILITE,'N') ,
                                                 P_DATPREVDEBLOCAGE    => TO_DATE(R_GET_ELG.DATPREVDEBLOCAGE,'YYYY/MM/DD'));

        --Score final
        v_score := NAT_FF1_ADR.GET_SCORE(P_SOCRE_DEP_IMM => v_score_dep_imb,
                                         P_SOCRE_DEP_PM  => v_score_dep_pm,
                                         P_SOCRE_BLK     => v_score_blk);
        -- Conntole d'intégration adresse
        -- Identifiant immeuble non null et hexacle non null
        vCtrlAdrItg := NAT_FF1_CTRL_ADR.CTRL_ITG_ADR(vHexacle,
                                                     R_CUR.CODEINSEEIMMEUBLE,
                                                     R_CUR.IDENTIFIANTIMMEUBLE);
        -- L'adresse peut-elle être intégrée ?
          IF vCtrlAdrItg = 1 THEN
            /*IF (vImm_id IS NULL) OR (vImm_id IS NOT NULL AND vIS_NEW_FOR_OI_ONLY = 1)  THEN --> On est sure que l'immeuble n'exite pas*/
              IF vImm_id IS NULL THEN

                -- Création de l'immeuble
                NAT_FF1_TRT_FLX.NEW_IMMEUBLE(vImm_id,
                                             vHexacle,
                                             R_GET_TMP.CRMADPM_TMP);
              ELSE
                -- MAJ de l'info adresse
                NAT_FF1_TRT_FLX.SET_IMMEUBLE(vImm_id,
                                             vHexacle,
                                             R_GET_TMP.CRMADPM_TMP);
              END IF;

               IF vDatMajHexaBytel IS NULL THEN
                 vHexaExistingAdrBlk := NAT_FF1_ADR.GET_EXISTING_ADR_HEXABTL_BLK(R_CUR.IDENTIFIANTIMMEUBLE,R_CUR.REFERENCEPM);

               ELSE
                 vHexaExistingAdrBlk := NAT_FF1_ADR.GET_EXISTING_ADR_BLK(R_CUR.IDENTIFIANTIMMEUBLE,R_CUR.REFERENCEPM);
               END IF;

               IF vHexaExistingAdrBlk IS NOT NULL THEN
                vBlk := 'OUI';
               ELSE
                 OPEN C_VERIF_BLK(R_CUR.IDENTIFIANTIMMEUBLE);
                 FETCH C_VERIF_BLK INTO R_VERIF_BLK;
                 vFoundBlk := C_VERIF_BLK%FOUND;
                 CLOSE C_VERIF_BLK;
                 IF vFoundBlk THEN
                    vBlk := 'OUI';
                 ELSE
                    vBlk := 'NON';
                 END IF;
               END IF;
           IF vAdr_Imm_Oi_Id IS NULL THEN
              -- Insertion de l'adresse :
                  BEGIN
                  NAT_FTTH_OI.INS_ADR_IMM_OI(P_REFERENCEPM                  => R_CUR.REFERENCEPM,
                                             P_IMM_ID                       => vImm_id,
                                             P_IDENTIFIANTIMMEUBLE          => R_CUR.IDENTIFIANTIMMEUBLE,
                                             P_CODERIVOLIIMMEUBLE           => R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                             P_CODEINSEEIMMEUBLE            => R_CUR.CODEINSEEIMMEUBLE,
                                             P_CODEPOSTALIMMEUBLE           => R_CUR.CODEPOSTALIMMEUBLE,
                                             P_VILLEIMMEUBLE                => R_CUR.COMMUNEIMMEUBLE,
                                             P_CODEADRESSEIMMEUBLE          => vHexacle,
                                             P_TYPEVOIEIMMEUBLE             => R_CUR.TYPEVOIEIMMEUBLE,
                                             P_NOMVOIEIMMEUBLE              => R_CUR.NOMVOIEIMMEUBLE,
                                             P_NUMEROVOIEIMMEUBLE           => R_CUR.NUMEROVOIEIMMEUBLE,
                                             P_COMPLEMENTNUMEROVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                             P_BATIMENTIMMEUBLE             => R_CUR.BATIMENTIMMEUBLE,
                                             P_NBRELOGEMENTSINFOPREALABLES  => TO_NUMBER(R_CUR.NOMBRELOGEMENTSADRESSEIPE),
                                             P_ETATIMMEUBLE                 => R_CUR.ETATIMMEUBLE,
                                             P_ETATPM                       => R_CUR.ETATPM,
                                             P_DATEINSTALLATIONPM           => TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD') ,
                                             P_CODERIVOLIPM                 => R_CUR.CODEVOIERIVOLIPM,
                                             P_CODEINSEEPM                  => R_CUR.CODEINSEEPM,
                                             P_CODEPOSTALPM                 => R_CUR.CODEPOSTALPM,
                                             P_VILLEPM                      => R_CUR.COMMUNEPM,
                                             P_CODEADRESSEPM                => R_CUR.CODEADRESSEPM,
                                             P_TYPEVOIEPM                   => R_CUR.TYPEVOIEPM,
                                             P_NOMVOIEPM                    => R_CUR.NOMVOIEPM,
                                             P_NUMEROVOIEPM                 => R_CUR.NUMEROVOIEPM,
                                             P_COMPLEMENTVOIEPM             => R_CUR.COMPLEMENTVOIEPM,
                                             P_DATE_IMP                     => R_CUR.DATE_IMP,
                                             P_FILE_ID                      => R_CUR.FILE_ID,
                                             P_BATIMENTPM                   => R_CUR.BATIMENTPM,
                                             P_CODOI                        => P_CODOI,
                                             P_TYPZON                       => P_TYPZON,
                                             P_DATENVOSSFAI                 => NULL,
                                             P_NOMBREPMTECHNIQUES           => TO_NUMBER(R_CUR.NOMBREPMTECHNIQUES),
                                             P_TYPEIMMEUBLE                 => R_CUR.TYPEIMMEUBLE,
                                             P_TYPEPROJECTIONGEOGRAPHIQUE   => R_CUR.TYPEPROJECTIONGEOGRAPHIQUE,
                                             P_COORDONNEEPMX                => R_CUR.COORDONNEEPMX,
                                             P_COORDONNEEPMY                => R_CUR.COORDONNEEPMY,
                                             P_COORDONNEEIMMEUBLEX          => R_CUR.COORDONNEEIMMEUBLEX,
                                             P_COORDONNEEIMMEUBLEY          => R_CUR.COORDONNEEIMMEUBLEY,
                                             P_TYPEZONE                     => R_CUR.TYPEZONE,
                                             P_BLACKLIST                    => vBlk,
                                             P_MAJ_OSSF                     => 1,
                                             P_ETAIMMSIR                    => 'A',
                                             P_SRCADR                       => 'MAD',
                                             P_ACRDGESTNAIREIMM             => R_CUR.ACCORDGESTIONNAIREIMMEUBLE,
                                             P_HEXABTL                      => (CASE WHEN vDatMajHexaBytel IS NOT NULL
                                                                                    THEN vHexacle
                                                                                    ELSE NULL
                                                                                  END),
                                             P_DATEMAJHEXABTL               => vDatMajHexaBytel,
                                             P_TYPEINGENIERIE               => R_CUR.TYPEINGENIERIE,
                                             P_DATECABLAGEADRESSE           => TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD'),
                                             P_TYPRACCOPBPTO                => R_CUR.TYPRACCOPBPTO,
                                             P_TYPPBO                       => R_CUR.TYPEPBO,
                                             P_DATEMISEENSERVICECOMEPM      => TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD'),
                                             P_DATMESCOMIMM                 => TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD'),
                                             P_DATDEBACPTCMDACSS            => TO_DATE(R_CUR.DATDEBACPTCMDACSS,'YYYY/MM/DD'),
                                             P_TYPEEMPLACEMENTPM            => NULL,
                                             P_CATRACLGMT_CAL               => vCATRACLGMT_CAL,
                                             P_CODEHEXACLEVOIE              => R_CUR.CODHEXAVOIE,
                                             P_ADR_IMM_OI_ID                => vAdr_Imm_Oi_Id,
                                             P_SCORE_DEPL_IMB               => v_score_dep_imb,
                                             P_SCORE_DEPL_PM                => v_score_dep_pm,
                                             P_SCORE_BLK                    => v_score_blk,
                                             P_SCORE                        => v_score,
                                             P_BLOCAGEELIGIBILITE           => NULL,
                                             P_ORIGINEBLOCAGE               => NULL,
                                             P_MOTIFBLOCAGE                 => NULL,
                                             P_DATPREVDEBLOCAGE             => NULL,
                                             P_DATDEBUTBLOCAGEELIG          => NULL,
                                             P_RACCORDEMENTLONG             => NULL,
                                             P_REFPRDM                      => R_CUR.REFPRDM,
                                             P_SUPPORTINFRAFTTE             => NULL,
                                             P_ETATIMMPBSPECIFIQUE          => NULL);

              NAT_FF1_CTRL_ADR.CLS_ADR_REG(P_COD_OI              => P_CODOI,
                                           P_IDPM                => R_CUR.REFERENCEPM,
                                           P_CODEADRESSEIMMEUBLE => vHexacle,
                                           P_CODEINSEEIMMEUBLE   => R_CUR.CODEINSEEIMMEUBLE,
                                           P_CODERIVOLIIMMEUBLE  => R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                           P_ETATIMMEUBLE        => R_CUR.ETATIMMEUBLE,
                                           P_ETATPM              => R_CUR.ETATPM,
                                           P_NUMEROVOIEIMMEUBLE  => R_CUR.NUMEROVOIEIMMEUBLE,
                                           P_CPLMTNUMVOIEIMM     => PKG_TOOLS.TRANSLATE(UPPER(R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE)),
                                           P_IDENTIFIANTIMMEUBLE => R_CUR.IDENTIFIANTIMMEUBLE,
                                           P_BATIMENTIMMEUBLE    => PKG_TOOLS.TRANSLATE(UPPER(R_CUR.BATIMENTIMMEUBLE)));

             IF vHexaExistingAdrBlk IS NOT NULL THEN
                  NAT_FF1_ADR.INS_ADR_BLK_FROM_PREVIOUS_HEXA(vHexaExistingAdrBlk,
                                                             vHexacle,
                                                             P_CODOI,
                                                             R_CUR.IDENTIFIANTIMMEUBLE);
                END IF;
                EXCEPTION
                  WHEN OTHERS THEN
                    plog.ERROR('Erreur lors de l''insertion adresse 1.0 dans la table finale','SQLERRM', SQLERRM);
                    plog.full_error_backtrace('File_ID',P_FILE_ID);
                    plog.full_call_stack('File_ID',P_FILE_ID);
                END ;

            ELSE --> Dans le cas où l'immeuble existe déjà

              /*OPEN C_GET_ELG(R_CUR.IDENTIFIANTIMMEUBLE);
              FETCH C_GET_ELG INTO R_GET_ELG;
              CLOSE C_GET_ELG;*/

              NAT_FF1_TRT_FLX.SET_IMMEUBLE(vImm_id,
                                           vHexacle,
                                           R_GET_TMP.CRMADPM_TMP);
              NAT_FTTH_OI.SET_ADR_IMM_OI(P_REFERENCEPM                  => R_CUR.REFERENCEPM,
                                         P_IMM_ID                       => vImm_id,
                                         P_IDENTIFIANTIMMEUBLE          => R_CUR.IDENTIFIANTIMMEUBLE,
                                         P_CODERIVOLIIMMEUBLE           => R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                         P_CODEINSEEIMMEUBLE            => R_CUR.CODEINSEEIMMEUBLE,
                                         P_CODEPOSTALIMMEUBLE           => R_CUR.CODEPOSTALIMMEUBLE,
                                         P_VILLEIMMEUBLE                => R_CUR.COMMUNEIMMEUBLE,
                                         P_CODEADRESSEIMMEUBLE          => vHexacle,
                                         P_TYPEVOIEIMMEUBLE             => R_CUR.TYPEVOIEIMMEUBLE,
                                         P_NOMVOIEIMMEUBLE              => R_CUR.NOMVOIEIMMEUBLE,
                                         P_NUMEROVOIEIMMEUBLE           => R_CUR.NUMEROVOIEIMMEUBLE,
                                         P_COMPLEMENTNUMEROVOIEIMMEUBLE => R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                         P_BATIMENTIMMEUBLE             => R_CUR.BATIMENTIMMEUBLE,
                                         P_NBRELOGEMENTSINFOPREALABLES  => TO_NUMBER(R_CUR.NOMBRELOGEMENTSADRESSEIPE),
                                         P_ETATIMMEUBLE                 => R_CUR.ETATIMMEUBLE,
                                         P_ETATPM                       => R_CUR.ETATPM,
                                         P_DATEINSTALLATIONPM           => TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD'),
                                         P_CODERIVOLIPM                 => R_CUR.CODEVOIERIVOLIPM,
                                         P_CODEINSEEPM                  => R_CUR.CODEINSEEPM,
                                         P_CODEPOSTALPM                 => R_CUR.CODEPOSTALPM,
                                         P_VILLEPM                      => R_CUR.COMMUNEPM,
                                         P_CODEADRESSEPM                => R_CUR.CODEADRESSEPM,
                                         P_TYPEVOIEPM                   => R_CUR.TYPEVOIEPM,
                                         P_NOMVOIEPM                    => R_CUR.NOMVOIEPM,
                                         P_NUMEROVOIEPM                 => R_CUR.NUMEROVOIEPM,
                                         P_COMPLEMENTVOIEPM             => R_CUR.COMPLEMENTVOIEPM,
                                         P_DATE_IMP                     => R_CUR.DATE_IMP,
                                         P_FILE_ID                      => R_CUR.FILE_ID,
                                         P_BATIMENTPM                   => R_CUR.BATIMENTPM,
                                         P_CODOI                        => P_CODOI,
                                         P_TYPZON                       => P_TYPZON,
                                         P_DATENVOSSFAI                 => NULL,
                                         P_NOMBREPMTECHNIQUES           => TO_NUMBER(R_CUR.NOMBREPMTECHNIQUES),
                                         P_TYPEIMMEUBLE                 => R_CUR.TYPEIMMEUBLE,
                                         P_TYPEPROJECTIONGEOGRAPHIQUE   => R_CUR.TYPEPROJECTIONGEOGRAPHIQUE,
                                         P_COORDONNEEPMX                => R_CUR.COORDONNEEPMX,
                                         P_COORDONNEEPMY                => R_CUR.COORDONNEEPMY,
                                         P_COORDONNEEIMMEUBLEX          => R_CUR.COORDONNEEIMMEUBLEX,
                                         P_COORDONNEEIMMEUBLEY          => R_CUR.COORDONNEEIMMEUBLEY,
                                         P_TYPEZONE                     => R_CUR.TYPEZONE,
                                         P_BLACKLIST                    => vBlk,
                                         P_MAJ_OSSF                     => 1,
                                         P_ETAIMMSIR                    => 'M',
                                         P_SRCADR                       => 'MAD',
                                         P_ACRDGESTNAIREIMM             => R_CUR.ACCORDGESTIONNAIREIMMEUBLE,
                                         P_HEXABTL                      => (CASE WHEN vDatMajHexaBytel IS NOT NULL
                                                                                    THEN vHexacle
                                                                                    ELSE NULL
                                                                                END),
                                         P_DATEMAJHEXABTL               => vDatMajHexaBytel,
                                         P_TYPEINGENIERIE               => R_CUR.TYPEINGENIERIE,
                                         P_DATECABLAGEADRESSE           => TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD'),
                                         P_TYPRACCOPBPTO                => R_CUR.TYPRACCOPBPTO,
                                         P_TYPPBO                       => R_CUR.TYPEPBO,
                                         P_DATEMISEENSERVICECOMEPM      => TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD'),
                                         P_DATMESCOMIMM                 => TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD'),
                                         P_DATDEBACPTCMDACSS            => TO_DATE(R_CUR.DATDEBACPTCMDACSS,'YYYY/MM/DD'),
                                         P_TYPEEMPLACEMENTPM            => NULL,
                                         P_CATRACLGMT_CAL               => vCATRACLGMT_CAL,
                                         P_CODEHEXACLEVOIE              => R_CUR.CODHEXAVOIE,
                                         P_ADR_IMM_OI_ID                => vAdr_Imm_Oi_Id,
                                         P_SCORE_DEPL_IMB               => v_score_dep_imb,
                                         P_SCORE_DEPL_PM                => v_score_dep_pm ,
                                         P_SCORE_BLK                    => v_score_blk,
                                         P_SCORE                        => v_score,
                                         P_BLOCAGEELIGIBILITE           => R_GET_ELG.BLOCAGEELIGIBILITE,
                                         P_ORIGINEBLOCAGE               => R_GET_ELG.ORIGINEBLOCAGE,
                                         P_MOTIFBLOCAGE                 => NULL,-- à faire
                                         P_DATPREVDEBLOCAGE             => R_GET_ELG.DATPREVDEBLOCAGE,
                                         P_DATDEBUTBLOCAGEELIG          => R_GET_ELG.DATDEBUTBLOCAGEELIG,
                                         P_RACCORDEMENTLONG             => R_GET_ELG.RACCORDEMENTLONG,
                                         P_REFPRDM                      => R_CUR.REFPRDM,
                                         P_SUPPORTINFRAFTTE             => R_GET_ELG.SUPPORTINFRAFTTE,
                                         P_ETATIMMPBSPECIFIQUE          => R_GET_ELG.ETATIMMPBSPECIFIQUE);

              COMMIT;

                -- Récupération Pire Motif
                vMotifBlocage := NAT_FF1_ADR.GET_PIRE_MOTIF(P_HEXACLE             => vHexacle ,
                                                            P_IDENTIFIANTIMMEUBLE => R_CUR.IDENTIFIANTIMMEUBLE,
                                                            P_BLOCAGEELIGIBILITE  => R_GET_ELG.BLOCAGEELIGIBILITE,
                                                            P_DATPREVDEBLOCAGE    => R_GET_ELG.DATPREVDEBLOCAGE,
                                                            P_FOR_CALCUL_PIRE_MTF => 1,
                                                            P_CODOI               => P_CODOI);
               IF vMotifBlocage IS NOT NULL THEN
                 IF vMotifBlocage IN ('GAF','GAT','GAS','GAA','GA' ,'GAS', 'GAL','AGO','GAI') THEN
                   vOriginAdrBlk := 'OI';
                 ELSE
                   vOriginAdrBlk := 'BYTEL';
            END IF;
                   UPDATE ADR_IMM_OI aoi
                      SET aoi.MOTIFBLOCAGE   = vMotifBlocage,
                          aoi.ORIGINEBLOCAGE = vOriginAdrBlk
                    WHERE aoi.IDENTIFIANTIMMEUBLE = R_CUR.IDENTIFIANTIMMEUBLE
                      AND aoi.ETAIMMSIR           <> 'S';
                END IF;
               END IF;
             END IF;
              BEGIN
            NAT_FF1_TRT_FLX.INS_CRMAD(TO_NUMBER(replace(R_CUR.NOMBRELOGEMENTSMADPM,' ','')),
                                      R_CUR.REFERENCEPM,
                                      NULL, -- NombreLogementsibleMadPM supprimé
                                      TO_NUMBER(replace(R_CUR.NOMBRECOLONNESMONTANTES,' ','')),
                                      R_CUR.TYPEINGENIERIE,
                                      TO_NUMBER(replace(R_CUR.NOMBREOPERATEURSFIBREDEDIEE,' ','')),
                                      TO_NUMBER(replace(R_CUR.NOMBREOPERATEURSFIBREPARTAGEAB,' ','')),
                                      R_CUR.CHOIXTECHNIQUEOC,
                                      TO_DATE(R_CUR.DATEINSTALLATIONPM,'YYYY/MM/DD'),
                                      TO_DATE(R_CUR.DATECRCOMMANDEPM,'YYYY/MM/DD'),
                                      R_CUR.REFERENCEPRESTATIONPM,
                                      R_CUR.TYPECOMMANDEPM,
                                      R_CUR.REFERENCECOMMANDEPMNTERNEOC,
                                      R_CUR.ETATCRCOMMANDEPM,
                                      R_CUR.MOTIFKOCRCOMMANDEPM,
                                      TO_DATE(R_CUR.DATEMADPRESTATIONPM,'YYYY/MM/DD'),
                                      R_CUR.CODEACCESIMMEUBLE,
                                      R_CUR.CONTACTSIMMEUBLE,
                                      R_CUR.REFERENCEPMTECHNIQUE,
                                      R_CUR.PMACCESSIBLE,
                                      R_CUR.INFOOBTENTIONCLE,
                                      NULL,
                                      R_CUR.CODEACCESSOUSSOL,
                                      R_CUR.CODELOCALPM,
                                      R_CUR.AUTRESINFORMATIONS,
                                      R_CUR.CONTACTSSYNDIC,
                                      R_CUR.DATE_IMP,
                                      R_CUR.FILE_ID,
                                      R_CUR.IDENTIFIANTIMMEUBLE,
                                      R_CUR.CODEVOIERIVOLIIMMEUBLE,
                                      vHexacle,
                                      TO_NUMBER(replace(R_CUR.CODEPOSTALIMMEUBLE,' ','')),
                                      R_CUR.COMMUNEIMMEUBLE,
                                      R_CUR.CODEADRESSEIMMEUBLE,
                                      R_CUR.TYPEVOIEIMMEUBLE,
                                      R_CUR.NOMVOIEIMMEUBLE,
                                      TO_NUMBER(replace(R_CUR.NUMEROVOIEIMMEUBLE,' ','')),
                                      R_CUR.COMPLEMENTNUMEROVOIEIMMEUBLE,
                                      R_CUR.BATIMENTIMMEUBLE,
                                      TO_NUMBER(replace(R_CUR.NOMBRELOGEMENTSADRESSEIPE,' ','')),
                                      R_CUR.ETATIMMEUBLE,
                                      TO_DATE(R_CUR.DATESIGNATURECONVENTION,'YYYY/MM/DD'),
                                      R_CUR.GESTIONNAIREIMMEUBLE          ,
                                      TO_NUMBER(replace(R_CUR.CODEPOSTALGESTIONNAIRE,' ','')),
                                      R_CUR.COMMUNEGESTIONNAIRE,
                                      R_CUR.TYPEVOIEGESTIONNAIRE,
                                      R_CUR.NOMVOIEGESTIONNAIRE,
                                      TO_NUMBER(replace(R_CUR.NUMEROVOIEGESTIONNAIRE,' ','')),
                                      R_CUR.COMPLEMENTNUMGESTIONNAIRE ,
                                      R_CUR.SIRETGESTIONNAIRE,
                                      TO_DATE(R_CUR.DATECABLAGEADRESSE,'YYYY/MM/DD'),
                                      TO_DATE(R_CUR.DATEDERNIEREMODIFICATION,'YYYYMMDDHH24MI'),
                                      R_CUR.TYPEHEBERGEMENTPM,
                                      R_CUR.COMMENTAIREPM,
                                      TO_NUMBER(replace(R_CUR.CAPACITEMAXPM,' ','')),
                                      R_CUR.CODEVOIERIVOLIPM,
                                      R_CUR.CODEINSEEPM,
                                      TO_NUMBER(replace(R_CUR.CODEPOSTALPM,' ','')),
                                      R_CUR.COMMUNEPM,
                                      R_CUR.CODEADRESSEPM,
                                      R_CUR.TYPEVOIEPM,
                                      R_CUR.NOMVOIEPM,
                                      TO_NUMBER(replace(R_CUR.NUMEROVOIEPM,' ','')),
                                      R_CUR.COMPLEMENTVOIEPM,
                                      R_CUR.BATIMENTPM,
                                      R_CUR.FIBREDEDIEELIBRE,
                                      TO_DATE(R_CUR.DATEMISEENSERVICECOMMERCIALEPM,'YYYY/MM/DD'),
                                      R_CUR.REFERENCECONSULTATIONNATIVE,
                                      NULL, -- DatePublicationJ3M supprimé
                                      R_CUR.TYPEMATERIELPM,
                                      substr(R_CUR.REFERENCECONTRAT,1,instr(R_CUR.REFERENCECONTRAT, chr(13))-1),
                                      R_CUR.CODEADRESSEGESTIONNAIRE,
                                      R_CUR.ETATPM,
                                      TO_NUMBER(replace(R_CUR.NOMBRELOGEMENTSPM,' ','')),
                                      TO_NUMBER(replace(R_CUR.NOMBREPMTECHNIQUES,' ','')),
                                      R_CUR.TYPEIMMEUBLE,
                                      R_CUR.TYPEPROJECTIONGEOGRAPHIQUE,
                                      TO_NUMBER(replace(R_CUR.COORDONNEEPMX,' ','')),
                                      TO_NUMBER(replace(R_CUR.COORDONNEEPMY,' ','')),
                                      TO_NUMBER(replace(R_CUR.COORDONNEEIMMEUBLEX,' ','')),
                                      TO_NUMBER(replace(R_CUR.COORDONNEEIMMEUBLEY,' ','')),
                                      NULL, --R_CUR.REFREGROUPEMENTPM, Supprimé en 2.2
                                      R_CUR.EMPLACEMENTACTIFDISPONIBLE,
                                      R_CUR.QUALITEADRESSEPM,
                                      TO_DATE(R_CUR.DATEPREMIEREMADPM,'YYYY/MM/DD'),
                                      R_CUR.ACCORDGESTIONNAIREIMMEUBLE,
                                      TO_NUMBER(replace(R_CUR.TYPEZONE,' ','')),
                                      R_CUR.REFERENCEPMTECHNIQUE,
                                      NULL, --R_CUR.CATEGORIERACCOLOGEMENT, Supprimé en 2.2
                                      R_CUR.REFPRESTATIONPBS,
                                      TO_NUMBER(replace(R_CUR.NBLOGEMENTPRESTATIONPBS,' ','')),
                                      TO_DATE(R_CUR.DATEMADPRESTATIONPBS,'YYYY/MM/DD'),
                                      R_CUR.REFOFFRECOMMERCIALE,
                                      R_CUR.NATURECR,
                                      TO_DATE(R_CUR.DATMESCOMIMM,'YYYY/MM/DD'),
                                      R_CUR.IMMEUBLENEUF,
                                      TO_DATE(R_CUR.DATPRVLIVIMMNEUF,'YYYY/MM/DD'),
                                      R_CUR.BRASSAGEPMOI,
                                      R_CUR.REFCONSUL,
                                      R_CUR.CODHEXAVOIE,
                                      R_CUR.CODEBAN,
                                      R_CUR.CHMPRSV1,
                                      R_CUR.CHMPRSV2,
                                      R_CUR.CHMPRSV3,
                                      R_CUR.COLMONTPROPOI,
                                      R_CUR.TYPEPBO,
                                      R_CUR.TYPRACCOPBPTO,
                                      TO_DATE(R_CUR.DATDEBACPTCMDACSS,'YYYY/MM/DD'),
                                      TO_DATE(R_CUR.DATDEBFOURCRCMDACSS,'YYYY/MM/DD'),
                                      R_CUR.CODEOI_MAD,
                                      R_CUR.REFPRDM,
                                      R_CUR.REFLIENPMPRDM,
                                      TO_NUMBER(replace(R_CUR.LONGLGNIMM,',','.')),
                                      R_CUR.REFPBO,
                                      R_CUR.DATMADPBO,
                                      R_CUR.NBLOGMTPBO,
                                      R_CUR.CHMPRSV4,
                                      R_CUR.CHMPRSV5,
                                      R_CUR.SUSRACDMD,
                                      R_CUR.CONDSYNDIC,
                                      --3.1
                                      R_CUR.RACCORDEMENTLONG, -- NULL,
                                      R_CUR.ETATZAPM,         -- NULL,
                                      TO_DATE(R_CUR.DATEZAPMCIBLE,'YYYY/MM/DD'),  -- NULL,
                                      R_CUR.SUPPORTINFRAFTTE,    --NULL,
                                      R_CUR.ETATIMMPBSPECIFIQUE, -- NULL,
                                      R_CUR.CHMPRSV6, -- NULL,
                                      R_CUR.CHMPRSV7 --NULL
                                      );
            EXCEPTION
              WHEN OTHERS THEN
                NAT_FF1_DOC.NEW_LOG_FIC_TRT(P_FILE_ID, 'KO', 'Au moins un des champs obligatoires n''est pas conforme à la STI');
            END;
          END;
          IF R_CUR.CODEINSEEPM IS NOT NULL THEN
            vInseePM := R_CUR.CODEINSEEPM;
          ELSE
            vInseePM := 'Insee';
          END IF;
          COMMIT;
        END LOOP;
        --Sauvegarde de la typologie
        FOR R_VERIF_PRJ IN C_VERIF_PRJ(v_idpm) LOOP
          IF R_VERIF_PRJ.PART_ADD IS NOT NULL AND R_VERIF_PRJ.PART_ADD = 'BTL' THEN
              NAT_FF1_QMP_BTOC.NEW_SAUVEGARDE_TYPO_BTL(v_idpm,
                                                      R_VERIF_PRJ.PRJPM_ID,
                                                      'MAD');
          END IF;
        END LOOP;
      END IF;
      IF v_idpm IS NOT NULL THEN
        NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',v_idpm,P_FILE_ID);
        BEGIN
          NAT_FF1.UPD_INFO_ADR_PM_IPE(v_idpm,P_FILE_ID,'CRMAD','3.1' );
        EXCEPTION
          WHEN OTHERS THEN
            plog.ERROR('Erreur lors de la mise à jour de la table ADR_PM','SQLERRM', SQLERRM,'','');
        END;
        BEGIN
          NAT_FF1_TRT_FLX.TRT_CRMAD_IN(P_FILE_ID);
        EXCEPTION
          WHEN OTHERS THEN
            plog.ERROR('Erreur lors du traitement In FF','SQLERRM', SQLERRM,'','');
            NAT_FF1_DOC.NEW_LOG_FIC_TRT(P_FILE_ID, 'KO', 'Erreur lors du traitement In FF');
        END;
    BEGIN
        NAT_FF1_BTMMO.TRT_MMO_CRMAD_IN(P_FILE_ID);
    EXCEPTION
      WHEN OTHERS THEN
        plog.ERROR('Erreur lors du traitement In FF CRMAD insert prcs mmo','SQLERRM', SQLERRM,'','');
            NAT_FF1_DOC.NEW_LOG_FIC_TRT(P_FILE_ID, 'KO', 'Erreur lors du traitement In FF CRMAD insert prcs mmo');
    END;

        -- cloture alerte PM Créé à l¿état déployé sans CR MAD
        NAT_FF1_CR_MAD_PM.CLS_CRMAD_PM_DPL(v_idpm);
        -- cloture alerte CR MAD non Présent : PM déployé dans IPE
        NAT_FF1_CR_MAD_PM.CLS_CRMAD_ETAPM(v_idpm);

        -- S'il y a une demande d'info associé, passer l'état à "MIS A JOUR"
        OPEN C_DMD_INFO(v_idpm);
        FETCH C_DMD_INFO INTO vDMD_INFO_ID;
        IF C_DMD_INFO%FOUND THEN
          NAT_FF1_DMD_INFO.SET_DMD_INFO_MAJ(vDMD_INFO_ID);
        END IF;
        CLOSE C_DMD_INFO;

        -- Controles CR MAD
        NAT_FF1_CR_MAD_PM.CTRL_NON_RCP_CRMAD_PM(v_idpm);
        NAT_FF1_CR_MAD_PM.CTRL_ABS_MOD_SCP(v_idpm);
        NAT_FF1_CR_MAD_PM.CTRL_ABS_REF_PRS(v_idpm);
        NAT_FF1_CR_MAD_PM.CTRL_INC_MOD_SCP(v_idpm);
        NAT_FF1_CR_MAD_PM.CTRL_CRMAD_KO(v_idpm);

        OPEN C_VERIF_PRJ(v_idpm);
        FETCH C_VERIF_PRJ INTO R_VERIF_PRJ;
        vPART_ADD := R_VERIF_PRJ.PART_ADD;
        vFoundPrj := C_VERIF_PRJ%FOUND;
        CLOSE C_VERIF_PRJ;
        /*IF (vPART_ADD IS NOT NULL AND vPART_ADD = 'BTL' ) THEN
          --Contrôle CR MAD projet FEP
          NAT_FF1_CTRL_FEP.CTRL_ABS_CRMAD_OK(v_idpm);
        END IF;*/


        -- Controles Demandes d'info
        NAT_FF1_DMD_INFO.CTRL_AR_RECU_PM(v_idpm);
        -- Contrôle adresse
        vCTRL_ADR_REG_CRMAD := NAT_FF1_CTRL_ADR.CTRL_ADR_REG_CRMAD(v_idpm);

        IF not vFoundPrj THEN
          -- Pas de projet, en ZMD : on essaye de le créer
          IF P_TYPZON = 'ZMD' AND P_CODOI = NAT_FTTH_OI.P_CODOI_SIMPSON THEN
            NAT_FF1_ZMD.NEW_PRJPM(v_idpm,NAT_FTTH_OI.P_CODOC_SIMPSON);
            -- Controle si réception sur un PM abandonné OI
            --vCtrl_ABN_OI := NAT_FF1_CTRL_ZMD.CTRL_CMN_MAD_PM_ABN_OI(v_idpm,NAT_FTTH_OI.P_CODOC_SIMPSON);
          ELSIF P_TYPZON = 'ZMD' AND P_COD_PART_FLUX = 'AXIO' THEN
            NAT_FF1_ZMD.NEW_PRJPM(v_idpm, 'RIP');
            -- Controle si réception sur un PM abandonné OI
            --vCtrl_ABN_OI := NAT_FF1_CTRL_ZMD.CTRL_CMN_MAD_PM_ABN_OI(v_idpm, 'RIP');
          ELSIF P_TYPZON = 'ZMD' AND P_COD_PART_FLUX = 'ALTI' THEN
            NAT_FF1_ZMD.NEW_PRJPM(v_idpm, 'ALT');
            -- Controle si réception sur un PM abandonné OI
            --vCtrl_ABN_OI := NAT_FF1_CTRL_ZMD.CTRL_CMN_MAD_PM_ABN_OI(v_idpm, 'ALT');
          ELSIF P_TYPZON = 'ZMD' AND P_COD_PART_FLUX = 'COVA' THEN
            NAT_FF1_ZMD.NEW_PRJPM(v_idpm, 'COV');
            -- Controle si réception sur un PM abandonné OI
            --vCtrl_ABN_OI := NAT_FF1_CTRL_ZMD.CTRL_CMN_MAD_PM_ABN_OI(v_idpm, 'COV');
          ELSIF P_TYPZON = 'ZMD' AND P_COD_PART_FLUX = 'TDF' THEN
            NAT_FF1_ZMD.NEW_PRJPM(v_idpm, 'TDF');
            -- Controle si réception sur un PM abandonné OI
            --vCtrl_ABN_OI := NAT_FF1_CTRL_ZMD.CTRL_CMN_MAD_PM_ABN_OI(v_idpm, 'TDF');
          ELSIF P_TYPZON = 'ZMD' AND P_COD_PART_FLUX = 'SFRA' THEN
            IF R_GET_PART_FLUX.COD_PART_ADDU = 'RSF' THEN
              NAT_FF1_ZMD.NEW_PRJPM(v_idpm, 'RSF');
            ELSE
              NULL;
            END IF;
          ELSIF P_TYPZON = 'ZMD' AND P_COD_PART_FLUX = NAT_FTTH_OI.P_OC_SIEA THEN
            NAT_FF1_ZMD.NEW_PRJPM(v_idpm, 'SIA');
            -- Controle si réception sur un PM abandonné OI
            --vCtrl_ABN_OI := NAT_FF1_CTRL_ZMD.CTRL_CMN_MAD_PM_ABN_OI(v_idpm, NAT_FTTH_OI.P_CODOC_SIEA);
          END IF;
        ELSIF vETATCRCOMMANDEPM = 'OK' AND R_VERIF_PRJ.ETAPRJPM = 'ABO' THEN
          vCtrl_ABN_OI := NAT_FF1_CTRL.CTRL_PM_MADPM_PRJ_ABO(v_idpm, R_VERIF_PRJ.PRJPM_ID, R_VERIF_PRJ.PART_ADD);
        END IF;
        NAT_FF1_DOC.NEW_LOG_FIC_TRT(P_FILE_ID, 'OK', 'Le CR MAD PM a été traité avec succès');
      END IF;

      COMMIT;

      -- Rebond vers l'OC SFR si on est en ZTD peut importe le partenariat et présence projet ou pas - 27/08
      IF P_TYPZON = 'ZTD' AND R_CUR.ETATCRCOMMANDEPM = 'OK' THEN
        BEGIN
          GEN_REBOND('FTTH_REBOND_CRMADPM_HB', vNomFic,P_FILE_ID,v_idpm);
          BEGIN
            NAT_FF1_TRT_FLX.TRT_CRMAD_OUT(P_FILE_ID);
          EXCEPTION
            WHEN OTHERS THEN
              plog.ERROR('Erreur lors du traitement Out FF','SQLERRM', SQLERRM,'','');
              NAT_FF1_DOC.NEW_LOG_FIC_TRT(P_FILE_ID, 'KO', 'Erreur lors du traitement Out FF');
          END;
        EXCEPTION
          WHEN OTHERS THEN
            plog.ERROR('Erreur lors du rebond CRMAD 3.1 vers le l''OC','SQLERRM', SQLERRM);
            NAT_FF1_DOC.NEW_LOG_FIC_TRT(P_FILE_ID, 'KO', 'Erreur lors du rebond CRMAD 3.1 vers le l''OC');
        END;
      END IF;

      IF rep = 'DIR_FTTH_OI_FT' THEN
        vIfcOutSig :=  'FTTH_SIG_MADPM_OUT_FT';
      ELSIF rep = 'DIR_FTTH_OI_SFR' THEN
        vIfcOutSig := 'FTTH_SIG_HBCRMADPM_OUT_SFR';
      ELSIF rep = 'DIR_FTTH_OI_NC' THEN
        vIfcOutSig := 'FTTH_SIG_MADPM_OUT_NC';
      ELSIF rep = 'DIR_FTTH_AXIONE_BFILE' THEN
        vIfcOutSig := 'FTTH_SIG_MADPM_OUT_SEQ';
      ELSIF rep = 'DIR_FTTH_OI_FREE' THEN
        vIfcOutSig := 'FTTH_SIG_MADPM_OUT_FREE';
      END IF;

      --Rebond -> SIG
      BEGIN
        GEN_REBOND(vIfcOutSig, vNomFic,P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors du rebond CRMAD 3.1 vers le SIG','SQLERRM', SQLERRM);
          NAT_FF1_DOC.NEW_LOG_FIC_TRT(P_FILE_ID, 'KO', 'Erreur lors du rebond CRMAD 3.1 vers le l''OC');
      END;

      --Envoi de l'AR MAD (en 3.0)
       OPEN C_PART_FLUX;
       FETCH C_PART_FLUX INTO R_PART_FLUX;
       CLOSE C_PART_FLUX;

       vCodPartFlux := R_PART_FLUX.COD_PART_FLUX;


       IF (vCodPartFlux = 'FTEL') AND v_idpm IS NOT NULL THEN
         NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_FT(v_idpm);
         vNomIfc := 'FTTH_ARMAD_OUT_FT';
         -- On lance le tranfert SIO2
         vNomIfcSio2 := 'FTTH_SIO2_FT_MAD_OUT';
         --GEN_REBOND( 'FTTH_SIO2_FT_MAD_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
       ELSIF (vCodPartFlux = NAT_FTTH_OI.P_CODOI_SIMPSON) AND v_idpm IS NOT NULL THEN
         NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_SMP (v_idpm);
         vNomIfc := 'FTTH_ARMAD_SMP_OUT'; --> Ne sera pas envoyé
         vNomIfcOfSmp := 'FTTH_ARMAD_OFSMP_OUT'; --> Sera envoyé
         vNomIfcSio2 := 'FTTH_SIO2_SMP_MAD_OUT';
         -- On lance le tranfert SIO2
         --GEN_REBOND( 'FTTH_SIO2_SMP_MAD_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
       ELSIF (vCodPartFlux = 'SFRA') AND v_idpm IS NOT NULL THEN
         NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_SFRA(v_idpm);
         vNomIfc := 'FTTH_ARMAD_OUT_SFRA';
         vNomIfcSio2 := 'FTTH_SIO2_SFR_MAD_OUT';
         -- On lance le tranfert SIO2
         --GEN_REBOND( 'FTTH_SIO2_SFR_MAD_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
       ELSIF (vCodPartFlux = 'NUME') AND v_idpm IS NOT NULL THEN
         NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_NUME(v_idpm);
         vNomIfc := 'FTTH_ARMAD_OUT_NUME';
       ELSIF (vCodPartFlux = 'FREE') AND v_idpm IS NOT NULL THEN
         NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_FREE(v_idpm);
         vNomIfc := 'FTTH_ARMAD_OUT_FREE';
         vNomIfcSio2 := 'FTTH_SIO2_FREE_MAD_OUT';
         -- On lance le tranfert SIO2
         --GEN_REBOND( 'FTTH_SIO2_FREE_MAD_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
       ELSIF (vCodPartFlux = 'ALTI') AND v_idpm IS NOT NULL THEN
         NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_ALTI(v_idpm);
         vNomIfc := 'FTTH_ARMAD_OUT_ALTI';
         vNomIfcSio2 := 'FTTH_SIO2_ALTI_MAD_OUT';
         -- On lance le tranfert SIO2
         --GEN_REBOND( 'FTTH_SIO2_ALTI_MAD_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
       ELSIF (vCodPartFlux = 'AXIO') AND v_idpm IS NOT NULL THEN
          -- On vérifie que le partenaire flux est Axione et on récupère le SIREN
          --> Dans le cas d'axione
          OPEN C_VERIF_OI(vCodPartFlux);
          FETCH C_VERIF_OI INTO R_VERIF_OI;
          vFoundOI := C_VERIF_OI%FOUND;
          CLOSE C_VERIF_OI;

          IF vFoundOI THEN
            NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_AXIO(v_idpm);
            vNomIfc := 'FTTH_ARMAD_OUT_AXIO';
          ELSE
            vNomIfc := NULL;
          END IF;
          vNomIfcSio2 := 'FTTH_SIO2_AXNE_MAD_OUT';
          -- On lance le tranfert SIO2
          --GEN_REBOND( 'FTTH_SIO2_AXNE_MAD_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
        ELSIF (vCodPartFlux = 'TDF') AND v_idpm IS NOT NULL THEN
          -- On vérifie que le partenaire flux est TDF et on récupère le SIREN
          --> Dans le cas de TDF
          OPEN C_VERIF_OI(vCodPartFlux);
          FETCH C_VERIF_OI INTO R_VERIF_OI;
          vFoundOI := C_VERIF_OI%FOUND;
          CLOSE C_VERIF_OI;

          IF vFoundOI THEN
            NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_TDF(v_idpm);
            vNomIfc := 'FTTH_ARMAD_OUT_TDF';
          ELSE
            vNomIfc := NULL;
          END IF;
          vNomIfcSio2 := 'FTTH_SIO2_TDF_MAD_OUT';
          -- On lance le tranfert SIO2
          --GEN_REBOND( 'FTTH_SIO2_CRMADPM_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
          --GEN_REBOND( 'FTTH_SIO2_TDF_MAD_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
        ELSIF (vCodPartFlux = 'COVA') AND v_idpm IS NOT NULL THEN
          -- On vérifie que le partenaire flux est v_idpmCovage
          --> Dans le cas de covage
          OPEN C_VERIF_OI(vCodPartFlux);
          FETCH C_VERIF_OI INTO R_VERIF_OI;
          vFoundOI := C_VERIF_OI%FOUND;
          CLOSE C_VERIF_OI;


          IF vFoundOI AND P_CODOI = 'SEQU' THEN
            NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_COVA(v_idpm);
            vNomIfc := 'FTTH_ARMAD_OUT_COVA';
          ELSIF vFoundOI AND P_CODOI <> 'SEQU' THEN
            NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_COVA(v_idpm);
            vDspCovaRM := NAT_FTTH_RIP_COV.IS_DSP_REMAIN(P_COD_OI => P_CODOI);
            IF vDspCovaRM = 1 THEN
              vNomIfc := 'FTTH_ARMAD_OUT_COVA_ZMD_RM';
            ELSE
            vNomIfc := 'FTTH_ARMAD_OUT_COVA_ZMD';
            END IF;
          ELSE
            vNomIfc := NULL;
          END IF;
          vNomIfcSio2 := 'FTTH_SIO2_COVA_MAD_OUT';
          -- On lance le tranfert SIO2 uniquement en mode IFC
          --GEN_REBOND( 'FTTH_SIO2_CRMADPM_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
          --GEN_REBOND( 'FTTH_SIO2_COVA_MAD_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
        ELSIF (vCodPartFlux = NAT_FTTH_OI.P_OC_SIEA) AND v_idpm IS NOT NULL THEN
          -- On vérifie que le partenaire flux est Axione et on récupère le SIREN
          --> Dans le cas d'axione
          OPEN C_VERIF_OI(vCodPartFlux);
          FETCH C_VERIF_OI INTO R_VERIF_OI;
          vFoundOI := C_VERIF_OI%FOUND;
          CLOSE C_VERIF_OI;

          IF vFoundOI THEN
            NAT_FF1_CR_MAD_PM.SET_C_REFERENCEPM_SIEA(v_idpm);
            vNomIfc := 'FTTH_ARMAD_OUT_SIEA';
          ELSE
            vNomIfc := NULL;
          END IF;
          -- On lance le tranfert SIO2
          --GEN_REBOND( 'FTTH_SIO2_SIEA_MAD_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
          vNomIfcSio2 := 'FTTH_SIO2_SIEA_MAD_OUT';
        ELSE
          vNomIfc := NULL;
          vNomIfcSio2 := NULL;
        END IF;
        -- On lance le tranfert SIO2
        IF vNomIfcSio2 IS NOT NULL THEN
          GEN_REBOND( vNomIfcSio2, R_INFO_IFC.NOM_FIC, P_FILE_ID,v_idpm);
        END IF;

        IF vNomIfc IS NOT NULL THEN
          -- On désactive l'archivage pour les AR MAD Axione
          vidTrt := CMN_IFC.GENERER_INTERFACE(vNomIfc,
                                              (CASE vNomIfc
                                                 WHEN 'FTTH_ARMAD_OUT_AXIO' THEN
                                                   0 --> Pas d'archivage
                                                 ELSE
                                                   1
                                              END),
                                              NULL,
                                              NULL
                                              );
          IF vNomIfc = 'FTTH_ARMAD_OUT_AXIO' THEN
            INSERT INTO ARMAD_AXN_SAVE_ID VALUES (vidTrt);
          END IF;
        END IF;

        IF vidTrt IS NOT NULL THEN
          OPEN C_INFO_IFC_OUT(vidTrt);
          FETCH C_INFO_IFC_OUT INTO R_INFO_IFC_OUT;
          CLOSE C_INFO_IFC_OUT;

          NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => R_INFO_IFC_OUT.FILE_ID,
                               P_TYP_IFC  => 'OUT',
                               P_DATTRT   => SYSDATE,
                               P_IDPM     => v_idpm,
                               P_CODOI    => P_CODOI,
                               P_COD_PART => NULL,
                               P_IFC_ID   => R_INFO_IFC_OUT.IFC_ID,
                               P_PRM_ID   => R_INFO_IFC_OUT.PRM_ID);
        END IF;

        IF vNomIfcOfSmp IS NOT NULL  THEN
          -- On désactive l'archivage pour les AR MAD Axione
          vidTrtOfSmp := CMN_IFC.GENERER_INTERFACE(vNomIfcOfSmp,
                                              1,
                                              NULL,
                                              NULL
                                              );
        END IF;

        IF vidTrtOfSmp IS NOT NULL THEN
          OPEN C_INFO_IFC_OUT(vidTrtOfSmp);
          FETCH C_INFO_IFC_OUT INTO R_INFO_IFC_OUT;
          CLOSE C_INFO_IFC_OUT;

          NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => R_INFO_IFC_OUT.FILE_ID,
                               P_TYP_IFC  => 'OUT',
                               P_DATTRT   => SYSDATE,
                               P_IDPM     => v_idpm,
                               P_CODOI    => 'FTEL',
                               P_COD_PART => NULL,
                               P_IFC_ID   => R_INFO_IFC_OUT.IFC_ID,
                               P_PRM_ID   => R_INFO_IFC_OUT.PRM_ID);
        END IF;

        --Vérification que le fichier CR MAD reçu est bien traité : déclenche une alerte dans le cas d'une réception d'un cr mad mais non traité
        IF R_VERIF_PRJ.PRJPM_ID IS NOT NULL then
          NAT_FF1_CTRL.CTRL_CMD_CRMAD_PM_NON_TRT(P_FILE_ID,R_VERIF_PRJ.PRJPM_ID,v_idpm);
        END IF;
        NAT_FF1_CTRL.CLOSE_ALERTE(R_VERIF_PRJ.PRJPM_ID,
                                  NAT_FF1_CTRL.ID_ALRT_CMD_CRMAD_ABS_ALL,
                                  v_idpm);
    END;

-----------------------------------------------------------------------------------
-- Post Traitement COVA CR MAD PM 3.1
-----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRMADPM_IN_COVA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;

  BEGIN
    vCodOi := NAT_FTTH_OI.GET_OI(P_FILE_ID);
    IF vCodOi = 'SEQU' THEN
      POS_TRT_CRMADPM_V31(P_FILE_ID,'SEQU','ZTD');
    ELSE
      POS_TRT_CRMADPM_V31(P_FILE_ID,vCodOi,'ZMD','COVA');
    END IF;
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement FT CRMAD PM 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRMADPM_IN_FT_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  -- Vérif présence et données PM
    CURSOR C_VERIF_PM IS
      SELECT DISTINCT cpn.REFERENCEPM, cpn.REFERENCENRO
        FROM CPN                      cpn,
             CRD_MAD_PM_FT_31_TMP     crd
       WHERE cpn.CODOI = vCodOi
         AND cpn.REFERENCENRO IS NOT NULL
         AND crd.REFERENCEPM = cpn.REFERENCEPM
         AND NOT EXISTS (SELECT 1
                           FROM PM
                          WHERE pm.IDPM = cpn.REFERENCEPM);
    R_VERIF_PM      C_VERIF_PM%ROWTYPE;

    CURSOR C_ADR_IPE(vIdPM  PM.IDPM%TYPE) IS
      SELECT DISTINCT crd.NUMEROVOIEPM,
             crd.COMPLEMENTVOIEPM,
             crd.CODEINSEEPM,
             crd.CODEPOSTALPM,
             crd.TYPEVOIEPM,
             crd.NOMVOIEPM,
             crd.ETATPM,
             crd.FILE_ID
        FROM CRD_MAD_PM_FT_31_TMP   crd
       WHERE crd.REFERENCEPM = vIdPM;
    R_ADR_IPE       C_ADR_IPE%ROWTYPE;

    CURSOR C_CODEINSEE(vCodeInsee   IPE.CODEINSEEPM%TYPE) IS
      SELECT cmn.COD_INSEE
        FROM BDCOM cmn
       WHERE cmn.COD_INSEE = vCodeInsee;
    R_CODEINSEE     C_CODEINSEE%ROWTYPE;
    vFoundInsee     BOOLEAN;

    CURSOR C_CODEINSEE_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE, vCodePostal    IPE.CODEPOSTALPM%TYPE) IS
      SELECT DISTINCT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.CODPTTCMN = vCodePostal
         AND pos.COD_INSEE = vCodeInsee;
    R_CODEINSEE_CODE_POSTAL    C_CODEINSEE_CODE_POSTAL%ROWTYPE;
    vFoundCP1   BOOLEAN;

    CURSOR C_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE) IS
      SELECT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.COD_INSEE = vCodeInsee
         AND ROWNUM        = 1;
    R_CODE_POSTAL    C_CODE_POSTAL%ROWTYPE;
    vFoundCP2   BOOLEAN;

    CURSOR C_TYPEVOIE(vTypevoie   IPE.TYPEVOIEPM%TYPE) IS
      SELECT btyp.CODVAL AS TYPEVOIEPM
                                  FROM BDMVAL btyp
       WHERE UPPER(btyp.LIBVAL)  = UPPER(vTypevoie)
         AND btyp.LSTVAL_ID     = 'TYPVOI';
    R_TYPEVOIE     C_TYPEVOIE%ROWTYPE;

    CURSOR C_COMPLEMENTVOIE (vComplementvoie    IPE.COMPLEMENTVOIEPM%TYPE) IS
      SELECT bcomp.CODVAL AS COMPLEMENTVOIEPM
                                  FROM BDMVAL bcomp
       WHERE UPPER(bcomp.LIBVAL)  = UPPER(vComplementvoie)
       AND bcomp.LSTVAL_ID     = 'CMPVOI';
    R_COMPLEMENTVOIE     C_COMPLEMENTVOIE%ROWTYPE;

  -- Recherche ZMD
  CURSOR C_TYPZONE_ZMD IS
    SELECT 1
      FROM CRD_MAD_PM_FT_31_TMP cmt
     WHERE cmt.TYPEZONE = 3;
  R_TYPZONE_ZMD C_TYPZONE_ZMD%ROWTYPE;
  vFoundZmd     BOOLEAN;

  -- recherche du pm dans la table temp
  CURSOR C_IDPM IS
    SELECT crmad.REFERENCEPM
      FROM CRD_MAD_PM_FT_31_TMP crmad
     WHERE crmad.REFERENCEPM IS NOT NULL
       AND ROWNUM = 1;
  R_IDPM   C_IDPM%ROWTYPE;
  vFoundPM BOOLEAN;

  -- recherche du pm dans la liste des pm SFOR
  CURSOR C_PM_SFOR(vIDPM   PM.IDPM%TYPE) IS
    SELECT 1
      FROM LST_PM_OF_TO_SFOR lst
     WHERE lst.IDPM = vIDPM
       AND lst.DATMIG IS NOT NULL;
  R_PM_SFOR    C_PM_SFOR%ROWTYPE;
  vFoundSFOR   BOOLEAN;

  -- Alertes
  vAlrtPmCreDpl NUMBER;
  -- Others
  vTYPZON       VARCHAR2(3);

  BEGIN
    vCodOi := NAT_FTTH_OI.GET_OI(P_FILE_ID);

    OPEN C_TYPZONE_ZMD;
    FETCH C_TYPZONE_ZMD INTO R_TYPZONE_ZMD;
    vFoundZmd := C_TYPZONE_ZMD%FOUND;
    CLOSE C_TYPZONE_ZMD;

    -- on récupère l'IDPM pour vérifier qu'il ne fasse pas partie des PM migrés en SFOR
    OPEN C_IDPM;
    FETCH C_IDPM INTO R_IDPM;
    vFoundPM := C_IDPM%FOUND;
    CLOSE C_IDPM;

    IF vFoundPM THEN --> On vérifie quand meme si l'IDPM n'est pas NULL
      OPEN C_PM_SFOR(R_IDPM.REFERENCEPM);
      FETCH C_PM_SFOR INTO R_PM_SFOR;
      vFoundSFOR := C_PM_SFOR%FOUND;
      CLOSE C_PM_SFOR;
    ELSE
      vFoundSFOR := TRUE;  --> Si c'est SFOR (Pour éviter le traitement)
    END IF;

    IF NOT vFoundSFOR THEN --> Si c'est SFOR, alors on ne traite pas
    IF vFoundZmd THEN
      vTYPZON := 'ZMD';
      CLEAN_CRMAD_ZMD_OF_V31 (vCodOi);

      -- Création du PM avec un etat adductable
        FOR R_VERIF_PM IN C_VERIF_PM LOOP
          FOR R_ADR_IPE IN C_ADR_IPE(R_VERIF_PM.REFERENCEPM) LOOP
            OPEN C_CODEINSEE(R_ADR_IPE.CODEINSEEPM);
            FETCH C_CODEINSEE INTO R_CODEINSEE;
            vFoundInsee := C_CODEINSEE%FOUND;
            CLOSE C_CODEINSEE;

            IF vFoundInsee THEN
              OPEN C_CODEINSEE_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM, R_ADR_IPE.CODEPOSTALPM);
              FETCH C_CODEINSEE_CODE_POSTAL INTO R_CODEINSEE_CODE_POSTAL;
              vFoundCP1:= C_CODEINSEE_CODE_POSTAL%FOUND;
              CLOSE C_CODEINSEE_CODE_POSTAL;

              OPEN C_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM);
              FETCH C_CODE_POSTAL INTO R_CODE_POSTAL;
              vFoundCP2:= C_CODE_POSTAL%FOUND;
              CLOSE C_CODE_POSTAL;

              IF vFoundCP1 OR vFoundCP2 THEN
                BEGIN
                  OPEN C_TYPEVOIE(R_ADR_IPE.TYPEVOIEPM);
                  FETCH C_TYPEVOIE INTO R_TYPEVOIE;
                  CLOSE C_TYPEVOIE;

                  OPEN C_COMPLEMENTVOIE(R_ADR_IPE.TYPEVOIEPM);
                  FETCH C_COMPLEMENTVOIE INTO R_COMPLEMENTVOIE;
                  CLOSE C_COMPLEMENTVOIE;

                  NAT_FF1.NEW_PM_FF1(P_IDPM      => R_VERIF_PM.REFERENCEPM,
                                     P_NOMSIT    => R_VERIF_PM.REFERENCEPM,
                                     P_NUMVOI    => R_ADR_IPE.NUMEROVOIEPM,
                                     P_TYPVOI    => R_TYPEVOIE.TYPEVOIEPM,
                                     P_CMPVOI    => R_COMPLEMENTVOIE.COMPLEMENTVOIEPM,
                                     P_NOMVOI    => R_ADR_IPE.NOMVOIEPM,
                                     P_COD_INSEE => R_ADR_IPE.CODEINSEEPM,
                                     P_CODPTTCMN => NVL(R_CODEINSEE_CODE_POSTAL.CODEPOSTALPM, R_CODE_POSTAL.CODEPOSTALPM),
                             P_COD_OI =>      vCodOi,
                                     P_IDNRO     => R_VERIF_PM.REFERENCENRO,
                             P_ETAPM =>       NAT_FF1.P_ADDUCTABLE,
                             P_NOMGEO_COLOC => NULL,
                                     P_TYP_ZONE     => 'ZMD',
                             P_IS_ZA        => 1);

           --> Création d'une alerte systématiquement pour indiquer que la créatoin du PM aurait du se faire bien avant
                vAlrtPmCreDpl := NAT_FF1_CR_MAD_PM.CTRL_PM_CRE_DPL(R_VERIF_PM.REFERENCEPM);
       EXCEPTION
         WHEN OTHERS THEN
           plog.ERROR('Erreur lors de la création du PM via CR MAD 3.1','SQLERRM', SQLERRM);
                    plog.full_error_backtrace('Referencepm', R_VERIF_PM.REFERENCEPM);
                    plog.full_call_stack('File_ID', R_ADR_IPE.FILE_ID);
       END;
              END IF;
            END IF;
          END LOOP;
     END LOOP;
    ELSE
      vTYPZON := 'ZTD';
    END IF;

    POS_TRT_CRMADPM_V31(P_FILE_ID,vCodOi,vTYPZON);

    END IF;
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement SFRA CRMAD PM 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRMADPM_IN_SFRA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
    vTypzon VARCHAR2(3);
    -- Recherche ZMD
    CURSOR C_TYPZONE_ZMD IS
      SELECT 1
        FROM CRD_MAD_PM_SFRA_31_TMP cmt
       WHERE cmt.TYPEZONE = 3;
    R_TYPZONE_ZMD C_TYPZONE_ZMD%ROWTYPE;
    vFoundZmd     BOOLEAN;
    -- PMs à créer
    CURSOR C_VERIF_PM IS
      SELECT DISTINCT cpn.REFERENCEPM, cpn.REFERENCENRO
        FROM CPN                      cpn,
             CRD_MAD_PM_SFRA_31_TMP   crd
       WHERE cpn.CODOI = vCod_Oi
         AND cpn.REFERENCENRO IS NOT NULL
         AND crd.REFERENCEPM = cpn.REFERENCEPM
         AND NOT EXISTS (SELECT 1
                           FROM PM
                          WHERE pm.IDPM = cpn.REFERENCEPM);
    R_VERIF_PM      C_VERIF_PM%ROWTYPE;

    CURSOR C_ADR_IPE(vIdPM  PM.IDPM%TYPE) IS
      SELECT DISTINCT crd.NUMEROVOIEPM,
             crd.COMPLEMENTVOIEPM,
             crd.CODEINSEEPM,
             crd.CODEPOSTALPM,
             crd.TYPEVOIEPM,
             crd.NOMVOIEPM,
             crd.ETATPM,
             crd.FILE_ID
        FROM CRD_MAD_PM_SFRA_31_TMP crd
       WHERE crd.REFERENCEPM = vIdPM;
    R_ADR_IPE       C_ADR_IPE%ROWTYPE;

    CURSOR C_SOUSCRIPTION(vCodeInsee   IPE.CODEINSEEPM%TYPE) IS
      SELECT 1 AS VALEUR
        FROM SOUSCRIPTION s
       WHERE s.COD_INSEE = vCodeInsee
         AND s.COD_OI    = vCod_Oi;
    R_SOUSCRIPTION       C_SOUSCRIPTION%ROWTYPE;
    vFoundScp     BOOLEAN;

    CURSOR C_CODEINSEE(vCodeInsee   IPE.CODEINSEEPM%TYPE) IS
      SELECT cmn.COD_INSEE
        FROM BDCOM cmn
       WHERE cmn.COD_INSEE = vCodeInsee;
    R_CODEINSEE     C_CODEINSEE%ROWTYPE;
    vFoundInsee     BOOLEAN;

    CURSOR C_CODEINSEE_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE, vCodePostal    IPE.CODEPOSTALPM%TYPE) IS
      SELECT DISTINCT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.CODPTTCMN = vCodePostal
         AND pos.COD_INSEE = vCodeInsee;
    R_CODEINSEE_CODE_POSTAL    C_CODEINSEE_CODE_POSTAL%ROWTYPE;
    vFoundCP1   BOOLEAN;

    CURSOR C_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE) IS
      SELECT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.COD_INSEE = vCodeInsee
         AND ROWNUM        = 1;
    R_CODE_POSTAL    C_CODE_POSTAL%ROWTYPE;
    vFoundCP2   BOOLEAN;

    CURSOR C_TYPEVOIE(vTypevoie   IPE.TYPEVOIEPM%TYPE) IS
      SELECT btyp.CODVAL AS TYPEVOIEPM
                                  FROM BDMVAL btyp
       WHERE UPPER(btyp.LIBVAL)  = UPPER(vTypevoie)
         AND btyp.LSTVAL_ID     = 'TYPVOI';
    R_TYPEVOIE     C_TYPEVOIE%ROWTYPE;

    CURSOR C_COMPLEMENTVOIE (vComplementvoie    IPE.COMPLEMENTVOIEPM%TYPE) IS
      SELECT bcomp.CODVAL AS COMPLEMENTVOIEPM
                                  FROM BDMVAL bcomp
       WHERE UPPER(bcomp.LIBVAL)  = UPPER(vComplementvoie)
       AND bcomp.LSTVAL_ID     = 'CMPVOI';
    R_COMPLEMENTVOIE     C_COMPLEMENTVOIE%ROWTYPE;

    CURSOR C_GET_PART_FLUX(vCodeOI VARCHAR2) IS
      SELECT (CASE
                WHEN roi.RIP = 1 THEN
                  'RSF'
                WHEN r.Cod_Oi = 'SFOR' THEN
                  'AMI'
                ELSE 'ZAS'
              END)  AS COD_PART_ADDU
        FROM REF_OI roi,
             REF_OI_PRM r
       WHERE r.COD_OI = vCodeOI
         AND r.COD_PART_FLUX = 'SFRA'
         AND r.OBS  = 0
         AND roi.COD_OI = r.COD_OI
         AND ROWNUM = 1;
    R_GET_PART_FLUX C_GET_PART_FLUX%ROWTYPE;

    vAlrtPmCreDpl NUMBER;

  BEGIN
    -- récuperation de l'OI
    vCod_Oi := NAT_FTTH_OI.GET_OI(P_FILE_ID);

    -- détermine le type de la zone
    OPEN C_TYPZONE_ZMD;
    FETCH C_TYPZONE_ZMD INTO R_TYPZONE_ZMD;
    vFoundZmd := C_TYPZONE_ZMD%FOUND;
    CLOSE C_TYPZONE_ZMD;

    IF vFoundZmd THEN
      vTypzon := 'ZMD';
    ELSE
      vTypzon := 'ZTD';
    END IF;

      -- déterminer le partenaire d'adduction
  OPEN C_GET_PART_FLUX(vCod_Oi);
    FETCH C_GET_PART_FLUX INTO R_GET_PART_FLUX;
  CLOSE C_GET_PART_FLUX;

   -- s'il s'agit du RIP SFR, création des PM avec un etat adductable
  IF R_GET_PART_FLUX.COD_PART_ADDU = 'RSF' THEN
      FOR R_VERIF_PM IN C_VERIF_PM LOOP
        FOR R_ADR_IPE IN C_ADR_IPE(R_VERIF_PM.REFERENCEPM) LOOP
          OPEN C_CODEINSEE(R_ADR_IPE.CODEINSEEPM);
          FETCH C_CODEINSEE INTO R_CODEINSEE;
          vFoundInsee := C_CODEINSEE%FOUND;
          CLOSE C_CODEINSEE;

          IF vFoundInsee THEN
            OPEN C_CODEINSEE_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM, R_ADR_IPE.CODEPOSTALPM);
            FETCH C_CODEINSEE_CODE_POSTAL INTO R_CODEINSEE_CODE_POSTAL;
            vFoundCP1:= C_CODEINSEE_CODE_POSTAL%FOUND;
            CLOSE C_CODEINSEE_CODE_POSTAL;

            OPEN C_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM);
            FETCH C_CODE_POSTAL INTO R_CODE_POSTAL;
            vFoundCP2:= C_CODE_POSTAL%FOUND;
            CLOSE C_CODE_POSTAL;

            IF vFoundCP1 OR vFoundCP2 THEN
              BEGIN
                OPEN C_TYPEVOIE(R_ADR_IPE.TYPEVOIEPM);
                FETCH C_TYPEVOIE INTO R_TYPEVOIE;
                CLOSE C_TYPEVOIE;

                OPEN C_COMPLEMENTVOIE(R_ADR_IPE.TYPEVOIEPM);
                FETCH C_COMPLEMENTVOIE INTO R_COMPLEMENTVOIE;
                CLOSE C_COMPLEMENTVOIE;

                NAT_FF1.NEW_PM_FF1(P_IDPM      => R_VERIF_PM.REFERENCEPM,
                                   P_NOMSIT    => R_VERIF_PM.REFERENCEPM,
                                   P_NUMVOI    => R_ADR_IPE.NUMEROVOIEPM,
                                   P_TYPVOI    => R_TYPEVOIE.TYPEVOIEPM,
                                   P_CMPVOI    => R_COMPLEMENTVOIE.COMPLEMENTVOIEPM,
                                   P_NOMVOI    => R_ADR_IPE.NOMVOIEPM,
                                   P_COD_INSEE => R_ADR_IPE.CODEINSEEPM,
                                   P_CODPTTCMN => NVL(R_CODEINSEE_CODE_POSTAL.CODEPOSTALPM, R_CODE_POSTAL.CODEPOSTALPM),
                           P_COD_OI =>      vCod_Oi,
                                   P_IDNRO     => R_VERIF_PM.REFERENCENRO,
                           P_ETAPM =>       NAT_FF1.P_ADDUCTABLE,
                           P_NOMGEO_COLOC => NULL,
                           P_TYP_ZONE     => 'ZMD',
                           P_IS_ZA        => 1);

              --> Création d'une alerte systématiquement pour indiquer que la créatoin du PM aurait du se faire bien avant
              vAlrtPmCreDpl := NAT_FF1_CR_MAD_PM.CTRL_PM_CRE_DPL(R_VERIF_PM.REFERENCEPM);
       EXCEPTION
         WHEN OTHERS THEN
                  plog.ERROR('Erreur lors de la création du PM via CR MAD 3.1','SQLERRM', SQLERRM);
                  plog.full_error_backtrace('Referencepm', R_VERIF_PM.REFERENCEPM);
                  plog.full_call_stack('File_ID', R_ADR_IPE.FILE_ID);
       END;
            END IF;
          END IF;
        END LOOP;
     END LOOP;
   END IF;

    POS_TRT_CRMADPM_V31(P_FILE_ID, vCod_Oi, vTypzon, 'SFRA');

  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement AXIO CRMAD PM 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRMADPM_IN_AXIO_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS

  vCodOi REF_OI.COD_OI%TYPE;
  -- Vérif présence et données PM
  CURSOR C_VERIF_PM IS
    SELECT DISTINCT cpn.REFERENCEPM, cpn.REFERENCENRO
      FROM CPN                      cpn,
           CRD_MAD_PM_AXIO_31_TMP   crd
     WHERE cpn.CODOI = vCodOi
       AND cpn.REFERENCENRO IS NOT NULL
       AND crd.REFERENCEPM = cpn.REFERENCEPM
       AND NOT EXISTS (SELECT 1
                         FROM PM
                        WHERE pm.IDPM = cpn.REFERENCEPM);
  R_VERIF_PM      C_VERIF_PM%ROWTYPE;

  CURSOR C_ADR_IPE(vIdPM  PM.IDPM%TYPE) IS
    SELECT DISTINCT crd.NUMEROVOIEPM,
           crd.COMPLEMENTVOIEPM,
           crd.CODEINSEEPM,
           crd.CODEPOSTALPM,
           crd.TYPEVOIEPM,
           crd.NOMVOIEPM,
           crd.ETATPM,
           crd.FILE_ID
      FROM CRD_MAD_PM_AXIO_31_TMP crd
     WHERE crd.REFERENCEPM = vIdPM;
  R_ADR_IPE       C_ADR_IPE%ROWTYPE;

  CURSOR C_CODEINSEE(vCodeInsee   IPE.CODEINSEEPM%TYPE) IS
    SELECT cmn.COD_INSEE
      FROM BDCOM cmn
     WHERE cmn.COD_INSEE = vCodeInsee;
  R_CODEINSEE     C_CODEINSEE%ROWTYPE;
  vFoundInsee     BOOLEAN;

  CURSOR C_CODEINSEE_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE, vCodePostal    IPE.CODEPOSTALPM%TYPE) IS
    SELECT DISTINCT pos.CODPTTCMN AS CODEPOSTALPM
      FROM BDCOMPTL pos
     WHERE pos.CODPTTCMN = vCodePostal
       AND pos.COD_INSEE = vCodeInsee;
  R_CODEINSEE_CODE_POSTAL    C_CODEINSEE_CODE_POSTAL%ROWTYPE;
  vFoundCP1   BOOLEAN;

  CURSOR C_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE) IS
    SELECT pos.CODPTTCMN AS CODEPOSTALPM
      FROM BDCOMPTL pos
     WHERE pos.COD_INSEE = vCodeInsee
       AND ROWNUM        = 1;
  R_CODE_POSTAL    C_CODE_POSTAL%ROWTYPE;
  vFoundCP2   BOOLEAN;

  CURSOR C_TYPEVOIE(vTypevoie   IPE.TYPEVOIEPM%TYPE) IS
    SELECT btyp.CODVAL AS TYPEVOIEPM
                                  FROM BDMVAL btyp
     WHERE UPPER(btyp.LIBVAL)  = UPPER(vTypevoie)
       AND btyp.LSTVAL_ID     = 'TYPVOI';
  R_TYPEVOIE     C_TYPEVOIE%ROWTYPE;

  CURSOR C_COMPLEMENTVOIE (vComplementvoie    IPE.COMPLEMENTVOIEPM%TYPE) IS
    SELECT bcomp.CODVAL AS COMPLEMENTVOIEPM
                                  FROM BDMVAL bcomp
     WHERE UPPER(bcomp.LIBVAL)  = UPPER(vComplementvoie)
     AND bcomp.LSTVAL_ID     = 'CMPVOI';
  R_COMPLEMENTVOIE     C_COMPLEMENTVOIE%ROWTYPE;

  -- Alertes
  vAlrtPmCreDpl NUMBER;
  -- Others
  vTYPZON       VARCHAR2(3);

  BEGIN
    vCodOi := NAT_FTTH_OI.GET_OI(P_FILE_ID);

    IF vCodOi <> 'SEQU' THEN
      vTYPZON := 'ZMD';
      -- Création du PM avec un etat adductable
      FOR R_VERIF_PM IN C_VERIF_PM LOOP
        FOR R_ADR_IPE IN C_ADR_IPE(R_VERIF_PM.REFERENCEPM) LOOP
          OPEN C_CODEINSEE(R_ADR_IPE.CODEINSEEPM);
          FETCH C_CODEINSEE INTO R_CODEINSEE;
          vFoundInsee := C_CODEINSEE%FOUND;
          CLOSE C_CODEINSEE;

          IF vFoundInsee THEN
            OPEN C_CODEINSEE_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM, R_ADR_IPE.CODEPOSTALPM);
            FETCH C_CODEINSEE_CODE_POSTAL INTO R_CODEINSEE_CODE_POSTAL;
            vFoundCP1:= C_CODEINSEE_CODE_POSTAL%FOUND;
            CLOSE C_CODEINSEE_CODE_POSTAL;

            OPEN C_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM);
            FETCH C_CODE_POSTAL INTO R_CODE_POSTAL;
            vFoundCP2:= C_CODE_POSTAL%FOUND;
            CLOSE C_CODE_POSTAL;

            IF vFoundCP1 OR vFoundCP2 THEN
              BEGIN
                OPEN C_TYPEVOIE(R_ADR_IPE.TYPEVOIEPM);
                FETCH C_TYPEVOIE INTO R_TYPEVOIE;
                CLOSE C_TYPEVOIE;

                OPEN C_COMPLEMENTVOIE(R_ADR_IPE.TYPEVOIEPM);
                FETCH C_COMPLEMENTVOIE INTO R_COMPLEMENTVOIE;
                CLOSE C_COMPLEMENTVOIE;

                NAT_FF1.NEW_PM_FF1(P_IDPM      => R_VERIF_PM.REFERENCEPM,
                                   P_NOMSIT    => R_VERIF_PM.REFERENCEPM,
                                   P_NUMVOI    => R_ADR_IPE.NUMEROVOIEPM,
                                   P_TYPVOI    => R_TYPEVOIE.TYPEVOIEPM,
                                   P_CMPVOI    => R_COMPLEMENTVOIE.COMPLEMENTVOIEPM,
                                   P_NOMVOI    => R_ADR_IPE.NOMVOIEPM,
                                   P_COD_INSEE => R_ADR_IPE.CODEINSEEPM,
                                   P_CODPTTCMN => NVL(R_CODEINSEE_CODE_POSTAL.CODEPOSTALPM, R_CODE_POSTAL.CODEPOSTALPM),
                             P_COD_OI =>      vCodOi,
                                   P_IDNRO     => R_VERIF_PM.REFERENCENRO,
                             P_ETAPM =>       NAT_FF1.P_ADDUCTABLE,
                             P_NOMGEO_COLOC => NULL,
                             P_TYP_ZONE     => 'ZMD',
                             P_IS_ZA        => 1);

           --> Création d'une alerte systématiquement pour indiquer que la créatoin du PM aurait du se faire bien avant
              vAlrtPmCreDpl := NAT_FF1_CR_MAD_PM.CTRL_PM_CRE_DPL(R_VERIF_PM.REFERENCEPM);
       EXCEPTION
         WHEN OTHERS THEN
           plog.ERROR('Erreur lors de la création du PM via CR MAD 3.1','SQLERRM', SQLERRM);
                  plog.full_error_backtrace('Referencepm', R_VERIF_PM.REFERENCEPM);
                  plog.full_call_stack('File_ID', R_ADR_IPE.FILE_ID);
       END;
            END IF;
          END IF;
        END LOOP;
     END LOOP;
    ELSE
      vTYPZON := 'ZTD';
    END IF;

    POS_TRT_CRMADPM_V31(P_FILE_ID,vCodOi,vTYPZON,'AXIO');

  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement FREE CR MAD PM
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRMADPM_IN_FREE_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    POS_TRT_CRMADPM_V31(P_FILE_ID,'FREE','ZTD');
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement ALTI CRMAD PM
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRMADPM_IN_ALTI_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS

  vCodOi REF_OI.COD_OI%TYPE;
  -- Vérif présence et données PM
  CURSOR C_VERIF_PM IS
    SELECT DISTINCT cpn.REFERENCEPM, cpn.REFERENCENRO
      FROM CPN                      cpn,
           CRD_MAD_PM_AXIO_31_TMP   crd
     WHERE cpn.CODOI = vCodOi
       AND cpn.REFERENCENRO IS NOT NULL
       AND crd.REFERENCEPM = cpn.REFERENCEPM
       AND NOT EXISTS (SELECT 1
                         FROM PM
                        WHERE pm.IDPM = cpn.REFERENCEPM);
  R_VERIF_PM      C_VERIF_PM%ROWTYPE;

  CURSOR C_ADR_IPE(vIdPM  PM.IDPM%TYPE) IS
    SELECT DISTINCT crd.NUMEROVOIEPM,
           crd.COMPLEMENTVOIEPM,
           crd.CODEINSEEPM,
           crd.CODEPOSTALPM,
           crd.TYPEVOIEPM,
           crd.NOMVOIEPM,
           crd.ETATPM,
           crd.FILE_ID
      FROM CRD_MAD_PM_AXIO_31_TMP crd
     WHERE crd.REFERENCEPM = vIdPM;
  R_ADR_IPE       C_ADR_IPE%ROWTYPE;

  CURSOR C_CODEINSEE(vCodeInsee   IPE.CODEINSEEPM%TYPE) IS
    SELECT cmn.COD_INSEE
      FROM BDCOM cmn
     WHERE cmn.COD_INSEE = vCodeInsee;
  R_CODEINSEE     C_CODEINSEE%ROWTYPE;
  vFoundInsee     BOOLEAN;

  CURSOR C_CODEINSEE_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE, vCodePostal    IPE.CODEPOSTALPM%TYPE) IS
    SELECT DISTINCT pos.CODPTTCMN AS CODEPOSTALPM
      FROM BDCOMPTL pos
     WHERE pos.CODPTTCMN = vCodePostal
       AND pos.COD_INSEE = vCodeInsee;
  R_CODEINSEE_CODE_POSTAL    C_CODEINSEE_CODE_POSTAL%ROWTYPE;
  vFoundCP1   BOOLEAN;

  CURSOR C_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE) IS
    SELECT pos.CODPTTCMN AS CODEPOSTALPM
      FROM BDCOMPTL pos
     WHERE pos.COD_INSEE = vCodeInsee
       AND ROWNUM        = 1;
  R_CODE_POSTAL    C_CODE_POSTAL%ROWTYPE;
  vFoundCP2   BOOLEAN;

  CURSOR C_TYPEVOIE(vTypevoie   IPE.TYPEVOIEPM%TYPE) IS
    SELECT btyp.CODVAL AS TYPEVOIEPM
                                  FROM BDMVAL btyp
     WHERE UPPER(btyp.LIBVAL)  = UPPER(vTypevoie)
       AND btyp.LSTVAL_ID     = 'TYPVOI';
  R_TYPEVOIE     C_TYPEVOIE%ROWTYPE;

  CURSOR C_COMPLEMENTVOIE (vComplementvoie    IPE.COMPLEMENTVOIEPM%TYPE) IS
    SELECT bcomp.CODVAL AS COMPLEMENTVOIEPM
                                  FROM BDMVAL bcomp
     WHERE UPPER(bcomp.LIBVAL)  = UPPER(vComplementvoie)
     AND bcomp.LSTVAL_ID     = 'CMPVOI';
  R_COMPLEMENTVOIE     C_COMPLEMENTVOIE%ROWTYPE;

  -- Alertes
  vAlrtPmCreDpl NUMBER;
  -- Others
  vTYPZON       VARCHAR2(3);
  BEGIN
    vCodOi := NAT_FTTH_OI.GET_OI(P_FILE_ID);
    vTYPZON := 'ZMD';

      -- Création du PM avec un etat adductable
    FOR R_VERIF_PM IN C_VERIF_PM LOOP
      FOR R_ADR_IPE IN C_ADR_IPE(R_VERIF_PM.REFERENCEPM) LOOP
        OPEN C_CODEINSEE(R_ADR_IPE.CODEINSEEPM);
        FETCH C_CODEINSEE INTO R_CODEINSEE;
        vFoundInsee := C_CODEINSEE%FOUND;
        CLOSE C_CODEINSEE;

        IF vFoundInsee THEN
          OPEN C_CODEINSEE_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM, R_ADR_IPE.CODEPOSTALPM);
          FETCH C_CODEINSEE_CODE_POSTAL INTO R_CODEINSEE_CODE_POSTAL;
          vFoundCP1:= C_CODEINSEE_CODE_POSTAL%FOUND;
          CLOSE C_CODEINSEE_CODE_POSTAL;

          OPEN C_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM);
          FETCH C_CODE_POSTAL INTO R_CODE_POSTAL;
          vFoundCP2:= C_CODE_POSTAL%FOUND;
          CLOSE C_CODE_POSTAL;

          IF vFoundCP1 OR vFoundCP2 THEN
            BEGIN
              OPEN C_TYPEVOIE(R_ADR_IPE.TYPEVOIEPM);
              FETCH C_TYPEVOIE INTO R_TYPEVOIE;
              CLOSE C_TYPEVOIE;

              OPEN C_COMPLEMENTVOIE(R_ADR_IPE.TYPEVOIEPM);
              FETCH C_COMPLEMENTVOIE INTO R_COMPLEMENTVOIE;
              CLOSE C_COMPLEMENTVOIE;

              NAT_FF1.NEW_PM_FF1(P_IDPM      => R_VERIF_PM.REFERENCEPM,
                                 P_NOMSIT    => R_VERIF_PM.REFERENCEPM,
                                 P_NUMVOI    => R_ADR_IPE.NUMEROVOIEPM,
                                 P_TYPVOI    => R_TYPEVOIE.TYPEVOIEPM,
                                 P_CMPVOI    => R_COMPLEMENTVOIE.COMPLEMENTVOIEPM,
                                 P_NOMVOI    => R_ADR_IPE.NOMVOIEPM,
                                 P_COD_INSEE => R_ADR_IPE.CODEINSEEPM,
                                 P_CODPTTCMN => NVL(R_CODEINSEE_CODE_POSTAL.CODEPOSTALPM, R_CODE_POSTAL.CODEPOSTALPM),
                             P_COD_OI =>      vCodOi,
                                 P_IDNRO     => R_VERIF_PM.REFERENCENRO,
                             P_ETAPM =>       NAT_FF1.P_ADDUCTABLE,
                             P_NOMGEO_COLOC => NULL,
                             P_TYP_ZONE     => 'ZMD',
                             P_IS_ZA        => 1);

           --> Création d'une alerte systématiquement pour indiquer que la créatoin du PM aurait du se faire bien avant
            vAlrtPmCreDpl := NAT_FF1_CR_MAD_PM.CTRL_PM_CRE_DPL(R_VERIF_PM.REFERENCEPM);
       EXCEPTION
         WHEN OTHERS THEN
           plog.ERROR('Erreur lors de la création du PM via CR MAD 3.1','SQLERRM', SQLERRM);
                plog.full_error_backtrace('Referencepm', R_VERIF_PM.REFERENCEPM);
                plog.full_call_stack('File_ID', R_ADR_IPE.FILE_ID);
       END;
          END IF;
        END IF;
      END LOOP;
     END LOOP;

    POS_TRT_CRMADPM_V31(P_FILE_ID,vCodOi,vTYPZON,'ALTI');

  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement TDF CRMAD PM
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRMADPM_IN_TDF_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  -- Vérif présence et données PM
    CURSOR C_VERIF_PM IS
      SELECT DISTINCT cpn.REFERENCEPM, cpn.REFERENCENRO
        FROM CPN                      cpn,
             CRD_MAD_PM_TDF_31_TMP    crd
       WHERE cpn.CODOI = vCodOi
         AND cpn.REFERENCENRO IS NOT NULL
         AND crd.REFERENCEPM = cpn.REFERENCEPM
         AND NOT EXISTS (SELECT 1
                           FROM PM
                          WHERE pm.IDPM = cpn.REFERENCEPM);
    R_VERIF_PM      C_VERIF_PM%ROWTYPE;

    CURSOR C_ADR_IPE(vIdPM  PM.IDPM%TYPE) IS
      SELECT DISTINCT crd.NUMEROVOIEPM,
             crd.COMPLEMENTVOIEPM,
             crd.CODEINSEEPM,
             crd.CODEPOSTALPM,
             crd.TYPEVOIEPM,
             crd.NOMVOIEPM,
             crd.ETATPM,
             crd.FILE_ID
        FROM CRD_MAD_PM_TDF_31_TMP crd
       WHERE crd.REFERENCEPM = vIdPM;
    R_ADR_IPE       C_ADR_IPE%ROWTYPE;

    CURSOR C_CODEINSEE(vCodeInsee   IPE.CODEINSEEPM%TYPE) IS
      SELECT cmn.COD_INSEE
        FROM BDCOM cmn
       WHERE cmn.COD_INSEE = vCodeInsee;
    R_CODEINSEE     C_CODEINSEE%ROWTYPE;
    vFoundInsee     BOOLEAN;

    CURSOR C_CODEINSEE_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE, vCodePostal    IPE.CODEPOSTALPM%TYPE) IS
      SELECT DISTINCT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.CODPTTCMN = vCodePostal
         AND pos.COD_INSEE = vCodeInsee;
    R_CODEINSEE_CODE_POSTAL    C_CODEINSEE_CODE_POSTAL%ROWTYPE;
    vFoundCP1   BOOLEAN;

    CURSOR C_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE) IS
      SELECT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.COD_INSEE = vCodeInsee
         AND ROWNUM        = 1;
    R_CODE_POSTAL    C_CODE_POSTAL%ROWTYPE;
    vFoundCP2   BOOLEAN;

    CURSOR C_TYPEVOIE(vTypevoie   IPE.TYPEVOIEPM%TYPE) IS
      SELECT btyp.CODVAL AS TYPEVOIEPM
                                  FROM BDMVAL btyp
       WHERE UPPER(btyp.LIBVAL)  = UPPER(vTypevoie)
         AND btyp.LSTVAL_ID     = 'TYPVOI';
    R_TYPEVOIE     C_TYPEVOIE%ROWTYPE;

    CURSOR C_COMPLEMENTVOIE (vComplementvoie    IPE.COMPLEMENTVOIEPM%TYPE) IS
      SELECT bcomp.CODVAL AS COMPLEMENTVOIEPM
                                  FROM BDMVAL bcomp
       WHERE UPPER(bcomp.LIBVAL)  = UPPER(vComplementvoie)
       AND bcomp.LSTVAL_ID     = 'CMPVOI';
    R_COMPLEMENTVOIE     C_COMPLEMENTVOIE%ROWTYPE;

  -- Alertes
  vAlrtPmCreDpl NUMBER;
  -- Others
  vTYPZON       VARCHAR2(3);

  BEGIN
    vCodOi := NAT_FTTH_OI.GET_OI(P_FILE_ID);
    vTYPZON := 'ZMD';

      -- Création du PM avec un etat adductable
    FOR R_VERIF_PM IN C_VERIF_PM LOOP
      FOR R_ADR_IPE IN C_ADR_IPE(R_VERIF_PM.REFERENCEPM) LOOP
        OPEN C_CODEINSEE(R_ADR_IPE.CODEINSEEPM);
        FETCH C_CODEINSEE INTO R_CODEINSEE;
        vFoundInsee := C_CODEINSEE%FOUND;
        CLOSE C_CODEINSEE;

        IF vFoundInsee THEN
          OPEN C_CODEINSEE_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM, R_ADR_IPE.CODEPOSTALPM);
          FETCH C_CODEINSEE_CODE_POSTAL INTO R_CODEINSEE_CODE_POSTAL;
          vFoundCP1:= C_CODEINSEE_CODE_POSTAL%FOUND;
          CLOSE C_CODEINSEE_CODE_POSTAL;

          OPEN C_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM);
          FETCH C_CODE_POSTAL INTO R_CODE_POSTAL;
          vFoundCP2:= C_CODE_POSTAL%FOUND;
          CLOSE C_CODE_POSTAL;

          IF vFoundCP1 OR vFoundCP2 THEN
            BEGIN
              OPEN C_TYPEVOIE(R_ADR_IPE.TYPEVOIEPM);
              FETCH C_TYPEVOIE INTO R_TYPEVOIE;
              CLOSE C_TYPEVOIE;

              OPEN C_COMPLEMENTVOIE(R_ADR_IPE.TYPEVOIEPM);
              FETCH C_COMPLEMENTVOIE INTO R_COMPLEMENTVOIE;
              CLOSE C_COMPLEMENTVOIE;

              NAT_FF1.NEW_PM_FF1(P_IDPM      => R_VERIF_PM.REFERENCEPM,
                                 P_NOMSIT    => R_VERIF_PM.REFERENCEPM,
                                 P_NUMVOI    => R_ADR_IPE.NUMEROVOIEPM,
                                 P_TYPVOI    => R_TYPEVOIE.TYPEVOIEPM,
                                 P_CMPVOI    => R_COMPLEMENTVOIE.COMPLEMENTVOIEPM,
                                 P_NOMVOI    => R_ADR_IPE.NOMVOIEPM,
                                 P_COD_INSEE => R_ADR_IPE.CODEINSEEPM,
                                 P_CODPTTCMN => NVL(R_CODEINSEE_CODE_POSTAL.CODEPOSTALPM, R_CODE_POSTAL.CODEPOSTALPM),
                             P_COD_OI =>      vCodOi,
                                 P_IDNRO     => R_VERIF_PM.REFERENCENRO,
                             P_ETAPM =>       NAT_FF1.P_ADDUCTABLE,
                             P_NOMGEO_COLOC => NULL,
                             P_TYP_ZONE     => 'ZMD',
                             P_IS_ZA        => 1);

           --> Création d'une alerte systématiquement pour indiquer que la créatoin du PM aurait du se faire bien avant
            vAlrtPmCreDpl := NAT_FF1_CR_MAD_PM.CTRL_PM_CRE_DPL(R_VERIF_PM.REFERENCEPM);
       EXCEPTION
         WHEN OTHERS THEN
           plog.ERROR('Erreur lors de la création du PM via CR MAD 3.1','SQLERRM', SQLERRM);
                plog.full_error_backtrace('Referencepm', R_VERIF_PM.REFERENCEPM);
                plog.full_call_stack('File_ID', R_ADR_IPE.FILE_ID);
       END;
          END IF;
        END IF;
      END LOOP;
     END LOOP;

    POS_TRT_CRMADPM_V31(P_FILE_ID,vCodOi,vTYPZON,'TDF');

  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement Simpson CRMAD PM
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRMADPM_IN_SMP_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  -- Recherche ZMD
  CURSOR C_TYPZONE_ZMD IS
    SELECT 1
      FROM CRD_MAD_PM_SMP_31_TMP cmt
     WHERE cmt.TYPEZONE = 3;
  R_TYPZONE_ZMD C_TYPZONE_ZMD%ROWTYPE;
  vFoundZmd     BOOLEAN;
    -- Vérif présence et données PM
    CURSOR C_VERIF_PM IS
      SELECT DISTINCT cpn.REFERENCEPM, cpn.REFERENCENRO
        FROM CPN                      cpn,
             CRD_MAD_PM_SMP_31_TMP    crd
       WHERE cpn.CODOI = vCodOi
         AND cpn.REFERENCENRO IS NOT NULL
         AND crd.REFERENCEPM = cpn.REFERENCEPM
         AND NOT EXISTS (SELECT 1
                           FROM PM
                          WHERE pm.IDPM = cpn.REFERENCEPM);
    R_VERIF_PM      C_VERIF_PM%ROWTYPE;

    CURSOR C_ADR_IPE(vIdPM  PM.IDPM%TYPE) IS
      SELECT DISTINCT crd.NUMEROVOIEPM,
             crd.COMPLEMENTVOIEPM,
             crd.CODEINSEEPM,
             crd.CODEPOSTALPM,
             crd.TYPEVOIEPM,
             crd.NOMVOIEPM,
             crd.ETATPM,
             crd.FILE_ID
        FROM CRD_MAD_PM_SMP_31_TMP crd
       WHERE crd.REFERENCEPM = vIdPM;
    R_ADR_IPE       C_ADR_IPE%ROWTYPE;

    CURSOR C_CODEINSEE(vCodeInsee   IPE.CODEINSEEPM%TYPE) IS
      SELECT cmn.COD_INSEE
        FROM BDCOM cmn
       WHERE cmn.COD_INSEE = vCodeInsee;
    R_CODEINSEE     C_CODEINSEE%ROWTYPE;
    vFoundInsee     BOOLEAN;

    CURSOR C_CODEINSEE_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE, vCodePostal    IPE.CODEPOSTALPM%TYPE) IS
      SELECT DISTINCT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.CODPTTCMN = vCodePostal
         AND pos.COD_INSEE = vCodeInsee;
    R_CODEINSEE_CODE_POSTAL    C_CODEINSEE_CODE_POSTAL%ROWTYPE;
    vFoundCP1   BOOLEAN;

    CURSOR C_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE) IS
      SELECT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.COD_INSEE = vCodeInsee
         AND ROWNUM        = 1;
    R_CODE_POSTAL    C_CODE_POSTAL%ROWTYPE;
    vFoundCP2   BOOLEAN;

    CURSOR C_TYPEVOIE(vTypevoie   IPE.TYPEVOIEPM%TYPE) IS
      SELECT btyp.CODVAL AS TYPEVOIEPM
        FROM BDMVAL btyp
       WHERE UPPER(btyp.LIBVAL)  = UPPER(vTypevoie)
         AND btyp.LSTVAL_ID     = 'TYPVOI';
    R_TYPEVOIE     C_TYPEVOIE%ROWTYPE;

    CURSOR C_COMPLEMENTVOIE (vComplementvoie    IPE.COMPLEMENTVOIEPM%TYPE) IS
      SELECT bcomp.CODVAL AS COMPLEMENTVOIEPM
        FROM BDMVAL bcomp
       WHERE UPPER(bcomp.LIBVAL)  = UPPER(vComplementvoie)
       AND bcomp.LSTVAL_ID     = 'CMPVOI';
    R_COMPLEMENTVOIE     C_COMPLEMENTVOIE%ROWTYPE;

  -- Alertes
  vAlrtPmCreDpl NUMBER;
  -- Others
  vTYPZON       VARCHAR2(3);
  BEGIN
    vCodOi := NAT_FTTH_OI.GET_OI(P_FILE_ID);

    OPEN C_TYPZONE_ZMD;
    FETCH C_TYPZONE_ZMD INTO R_TYPZONE_ZMD;
    vFoundZmd := C_TYPZONE_ZMD%FOUND;
    CLOSE C_TYPZONE_ZMD;

    IF vFoundZmd THEN
      vTYPZON := 'ZMD';
      CLEAN_CRMAD_ZMD_SMP_V31 (vCodOi);
      -- Création du PM avec un etat adductable
      FOR R_VERIF_PM IN C_VERIF_PM LOOP
        FOR R_ADR_IPE IN C_ADR_IPE(R_VERIF_PM.REFERENCEPM) LOOP
          OPEN C_CODEINSEE(R_ADR_IPE.CODEINSEEPM);
          FETCH C_CODEINSEE INTO R_CODEINSEE;
          vFoundInsee := C_CODEINSEE%FOUND;
          CLOSE C_CODEINSEE;

          IF vFoundInsee THEN
            OPEN C_CODEINSEE_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM, R_ADR_IPE.CODEPOSTALPM);
            FETCH C_CODEINSEE_CODE_POSTAL INTO R_CODEINSEE_CODE_POSTAL;
            vFoundCP1:= C_CODEINSEE_CODE_POSTAL%FOUND;
            CLOSE C_CODEINSEE_CODE_POSTAL;

            OPEN C_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM);
            FETCH C_CODE_POSTAL INTO R_CODE_POSTAL;
            vFoundCP2:= C_CODE_POSTAL%FOUND;
            CLOSE C_CODE_POSTAL;

            IF vFoundCP1 OR vFoundCP2 THEN
              BEGIN
                OPEN C_TYPEVOIE(R_ADR_IPE.TYPEVOIEPM);
                FETCH C_TYPEVOIE INTO R_TYPEVOIE;
                CLOSE C_TYPEVOIE;

                OPEN C_COMPLEMENTVOIE(R_ADR_IPE.TYPEVOIEPM);
                FETCH C_COMPLEMENTVOIE INTO R_COMPLEMENTVOIE;
                CLOSE C_COMPLEMENTVOIE;

                NAT_FF1.NEW_PM_FF1(P_IDPM      => R_VERIF_PM.REFERENCEPM,
                                   P_NOMSIT    => R_VERIF_PM.REFERENCEPM,
                                   P_NUMVOI    => R_ADR_IPE.NUMEROVOIEPM,
                                   P_TYPVOI    => R_TYPEVOIE.TYPEVOIEPM,
                                   P_CMPVOI    => R_COMPLEMENTVOIE.COMPLEMENTVOIEPM,
                                   P_NOMVOI    => R_ADR_IPE.NOMVOIEPM,
                                   P_COD_INSEE => R_ADR_IPE.CODEINSEEPM,
                                   P_CODPTTCMN => NVL(R_CODEINSEE_CODE_POSTAL.CODEPOSTALPM, R_CODE_POSTAL.CODEPOSTALPM),
                             P_COD_OI =>      vCodOi,
                                   P_IDNRO     => R_VERIF_PM.REFERENCENRO,
                             P_ETAPM =>       NAT_FF1.P_ADDUCTABLE,
                             P_NOMGEO_COLOC => NULL,
                                   P_TYP_ZONE     => 'ZMD',
                             P_IS_ZA        => 1);

           --> Création d'une alerte systématiquement pour indiquer que la créatoin du PM aurait du se faire bien avant
              vAlrtPmCreDpl := NAT_FF1_CR_MAD_PM.CTRL_PM_CRE_DPL(R_VERIF_PM.REFERENCEPM);
       EXCEPTION
         WHEN OTHERS THEN
           plog.ERROR('Erreur lors de la création du PM via CR MAD 3.1','SQLERRM', SQLERRM);
                  plog.full_error_backtrace('Referencepm', R_VERIF_PM.REFERENCEPM);
                  plog.full_call_stack('File_ID', R_ADR_IPE.FILE_ID);
       END;
            END IF;
          END IF;
        END LOOP;
     END LOOP;
    ELSE
      vTYPZON := 'ZTD';
    END IF;

    POS_TRT_CRMADPM_V31(P_FILE_ID,vCodOi,vTYPZON);

  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement SIEA CRMAD PM 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRMADPM_IN_SIEA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCodOi REF_OI.COD_OI%TYPE;
    -- Vérif présence et données PM
    CURSOR C_VERIF_PM IS
      SELECT DISTINCT cpn.REFERENCEPM, cpn.REFERENCENRO
        FROM CPN                      cpn,
             CRD_MAD_PM_SIEA_31_TMP   crd
       WHERE cpn.CODOI = vCodOi
         AND cpn.REFERENCENRO IS NOT NULL
         AND crd.REFERENCEPM = cpn.REFERENCEPM
         AND NOT EXISTS (SELECT 1
                           FROM PM
                          WHERE pm.IDPM = cpn.REFERENCEPM);
    R_VERIF_PM      C_VERIF_PM%ROWTYPE;

    CURSOR C_ADR_IPE(vIdPM  PM.IDPM%TYPE) IS
      SELECT DISTINCT crd.NUMEROVOIEPM,
             crd.COMPLEMENTVOIEPM,
             crd.CODEINSEEPM,
             crd.CODEPOSTALPM,
             crd.TYPEVOIEPM,
             crd.NOMVOIEPM,
             crd.ETATPM,
             crd.FILE_ID
        FROM CRD_MAD_PM_SIEA_31_TMP crd
       WHERE crd.REFERENCEPM = vIdPM;
    R_ADR_IPE       C_ADR_IPE%ROWTYPE;

    CURSOR C_CODEINSEE(vCodeInsee   IPE.CODEINSEEPM%TYPE) IS
      SELECT cmn.COD_INSEE
        FROM BDCOM cmn
       WHERE cmn.COD_INSEE = vCodeInsee;
    R_CODEINSEE     C_CODEINSEE%ROWTYPE;
    vFoundInsee     BOOLEAN;

    CURSOR C_CODEINSEE_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE, vCodePostal    IPE.CODEPOSTALPM%TYPE) IS
      SELECT DISTINCT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.CODPTTCMN = vCodePostal
         AND pos.COD_INSEE = vCodeInsee;
    R_CODEINSEE_CODE_POSTAL    C_CODEINSEE_CODE_POSTAL%ROWTYPE;
    vFoundCP1   BOOLEAN;

    CURSOR C_CODE_POSTAL(vCodeInsee    IPE.CODEINSEEPM%TYPE) IS
      SELECT pos.CODPTTCMN AS CODEPOSTALPM
        FROM BDCOMPTL pos
       WHERE pos.COD_INSEE = vCodeInsee
         AND ROWNUM        = 1;
    R_CODE_POSTAL    C_CODE_POSTAL%ROWTYPE;
    vFoundCP2   BOOLEAN;

    CURSOR C_TYPEVOIE(vTypevoie   IPE.TYPEVOIEPM%TYPE) IS
      SELECT btyp.CODVAL AS TYPEVOIEPM
                                    FROM BDMVAL btyp
       WHERE UPPER(btyp.LIBVAL)  = UPPER(vTypevoie)
         AND btyp.LSTVAL_ID     = 'TYPVOI';
    R_TYPEVOIE     C_TYPEVOIE%ROWTYPE;

    CURSOR C_COMPLEMENTVOIE (vComplementvoie    IPE.COMPLEMENTVOIEPM%TYPE) IS
      SELECT bcomp.CODVAL AS COMPLEMENTVOIEPM
                                    FROM BDMVAL bcomp
       WHERE UPPER(bcomp.LIBVAL)  = UPPER(vComplementvoie)
       AND bcomp.LSTVAL_ID     = 'CMPVOI';
    R_COMPLEMENTVOIE     C_COMPLEMENTVOIE%ROWTYPE;

    -- Alertes
    vAlrtPmCreDpl NUMBER;
    -- Others
    vTYPZON       VARCHAR2(3);

  BEGIN
    vCodOi := NAT_FTTH_OI.GET_OI(P_FILE_ID);
    vTYPZON := 'ZMD';

      -- Création du PM avec un etat adductable
    FOR R_VERIF_PM IN C_VERIF_PM LOOP
      FOR R_ADR_IPE IN C_ADR_IPE(R_VERIF_PM.REFERENCEPM) LOOP
        OPEN C_CODEINSEE(R_ADR_IPE.CODEINSEEPM);
        FETCH C_CODEINSEE INTO R_CODEINSEE;
        vFoundInsee := C_CODEINSEE%FOUND;
        CLOSE C_CODEINSEE;

        IF vFoundInsee THEN
          OPEN C_CODEINSEE_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM, R_ADR_IPE.CODEPOSTALPM);
          FETCH C_CODEINSEE_CODE_POSTAL INTO R_CODEINSEE_CODE_POSTAL;
          vFoundCP1:= C_CODEINSEE_CODE_POSTAL%FOUND;
          CLOSE C_CODEINSEE_CODE_POSTAL;

          OPEN C_CODE_POSTAL(R_ADR_IPE.CODEINSEEPM);
          FETCH C_CODE_POSTAL INTO R_CODE_POSTAL;
          vFoundCP2:= C_CODE_POSTAL%FOUND;
          CLOSE C_CODE_POSTAL;

          IF vFoundCP1 OR vFoundCP2 THEN
            BEGIN
              OPEN C_TYPEVOIE(R_ADR_IPE.TYPEVOIEPM);
              FETCH C_TYPEVOIE INTO R_TYPEVOIE;
              CLOSE C_TYPEVOIE;

              OPEN C_COMPLEMENTVOIE(R_ADR_IPE.TYPEVOIEPM);
              FETCH C_COMPLEMENTVOIE INTO R_COMPLEMENTVOIE;
              CLOSE C_COMPLEMENTVOIE;

              NAT_FF1.NEW_PM_FF1(P_IDPM      => R_VERIF_PM.REFERENCEPM,
                                 P_NOMSIT    => R_VERIF_PM.REFERENCEPM,
                                 P_NUMVOI    => R_ADR_IPE.NUMEROVOIEPM,
                                 P_TYPVOI    => R_TYPEVOIE.TYPEVOIEPM,
                                 P_CMPVOI    => R_COMPLEMENTVOIE.COMPLEMENTVOIEPM,
                                 P_NOMVOI    => R_ADR_IPE.NOMVOIEPM,
                                 P_COD_INSEE => R_ADR_IPE.CODEINSEEPM,
                                 P_CODPTTCMN => NVL(R_CODEINSEE_CODE_POSTAL.CODEPOSTALPM, R_CODE_POSTAL.CODEPOSTALPM),
                             P_COD_OI =>      vCodOi,
                                 P_IDNRO     => R_VERIF_PM.REFERENCENRO,
                             P_ETAPM =>       NAT_FF1.P_ADDUCTABLE,
                             P_NOMGEO_COLOC => NULL,
                             P_TYP_ZONE     => 'ZMD',
                             P_IS_ZA        => 1);

           --> Création d'une alerte systématiquement pour indiquer que la créatoin du PM aurait du se faire bien avant
            vAlrtPmCreDpl := NAT_FF1_CR_MAD_PM.CTRL_PM_CRE_DPL(R_VERIF_PM.REFERENCEPM);
       EXCEPTION
         WHEN OTHERS THEN
           plog.ERROR('Erreur lors de la création du PM via CR MAD 3.1','SQLERRM', SQLERRM);
                plog.full_error_backtrace('Referencepm', R_VERIF_PM.REFERENCEPM);
                plog.full_call_stack('File_ID', R_ADR_IPE.FILE_ID);
       END;
          END IF;
        END IF;
      END LOOP;
     END LOOP;

    POS_TRT_CRMADPM_V31(P_FILE_ID, vCodOi, vTYPZON, 'SIEA');

  END;
-----------------------------------------------------------------------------------
-- Post Traitement PLANMAD 3.1
-----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_PLANMAD_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                                P_CODOI   IN REF_OI.COD_OI%TYPE) IS
  BEGIN
    POS_TRT_PLANMAD_V21(P_FILE_ID,P_CODOI );
  END;
  -----------------------------------------------------------------------------------
  -- Post Traitement COVA PLAN MAD 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_PLANMAD_IN_COVA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_PLANMAD_V31(P_FILE_ID,vCodOi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement FT PLAN MAD 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_PLANMAD_IN_FT_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
  BEGIN
    vCod_Oi := GET_OI(P_FILE_ID);
    POS_TRT_PLANMAD_V31(P_FILE_ID,vCod_Oi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement SFRA PLAN MAD 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_PLANMAD_IN_SFRA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
  BEGIN
    vCod_Oi := GET_OI(P_FILE_ID);
    POS_TRT_PLANMAD_V31(P_FILE_ID,vCod_Oi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement AXIO PLAN MAD 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_PLANMAD_IN_AXIO_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_PLANMAD_V31(P_FILE_ID,vCodOi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement FREE PLAN MAD 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_PLANMAD_IN_FREE_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    POS_TRT_PLANMAD_V31(P_FILE_ID,'FREE');
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement ALTI PLAN MAD 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_PLANMAD_IN_ALTI_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_PLANMAD_V31(P_FILE_ID,vCodOi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement TDF PLAN MAD 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_PLANMAD_IN_TDF_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_PLANMAD_V31(P_FILE_ID,vCodOi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement Simpson PLAN MAD 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_PLANMAD_IN_SMP_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_PLANMAD_V31(P_FILE_ID,vCodOi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement SIEA PLAN MAD 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_PLANMAD_IN_SIEA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_PLANMAD_V31(P_FILE_ID,vCodOi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement Position 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_POSITION_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                                 P_CODOI   IN REF_OI.COD_OI%TYPE) IS
  BEGIN
    POS_TRT_POSITION_V21 (P_FILE_ID,P_CODOI);
  END;
  -----------------------------------------------------------------------------------
  -- Post Traitement COVAGE CRMAD Position 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_POSITION_IN_COVA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCOD_OI REF_OI.COD_OI%TYPE;
  BEGIN
    vCOD_OI := GET_OI(P_FILE_ID);
    POS_TRT_POSITION_V31(P_FILE_ID,vCOD_OI);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement FT CRMAD Position 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_POSITION_IN_FT_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
  BEGIN
    vCod_Oi := GET_OI(P_FILE_ID);
    POS_TRT_POSITION_V31(P_FILE_ID,vCod_Oi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement SFRA CRMAD Position 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_POSITION_IN_SFRA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
  BEGIN
    vCod_Oi := GET_OI(P_FILE_ID);
    POS_TRT_POSITION_V31(P_FILE_ID,vCod_Oi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement AXIONE CRMAD Position 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_POSITION_IN_AXIO_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCOD_OI REF_OI.COD_OI%TYPE;
  BEGIN
    vCOD_OI := GET_OI(P_FILE_ID);
    POS_TRT_POSITION_V31(P_FILE_ID,vCOD_OI);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement FREE CR MAD Position 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_POSITION_IN_FREE_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    POS_TRT_POSITION_V31(P_FILE_ID,'FREE');
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement ALTI CRMAD Position 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_POSITION_IN_ALTI_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCOD_OI REF_OI.COD_OI%TYPE;
  BEGIN
    vCOD_OI := GET_OI(P_FILE_ID);
    POS_TRT_POSITION_V31(P_FILE_ID,vCOD_OI);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement TDF CRMAD Position 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_POSITION_IN_TDF_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCOD_OI REF_OI.COD_OI%TYPE;
  BEGIN
    vCOD_OI := GET_OI(P_FILE_ID);
    POS_TRT_POSITION_V31(P_FILE_ID,vCOD_OI);
  END;
  -----------------------------------------------------------------------------------
  -- Post Traitement Simpson CRMAD Position 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_POSITION_IN_SMP_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
  BEGIN
    vCod_Oi := GET_OI(P_FILE_ID);
    POS_TRT_POSITION_V31(P_FILE_ID,vCod_Oi);
  END;

  -----------------------------------------------------------------------------------
  -- Traitement CRNA 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRNA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                             P_CODOI   IN REF_OI.COD_OI%TYPE) IS

  vGeneratedName VARCHAR2(255);
  v_Fileio_OUT   NUMBER;
  rep            VARCHAR2(255);
  vKeyVal        VARCHAR2(255);
  vRegExp        VARCHAR2(100);
  v_idpm         VARCHAR2(100);
  vIdPmTrt       CRNA_FT_31_TMP.REFERENCEPM%TYPE;
  vId_Preparation    NUMBER;
  vId_PreparationSig NUMBER;
  V_CUR       SYS_REFCURSOR;
  R_CUR       CRNA_FT_31_TMP%ROWTYPE;
  vPRJPM_ID   PRJPM.PRJPM_ID%TYPE;
  -- récupération de la table temporaire
  CURSOR C_GET_TMP IS
    SELECT flx.CRNA_TMP
      FROM PART_FLX   flx,
           REF_OI_PRM rop,
           REF_OI     roi
     WHERE roi.COD_OI = P_CODOI
       AND rop.COD_OI = roi.COD_OI
       AND rop.PRTCL  = '3.1'
       AND rop.OBS    = 0
       AND flx.COD_PART_FLUX = rop.COD_PART_FLUX;
  R_GET_TMP C_GET_TMP%ROWTYPE;
  vFoundTmp BOOLEAN;
  -- Récupération du Projet
  CURSOR C_PRJPM(vIdPm PM.IDPM%TYPE) IS
    SELECT prj.PRJPM_ID
      FROM ETAPRJPM eta,
           PRJPM prj,
           PM    pm
     WHERE pm.IDPM         = vIdpm
       AND prj.GEO_ID      = pm.GEO_ID
       AND prj.NUM_EXTENT  IS NULL
       AND eta.ETAPRJPM_ID = prj.ETAPRJPM_ID
       AND eta.ETAPRJPM    <> 'ABN';
  R_PRJPM C_PRJPM%ROWTYPE;
  vFoundPrj BOOLEAN;

  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID
      FROM FILE_IO f
     WHERE f.FILE_ID = P_FILE_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN

    OPEN C_GET_TMP;
    FETCH C_GET_TMP INTO R_GET_TMP;
    vFoundTmp := C_GET_TMP%FOUND;
    CLOSE C_GET_TMP;

    IF vFoundTmp THEN
      V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(R_GET_TMP.CRNA_TMP);

      SELECT NOM_FIC,
             REP_FIC
        INTO vGeneratedName,
             rep
        FROM FILE_IO
       WHERE FILE_ID =  P_FILE_ID;

        LOOP
          FETCH V_CUR INTO R_CUR;
          EXIT WHEN V_CUR%NOTFOUND;
          DELETE FROM CR_NFA p WHERE p.REFERENCEPM = R_CUR.REFERENCEPM;
          BEGIN
            NAT_FF1_TRT_FLX.INS_CR_NFA(R_CUR.REFERENCEPM,
                                       R_CUR.REFERENCECOMMANDEPMINTERNEOC,
                                       R_CUR.REFERENCEPRESTATIONPM,
                                       TO_DATE(R_CUR.DATECRADDUCTION,'YYYY/MM/DD'),
                                       TO_DATE(R_CUR.DATENOTIFADDUCTION,'YYYY/MM/DD'),
                                       R_CUR.ETATCRADDUCTION,
                                       R_CUR.CODEKOCRADDUCTION,
                                       R_CUR.MOTIFKOCRADDUCTION,
                                       R_CUR.DATE_IMP,
                                       R_CUR.FILE_ID
                                       );
            NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_CUR.REFERENCEPM,P_FILE_ID);
            v_idpm := R_CUR.REFERENCEPM;
            BEGIN
              NAT_FF1_TRT_FLX.TRT_CR_NFA_IN(P_FILE_ID);
            EXCEPTION
              WHEN OTHERS THEN
                plog.ERROR('Erreur lors du traitement In FF','SQLERRM', SQLERRM,'','');
            END;
        END;
      END LOOP;

      SELECT 'CRNA_'||P_CODOI||'_'||v_idpm
        INTO vRegExp
        FROM DUAL;
      NAT_IFC_TRT.UPDATE_FILE_REGEXP(P_FILE_ID,UPPER(vRegExp));
      COMMIT;

       -- Avancement FF
       /*OPEN C_PRJPM(v_idpm);
       FETCH C_PRJPM INTO R_PRJPM;
       vFoundPrj := C_PRJPM%FOUND;
       CLOSE C_PRJPM;

       IF vFoundPrj THEN
         NAT_FF1.AVANCMT_PRJ(R_PRJPM.PRJPM_ID);
       END IF;*/
       FOR R_PRJPM IN C_PRJPM(v_idpm) LOOP
         IF R_PRJPM.PRJPM_ID IS NOT NULL THEN
           NAT_FF1_CTRL.CTRL_ENV_NFA_CRNFA(v_idpm,R_PRJPM.PRJPM_ID);
           NAT_FF1.AVANCMT_PRJ(R_PRJPM.PRJPM_ID);
         END IF;
       END LOOP;
     END IF;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => v_idpm,
                         P_CODOI    => P_CODOI,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement COVAGE CRNA 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRNA_IN_COVA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CRNA_V31(P_FILE_ID,vCodOi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement FTEL CRNA 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRNA_IN_FT_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
  BEGIN
    vCod_Oi := GET_OI(P_FILE_ID);
    POS_TRT_CRNA_V31(P_FILE_ID,vCod_Oi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement SFRA CRNA 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRNA_IN_SFRA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
  BEGIN
    vCod_Oi := GET_OI(P_FILE_ID);
    POS_TRT_CRNA_V31(P_FILE_ID,vCod_Oi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement AXIONE CRNA 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRNA_IN_AXIO_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CRNA_V31(P_FILE_ID,vCodOi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement FREE CRNA 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRNA_IN_FREE_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    POS_TRT_CRNA_V31(P_FILE_ID,'FREE');
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement ALTI CRNA 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRNA_IN_ALTI_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CRNA_V31(P_FILE_ID,vCodOi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement TDF CRNA 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRNA_IN_TDF_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CRNA_V31(P_FILE_ID,vCodOi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement TDF Simpson 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRNA_IN_SMP_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CRNA_V31(P_FILE_ID,vCodOi);
  END;

  -----------------------------------------------------------------------------------
  -- Post Traitement CRNA SIEA 3.1
  -----------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CRNA_IN_SIEA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CRNA_V31(P_FILE_ID,vCodOi);
  END;

 -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN 3.1
  -- fichier de Correspondance PM-NRO
  -- %Param P_FILE_ID  Identifiant informatique du fichier
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE,
                                P_CODOI   IN CPN.CODOI%TYPE,
                                P_TYP     IN VARCHAR2) IS
  V_CUR SYS_REFCURSOR;
  R_CUR CPN_FTEL_31_TMP%ROWTYPE;
  R_CUR_SFOR CPN_SFOR_31_TMP%ROWTYPE;
  -- récupération de la table temporaire
  CURSOR C_GET_TMP IS
    SELECT (CASE P_TYP
             WHEN 'ZSP' THEN
               flx.CPN_ZSP_TMP
             WHEN 'ZMS' THEN
               'CPN_SFOR_31_TMP'
             ELSE
               flx.CPN_TMP
           END) AS CPN_TMP,
           flx.PART_FLUX,
           flx.COD_PART_FLUX,
           DECODE(flx.COD_PART_FLUX, 'ZTD', 'OF_',
                                     'ZMD', 'AMI',
                                     'ZSP', 'AMI',
                                     'ZMS', 'AMI',
                                     'SDIF', 'AST',
                                     'AXIO', 'RIP',
                                     'ALTI', 'ALT',
                                     'COVA', 'COV',
                                     'TDF', 'TDF',
                                     'SIEA', 'SIA',
                                     'SFRA', DECODE(roi.RIP, 1, 'RSF',
                                                             DECODE(roi.COD_OI, 'SFMD', 'ZSF',
                                                                                DECODE(roi.COD_OI, 'SFOR', 'ZSF',
                                                                                                   'ZAS'))),
                                     flx.COD_PART_FLUX) AS PART_ADD_PRJ
      FROM PART_FLX   flx,
           REF_OI_PRM rop,
           REF_OI     roi
     WHERE roi.COD_OI = P_CODOI
       AND rop.COD_OI = roi.COD_OI
      -- AND rop.PRTCL  = '3.0'
       AND rop.OBS    = 0
       AND flx.COD_PART_FLUX = rop.COD_PART_FLUX;
  R_GET_TMP C_GET_TMP%ROWTYPE;
  vFoundTmp BOOLEAN;

  CURSOR C_PRJ(P_IDPM IN PM.IDPM%TYPE, vParAdd IN PRJPM.PART_ADD%TYPE) IS
    SELECT prj.PRJPM_ID,
           prj.AVETAPPRJPM_ID
      FROM PRJPM prj,
           PM    pm
     WHERE pm.IDPM = P_IDPM
       AND prj.GEO_ID = pm.GEO_ID
       AND prj.PART_ADD = vParAdd;

   CURSOR C_SFRPRJ(P_IDPM IN PM.IDPM%TYPE) IS
    SELECT prj.PRJPM_ID,
           prj.AVETAPPRJPM_ID
      FROM PRJPM prj,
           PM    pm
     WHERE pm.IDPM = P_IDPM
       AND prj.GEO_ID = pm.GEO_ID
       AND prj.PART_ADD IN ('ZAS', 'ZSF');

    R_PRJ     C_PRJ%ROWTYPE;
    vFoundPRJ BOOLEAN;

  CURSOR C_PRJ_SFOR(P_IDPM IN PM.IDPM%TYPE) IS
    SELECT prj.PRJPM_ID,
           prj.AVETAPPRJPM_ID
      FROM PRJPM prj,
           PM    pm
     WHERE pm.IDPM = P_IDPM
       AND prj.GEO_ID = pm.GEO_ID
       AND prj.PART_ADD = 'AMI';

  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID,
           f.NOM_FIC
      FROM FILE_IO f
     WHERE f.FILE_ID = P_FILE_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
  -- Le code de l'lOI
  vCodOI REF_OI.COD_OI%TYPE;
  -- Règle d'identification de la réf consultation
  CURSOR C_VERIF_REFCONSUL_14(vRefConsul VARCHAR2) IS
  SELECT 1
    FROM DUAL
   WHERE REGEXP_LIKE(UPPER(vRefConsul),UPPER('*.*S-*.*'));
  R_VERIF_REFCONSUL_14 C_VERIF_REFCONSUL_14%ROWTYPE;
  vFoundRefconsul14 BOOLEAN;
  vREF_CNSLT VARCHAR(255);
  BEGIN
    -- Récupération de la table temporaire
    OPEN C_GET_TMP;
    FETCH C_GET_TMP INTO R_GET_TMP;
    vFoundTmp := C_GET_TMP%FOUND;
    CLOSE C_GET_TMP;

    IF vFoundTmp THEN
      -- On commence par vider la table de référence
      IF P_TYP = 'ZSP' THEN
        DELETE FROM CPN c
         WHERE c.CODOI    = NAT_FTTH_OI.P_CODOI_SIMPSON
           AND c.FROM_ZSP = 1;
      ELSIF P_TYP = 'ZMS' THEN --> Suppression pour les PM Cédes SFOR
        DELETE FROM CPN c
         WHERE c.CODOI    = P_CODOI
           AND c.ZMD_ZSP IS NOT NULL;
      ELSE --> Pour les autres cas
        DELETE FROM CPN c
         WHERE c.CODOI    = P_CODOI
           AND (c.FROM_ZSP IS NULL OR c.fROM_ZSP = 0)
           AND c.ZMD_ZSP IS NULL;
      END IF;
      V_CUR := NAT_FTTH_OI.GET_FTTH_TBL_CONTENT(R_GET_TMP.CPN_TMP);
      IF P_CODOI = 'SFOR' AND P_TYP = 'ZMS' THEN
        -- Alimentation de la table de référence
        LOOP
          FETCH V_CUR INTO R_CUR_SFOR;
          EXIT WHEN V_CUR%NOTFOUND;
          BEGIN

            BEGIN
              NAT_FF1_TRT_FLX.INS_CPN_NEW(P_CODEOI_CPN          => R_CUR_SFOR.CODEOI_CPN,
                                            P_REFERENCEPM       => R_CUR_SFOR.REFERENCEPM,
                                            P_REFPRDM           => R_CUR_SFOR.REFPRDM,
                                            P_REFLIENPMPRDM     => R_CUR_SFOR.REFLIENPMPRDM,
                                            P_REFCONSUL         => R_CUR_SFOR.REFCONSUL,
                                            P_DATMADPRDM        => TO_DATE(R_CUR_SFOR.DATMADPRDM,'YYYYMMDD'),
                                            P_DATMADLIEPMPRDM   => TO_DATE(R_CUR_SFOR.DATMADLIEPMPRDM,'YYYYMMDD'),
                                            P_ETAPRDM           => R_CUR_SFOR.ETAPRDM,
                                            P_ETALIEPMPRDM      => R_CUR_SFOR.ETALIEPMPRDM,
                                            P_ETATPM            => R_CUR_SFOR.ETATPM,
                                            P_TYPSITPRDM        => R_CUR_SFOR.TYPSITPRDM,
                                            P_CODINSEEPRDM      => R_CUR_SFOR.CODINSEEPRDM,
                                            P_CODPOSPRDM        => R_CUR_SFOR.CODPOSPRDM,
                                            P_CMNPRDM           => R_CUR_SFOR.CMNPRDM,
                                            P_TYPVOIPRDM        => R_CUR_SFOR.TYPVOIPRDM,
                                            P_NOMVOIPRDM        => R_CUR_SFOR.NOMVOIPRDM,
                                            P_NUMVOIPRDM        => TO_NUMBER(R_CUR_SFOR.NUMVOIPRDM),
                                            P_CPLMVOIPRDPM      => R_CUR_SFOR.CPLMVOIPRDPM,
                                            P_TYPPJCGEO         => R_CUR_SFOR.TYPPJCGEO,
                                            P_COORDPRDMX        => TO_NUMBER(REPLACE(R_CUR_SFOR.COORDPRDMX,',','.')),
                                            P_COORDPRDMY        => TO_NUMBER(REPLACE(R_CUR_SFOR.COORDPRDMY,',','.')),
                                            P_NBLOGMINPMZAPRDM  => TO_NUMBER(R_CUR_SFOR.NBLOGMINPMZAPRDM),
                                            P_NBFIBOUVLIE       => TO_NUMBER(R_CUR_SFOR.NBFIBOUVLIE),
                                            P_LGRLIEPMPRDM      => TO_NUMBER(REPLACE(R_CUR_SFOR.LGRLIEPMPRDM,',','.')),
                                            P_INFORACCPRDM      => R_CUR_SFOR.INFORACCPRDM,
                                            P_CHMPRSV           => R_CUR_SFOR.CHMPRSV,
                                            P_DATDERMODIF       => TO_DATE(R_CUR_SFOR.DATDERMODIF,'YYYYMMDDHH24MI'),
                                            P_COMMENTAIRE       => R_CUR_SFOR.COMMENTAIRE,
                                            P_DATE_IMP          => R_CUR_SFOR.DATE_IMP,
                                            P_FILE_ID           => R_CUR_SFOR.FILE_ID,
                                            P_ZMD_ZSP           => R_CUR_SFOR.ZMD_ZSP);
                UPDATE CPN c
                   SET c.CODOI = P_CODOI
                 WHERE c.FILE_ID = P_FILE_ID
                   AND c.REFERENCEPM = R_CUR_SFOR.REFERENCEPM;
            EXCEPTION
              WHEN OTHERS THEN
                plog.ERROR('Erreur lors de l''insertion du fichier CPN 3.1','SQLERRM', SQLERRM,'REFERENCEPM',R_CUR_SFOR.REFERENCEPM,'LGRLIEPMPRDM',R_CUR_SFOR.LGRLIEPMPRDM );
            END;
             -- s'il existe un projet SFOR en AMI
            OPEN C_PRJ_SFOR(R_CUR_SFOR.REFERENCEPM);
            FETCH C_PRJ_SFOR INTO R_PRJ;
            vFoundPRJ := C_PRJ_SFOR%FOUND;
            CLOSE C_PRJ_SFOR;
              IF vFoundPRJ THEN
                -- Ajout dans la table de process
                NAT_FF1_ZA.NEW_PRCS_OI_OC_CPN(R_CUR_SFOR.REFERENCEPM,
                                              R_PRJ.PRJPM_ID,
                                              R_PRJ.AVETAPPRJPM_ID);
            /** ELSE
              -- le projet n'existe pas, donc on ajoute le PM à la liste des PM SFOR gérés en AMII OF
              INSERT INTO LST_PM_OF_TO_SFOR (IDPM,
                                             TO_MIG,
                                             DATMIG)
                                     VALUES (R_CUR_SFOR.REFERENCEPM,
                                             0,
                                             NULL); **/
              END IF;
              -- Fermeture alerte si le PM est de nouveau présent dans le CPN
            NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS_CLS(R_CUR_SFOR.REFERENCEPM, 'AMI');
          EXCEPTION
            WHEN OTHERS THEN
              plog.ERROR('Erreur lors de l''insertion du fichier CPN','SQLERRM', SQLERRM,'REFERENCEPM',R_CUR_SFOR.REFERENCEPM );
          END;
        END LOOP;
      ELSE
        -- Alimentation de la table de référence
        LOOP
          FETCH V_CUR INTO R_CUR;
          EXIT WHEN V_CUR%NOTFOUND;
          BEGIN
          vCodOI := P_CODOI;

            BEGIN
              NAT_FF1_TRT_FLX.INS_CPN_NEW(P_CODEOI_CPN          => R_CUR.CODEOI_CPN,
                                            P_REFERENCEPM       => R_CUR.REFERENCEPM,
                                            P_REFPRDM           => R_CUR.REFPRDM,
                                            P_REFLIENPMPRDM     => R_CUR.REFLIENPMPRDM,
                                            P_REFCONSUL         => R_CUR.REFCONSUL,
                                            P_DATMADPRDM        => TO_DATE(R_CUR.DATMADPRDM,'YYYYMMDD'),
                                            P_DATMADLIEPMPRDM   => TO_DATE(R_CUR.DATMADLIEPMPRDM,'YYYYMMDD'),
                                            P_ETAPRDM           => R_CUR.ETAPRDM,
                                            P_ETALIEPMPRDM      => R_CUR.ETALIEPMPRDM,
                                            P_ETATPM            => R_CUR.ETATPM,
                                            P_TYPSITPRDM        => R_CUR.TYPSITPRDM,
                                            P_CODINSEEPRDM      => R_CUR.CODINSEEPRDM,
                                            P_CODPOSPRDM        => R_CUR.CODPOSPRDM,
                                            P_CMNPRDM           => R_CUR.CMNPRDM,
                                            P_TYPVOIPRDM        => R_CUR.TYPVOIPRDM,
                                            P_NOMVOIPRDM        => R_CUR.NOMVOIPRDM,
                                            P_NUMVOIPRDM        => TO_NUMBER(R_CUR.NUMVOIPRDM),
                                            P_CPLMVOIPRDPM      => R_CUR.CPLMVOIPRDPM,
                                            P_TYPPJCGEO         => R_CUR.TYPPJCGEO,
                                            P_COORDPRDMX        => TO_NUMBER(REPLACE(R_CUR.COORDPRDMX,',','.')),
                                            P_COORDPRDMY        => TO_NUMBER(REPLACE(R_CUR.COORDPRDMY,',','.')),
                                            P_NBLOGMINPMZAPRDM  => TO_NUMBER(R_CUR.NBLOGMINPMZAPRDM),
                                            P_NBFIBOUVLIE       => TO_NUMBER(R_CUR.NBFIBOUVLIE),
                                            P_LGRLIEPMPRDM      => TO_NUMBER(REPLACE(R_CUR.LGRLIEPMPRDM,',','.')),
                                            P_INFORACCPRDM      => R_CUR.INFORACCPRDM,
                                            P_CHMPRSV           => R_CUR.CHMPRSV,
                                            P_DATDERMODIF       => TO_DATE(R_CUR.DATDERMODIF,'YYYYMMDDHH24MI'),
                                            P_COMMENTAIRE       => R_CUR.COMMENTAIRE,
                                            P_DATE_IMP          => R_CUR.DATE_IMP,
                                            P_FILE_ID           => R_CUR.FILE_ID,
                                            P_ZMD_ZSP           => NULL);
                UPDATE CPN c
                   SET c.CODOI = vCodOI
                 WHERE c.FILE_ID = P_FILE_ID
                   AND c.REFERENCEPM = R_CUR.REFERENCEPM;
            EXCEPTION
              WHEN OTHERS THEN
                plog.ERROR('Erreur lors de l''insertion du fichier CPN 3.1','SQLERRM', SQLERRM,'REFERENCEPM',R_CUR.REFERENCEPM,'LGRLIEPMPRDM',R_CUR.LGRLIEPMPRDM );
            END;
            IF vCodOI = NAT_FTTH_OI.P_CODOI_SIMPSON THEN
              OPEN C_PRJ(R_CUR.REFERENCEPM, R_GET_TMP.PART_ADD_PRJ);
              FETCH C_PRJ INTO R_PRJ;
              vFoundPRJ := C_PRJ%FOUND;
              CLOSE C_PRJ;
              IF vFoundPRJ THEN
                -- Ajout dans la table de process
                NAT_FF1_ZA.NEW_PRCS_OI_OC_CPN(R_CUR.REFERENCEPM,
                                              R_PRJ.PRJPM_ID,
                                              R_PRJ.AVETAPPRJPM_ID);
              END IF;

              NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS_CLS(R_CUR.REFERENCEPM, R_GET_TMP.PART_ADD_PRJ);
             ELSIF vCodOI IN ('SFOR', 'SFMD') THEN
               OPEN C_SFRPRJ(R_CUR.REFERENCEPM);
               FETCH C_SFRPRJ INTO R_PRJ;
               vFoundPRJ := C_SFRPRJ%FOUND;
               CLOSE C_SFRPRJ;

               IF vFoundPRJ THEN
                  -- Ajout dans la table de process
                  NAT_FF1_ZA.NEW_PRCS_OI_OC_CPN(R_CUR.REFERENCEPM,
                                              R_PRJ.PRJPM_ID,
                                              R_PRJ.AVETAPPRJPM_ID);
              END IF;
              -- Fermeture alerte si le PM est de nouveau présent dans le CPN
              NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS_CLS(R_CUR.REFERENCEPM, R_GET_TMP.PART_ADD_PRJ);

            ELSE
              OPEN C_PRJ(R_CUR.REFERENCEPM, R_GET_TMP.PART_ADD_PRJ);
              FETCH C_PRJ INTO R_PRJ;
              vFoundPRJ := C_PRJ%FOUND;
              CLOSE C_PRJ;
              IF vFoundPRJ THEN
                -- Ajout dans la table de process
                NAT_FF1_RIP.NEW_PRCS_OI_OC_CPN(R_CUR.REFERENCEPM,
                                              R_PRJ.PRJPM_ID,
                                              R_PRJ.AVETAPPRJPM_ID);
              END IF;
              -- Fermeture alerte si le PM est de nouveau présent dans le CPN
              NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS_CLS(R_CUR.REFERENCEPM, R_GET_TMP.PART_ADD_PRJ);

            END IF;
          EXCEPTION
            WHEN OTHERS THEN
              plog.ERROR('Erreur lors de l''insertion du fichier CPN','SQLERRM', SQLERRM,'REFERENCEPM',R_CUR.REFERENCEPM );
          END;
        END LOOP;
      END IF;
      IF P_TYP = 'ZSP' THEN
        UPDATE CPN c
           SET c.FROM_ZSP = 1
         WHERE c.FILE_ID  = P_FILE_ID;
      ELSE
        UPDATE CPN c
           SET c.FROM_ZSP = 0
         WHERE c.FILE_ID  = P_FILE_ID;
      END IF;
    END IF;
      -- Alertes commandes

      BEGIN
        NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_ABS_LONG(P_CODOI);
        NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_ABS_NBLGTS(P_CODOI);
        NAT_FF1_CTRL_CMD_ZMD.CTRL_ZMD_MDF_LONG(P_CODOI);
      EXCEPTION
        when others then
        plog.ERROR('Erreur dans les controles','SQLERRM', SQLERRM,'FILE_ID',P_FILE_ID);
      END;


      CASE R_GET_TMP.COD_PART_FLUX
        WHEN NAT_FTTH_OI.P_CODOI_SIMPSON THEN
          NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS(NAT_FTTH_OI.P_CODOC_SIMPSON);
          -- Controle changement NRO ZMD AMI
          NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO(NAT_FTTH_OI.P_CODOC_SIMPSON);
        WHEN 'SFRA' THEN
          IF P_CODOI = 'SFOR' AND P_TYP = 'ZMS' THEN
          --CPN SFOR provenant du flux Orange
            NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('AMI');
            NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO('AMI');
          ELSIF R_GET_TMP.PART_ADD_PRJ = 'RSF' THEN
            NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('RSF');
            NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO('RSF');
          ELSIF  R_GET_TMP.PART_ADD_PRJ = 'ZSF'  THEN
            NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('ZSF');
            NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO('ZSF');
          ELSE
            NULL;
          END IF;
        WHEN 'AXIO' THEN
          NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('RIP');
          NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO('RIP');
        WHEN 'ALTI' THEN
          NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('ALT');
          NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO('ALT');
        WHEN 'COVA' THEN
          NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('COV');
          NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO('COV');
        WHEN 'TDF' THEN
          NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('TDF');
          NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO('TDF');
        WHEN 'FTEL' THEN
          IF P_CODOI <> 'FTEL' THEN
            NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('OFC');
            NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO('OFC');
          ELSE
            NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS('AMI');
            NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO('AMI');
          END IF;
        WHEN NAT_FTTH_OI.P_OC_SIEA THEN
          NAT_FF1_CTRL_ZMD.CTRL_CMN_CPN_ABS(NAT_FTTH_OI.P_CODOC_SIEA);
          NAT_FF1_CTRL_ZMD.CTRL_CHANGEMENT_NRO(NAT_FTTH_OI.P_CODOC_SIEA);
        ELSE
          NULL;
      END CASE;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => NULL,
                         P_CODOI    => P_CODOI,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
    IF R_GET_TMP.COD_PART_FLUX = 'TDF' THEN
      -- On lance le tranfert SIO2
     --GEN_REBOND( 'FTTH_SIO2_CPN_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID);
      GEN_REBOND( 'FTTH_SIO2_TDF_CPN_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID);
    ELSIF R_GET_TMP.COD_PART_FLUX = 'FTEL' THEN
      GEN_REBOND( 'FTTH_SIO2_OF_CPN_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID);
    ELSIF R_GET_TMP.COD_PART_FLUX = 'AXIO' THEN
      GEN_REBOND( 'FTTH_SIO2_AXNE_CPN_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID);
    ELSIF R_GET_TMP.COD_PART_FLUX = 'COVA' THEN
      GEN_REBOND( 'FTTH_SIO2_COVA_CPN_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID);
    ELSIF R_GET_TMP.COD_PART_FLUX = 'ALTI' THEN
      GEN_REBOND( 'FTTH_SIO2_ALTI_CPN_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID);
    ELSIF R_GET_TMP.COD_PART_FLUX = NAT_FTTH_OI.P_CODOI_SIMPSON THEN
      GEN_REBOND( 'FTTH_SIO2_SMP_CPN_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID);
    ELSIF R_GET_TMP.COD_PART_FLUX = 'SIEA' THEN
      GEN_REBOND( 'FTTH_SIO2_SIEA_CPN_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID);
    ELSIF R_GET_TMP.COD_PART_FLUX = 'SFRA' THEN
      GEN_REBOND( 'FTTH_SIO2_SFR_CPN_OUT', R_INFO_IFC.NOM_FIC, P_FILE_ID);
    END IF;
  END;
  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN COVAGE 3.1
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_COVA_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    update CPN_COVA_31_TMP c
       set c.COMMENTAIRE=substr(COMMENTAIRE,1,instr(COMMENTAIRE, chr(13))-1)
     where instr(COMMENTAIRE, chr(13))>0;

    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CPN_IN_V31(P_FILE_ID,vCodOi,'ZMD');
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN FTEL 3.1
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_FTEL_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
    vTypzon VARCHAR2(3);
  BEGIN
    -- Correction sur le dernier champs
    UPDATE CPN_FTEL_31_TMP Z
       SET Z.COMMENTAIRE =SUBSTR(Z.COMMENTAIRE,1,INSTR(Z.COMMENTAIRE, CHR(13))-1)
     WHERE INSTR(Z.COMMENTAIRE, CHR(13))>0 ;

    vCod_Oi := GET_OI(P_FILE_ID);
    vTypzon := 'ZMD';

    DELETE FROM CPN_FTEL_31_TMP i
     WHERE EXISTS (SELECT 1
                     FROM LST_PM_OF_TO_SFOR l
                    WHERE l.IDPM = i.REFERENCEPM
                      AND l.DATMIG is not null);

    POS_TRT_CPN_IN_V31(P_FILE_ID,vCod_Oi,vTypzon);
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN ZSP FTEL 3.1
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_FTEL_ZSP_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  BEGIN
    -- Correction sur le dernier champs
    UPDATE CPN_FTEL_ZSP_31_TMP Z
       SET Z.COMMENTAIRE =SUBSTR(Z.COMMENTAIRE,1,INSTR(Z.COMMENTAIRE, CHR(13))-1)
     WHERE INSTR(Z.COMMENTAIRE, CHR(13))>0 ;

    DELETE FROM CPN_FTEL_ZSP_31_TMP i
     WHERE EXISTS (SELECT 1
                     FROM LST_PM_OF_TO_SFOR l
                    WHERE l.IDPM = i.REFERENCEPM
                      AND l.DATMIG is not null);

    POS_TRT_CPN_IN_V31(P_FILE_ID,'FTEL','ZSP');
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN FTEL (cas particulier SFOR) 3.1
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_SFOR_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vTypzon VARCHAR2(3);
  BEGIN
    -- Correction sur le dernier champs
    UPDATE CPN_SFOR_31_TMP Z
       SET Z.ZMD_ZSP     =SUBSTR(Z.ZMD_ZSP,1,INSTR(Z.ZMD_ZSP, CHR(13))-1)
     WHERE INSTR(Z.ZMD_ZSP, CHR(13))>0 ;

    vTypzon := 'ZMS';

    POS_TRT_CPN_IN_V31(P_FILE_ID,'SFOR',vTypzon);
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN SEQU (Axione) 3.1
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_AXIO_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    update CPN_AXIO_31_TMP c
       set c.COMMENTAIRE=substr(COMMENTAIRE,1,instr(COMMENTAIRE, chr(13))-1)
     where instr(COMMENTAIRE, chr(13))>0 ;

    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CPN_IN_V31(P_FILE_ID,vCodOi,'ZMD');
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN ALTI 3.1
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_ALTI_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    update CPN_ALTI_31_TMP c
       set c.COMMENTAIRE=substr(COMMENTAIRE,1,instr(COMMENTAIRE, chr(13))-1)
     where instr(COMMENTAIRE, chr(13))>0 ;

    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CPN_IN_V31(P_FILE_ID,vCodOi,'ZMD');
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN TDF 3.1
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_TDF_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    update CPN_TDF_31_TMP c
       set c.COMMENTAIRE=substr(COMMENTAIRE,1,instr(COMMENTAIRE, chr(13))-1)
     where instr(COMMENTAIRE, chr(13))>0 ;

    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CPN_IN_V31(P_FILE_ID,vCodOi,'ZMD');
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN SMP ZMD 3.1
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_SMP_ZMD_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCod_Oi REF_OI.COD_OI%TYPE;
    vTypzon VARCHAR2(3);
  BEGIN
    -- Correction sur le dernier champs
    UPDATE CPN_SMP_ZMD_31_TMP Z
       SET Z.COMMENTAIRE =SUBSTR(Z.COMMENTAIRE,1,INSTR(Z.COMMENTAIRE, CHR(13))-1)
     WHERE INSTR(Z.COMMENTAIRE, CHR(13))>0 ;

    vCod_Oi := GET_OI(P_FILE_ID);
    vTypzon := 'ZMD';

    DELETE FROM CPN_SMP_ZMD_31_TMP i
     WHERE EXISTS (SELECT 1
                     FROM LST_PM_OF_TO_SFOR l
                    WHERE l.IDPM = i.REFERENCEPM
                      AND l.DATMIG is not null);

    POS_TRT_CPN_IN_V31(P_FILE_ID,vCod_Oi,vTypzon);
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN SMP ZSP 3.1
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_SMP_ZSP_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  vCod_Oi REF_OI.COD_OI%TYPE;
  BEGIN
    -- Correction sur le dernier champs
    UPDATE CPN_SMP_ZSP_31_TMP Z
       SET Z.COMMENTAIRE =SUBSTR(Z.COMMENTAIRE,1,INSTR(Z.COMMENTAIRE, CHR(13))-1)
     WHERE INSTR(Z.COMMENTAIRE, CHR(13))>0 ;

    vCod_Oi := GET_OI(P_FILE_ID);

    DELETE FROM CPN_SMP_ZSP_31_TMP i
     WHERE EXISTS (SELECT 1
                     FROM LST_PM_OF_TO_SFOR l
                    WHERE l.IDPM = i.REFERENCEPM
                      AND l.DATMIG is not null);

    POS_TRT_CPN_IN_V31(P_FILE_ID,vCod_Oi,'ZSP');
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier CPN SIEA 3.1
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_CPN_IN_SIEA_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    vCodOi REF_OI.COD_OI%TYPE;
  BEGIN
    update CPN_SIEA_31_TMP c
       set c.COMMENTAIRE=substr(COMMENTAIRE,1,instr(COMMENTAIRE, chr(13))-1)
     where instr(COMMENTAIRE, chr(13))>0 ;

    vCodOi := GET_OI(P_FILE_ID);
    POS_TRT_CPN_IN_V31(P_FILE_ID,vCodOi,'ZMD');
  END;
  -------------------------------------------------------------------------------
  -- Post traitement du fichier AR MAD NRO PM COVA 3.1
  -- fichier de CR de commande de lien
  -- %Param P_FILE_ID  Identifiant informatique du fichier
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_ARCMD_PM_IN_COVA_V31(P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  CURSOR C_AR_CMD_PM IS
    SELECT REFERENCEPM,
           REFERENCECOMMANDEPMINTERNEOC,
           TO_DATE(DATEARCOMMANDEPM,'YYYY/MM/DD') AS DATEARCOMMANDEPM,
           REFERENCEPRESTATIONPM,
           ETATARCOMMANDEPM,
           MOTIFARCOMMANDEPM,
           DATE_IMP,
           FILE_ID
      FROM AR_CMD_PM_COVA_31_TMP
     WHERE FILE_ID = P_FILE_ID;

    R_AR_CMD_PM C_AR_CMD_PM%ROWTYPE;

    vIdPmTrt       VARCHAR2(255);
    vCodOi REF_OI.COD_OI%TYPE;

  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID
      FROM FILE_IO f
     WHERE f.FILE_ID = P_FILE_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    BEGIN
      SELECT DISTINCT REFERENCEPM
        INTO vIdPmTrt
        FROM AR_CMD_PM_COVA_31_TMP a
       WHERE a.FILE_ID = P_FILE_ID;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la recuperation de l''IDPM de la table temp','SQLERRM', SQLERRM,'','');
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;

    OPEN C_AR_CMD_PM;
    FETCH C_AR_CMD_PM INTO R_AR_CMD_PM;

    IF vIdPmTrt IS NOT NULL  THEN
      BEGIN
        NAT_FF1_TRT_FLX.TRT_ARCMD_IN(R_AR_CMD_PM.FILE_ID,
                                     R_AR_CMD_PM.REFERENCEPM,
                                     R_AR_CMD_PM.REFERENCECOMMANDEPMINTERNEOC,
                                     R_AR_CMD_PM.DATEARCOMMANDEPM,
                                     R_AR_CMD_PM.REFERENCEPRESTATIONPM,
                                     R_AR_CMD_PM.ETATARCOMMANDEPM,
                                     R_AR_CMD_PM.MOTIFARCOMMANDEPM
                                     );
        NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_AR_CMD_PM.REFERENCEPM,P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors de l''insert dans la table fonctionnelle  AR_CMD_PM','SQLERRM', SQLERRM,'','');
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      END;
    ELSE
      plog.ERROR('AR existe deja pour ce PM','REFERENCEPM', R_AR_CMD_PM.REFERENCEPM,'','');
      plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
    END IF;
    CLOSE C_AR_CMD_PM;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => R_AR_CMD_PM.REFERENCEPM,
                         P_CODOI    => vCodOi,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
  END;
 -------------------------------------------------------------------------------
  -- Post traitement du fichier AR MAD NRO PM FREE 3.1
  -- fichier de CR de commande de lien
  -- %Param P_FILE_ID  Identifiant informatique du fichier
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_ARCMD_PM_IN_FREE_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  CURSOR C_AR_CMD_PM IS
    SELECT REFERENCEPM,
           REFERENCECOMMANDEPMINTERNEOC,
           TO_DATE(DATEARCOMMANDEPM,'YYYY/MM/DD') AS DATEARCOMMANDEPM,
           REFERENCEPRESTATIONPM,
           ETATARCOMMANDEPM,
           MOTIFARCOMMANDEPM,
           DATE_IMP,
           FILE_ID
      FROM AR_CMD_PM_FREE_31_TMP
     WHERE FILE_ID = P_FILE_ID;

    R_AR_CMD_PM C_AR_CMD_PM%ROWTYPE;

    vIdPmTrt       VARCHAR2(255);
  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID
      FROM FILE_IO f
     WHERE f.FILE_ID = P_FILE_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
    BEGIN
      SELECT DISTINCT REFERENCEPM
        INTO vIdPmTrt
        FROM AR_CMD_PM_FREE_31_TMP a
       WHERE a.FILE_ID = FILE_ID;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la recuperation de l''IDPM de la table temp','SQLERRM', SQLERRM,'','');
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;

    OPEN C_AR_CMD_PM;
    FETCH C_AR_CMD_PM INTO R_AR_CMD_PM;

    IF vIdPmTrt IS NOT NULL  THEN
      BEGIN
        NAT_FF1_TRT_FLX.TRT_ARCMD_IN(R_AR_CMD_PM.FILE_ID,
                                     R_AR_CMD_PM.REFERENCEPM,
                                     R_AR_CMD_PM.REFERENCECOMMANDEPMINTERNEOC,
                                     R_AR_CMD_PM.DATEARCOMMANDEPM,
                                     R_AR_CMD_PM.REFERENCEPRESTATIONPM,
                                     R_AR_CMD_PM.ETATARCOMMANDEPM,
                                     R_AR_CMD_PM.MOTIFARCOMMANDEPM
                                     );
        NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_AR_CMD_PM.REFERENCEPM,P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors de l''insert dans la table fonctionnelle  AR_CMD_PM','SQLERRM', SQLERRM,'','');
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      END;
    ELSE
      plog.ERROR('AR existe deja pour ce PM','REFERENCEPM', R_AR_CMD_PM.REFERENCEPM,'','');
      plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
    END IF;
    CLOSE C_AR_CMD_PM;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => R_AR_CMD_PM.REFERENCEPM,
                         P_CODOI    => 'FREE',
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
  END;

 -------------------------------------------------------------------------------
  -- Post traitement du fichier AR MAD NRO PM TDF 3.1
  -- fichier de CR de commande de lien
  -- %Param P_FILE_ID  Identifiant informatique du fichier
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_ARCMD_PM_IN_TDF_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  CURSOR C_AR_CMD_PM IS
    SELECT REFERENCEPM,
           REFERENCECOMMANDEPMINTERNEOC,
           TO_DATE(DATEARCOMMANDEPM,'YYYY/MM/DD') AS DATEARCOMMANDEPM,
           REFERENCEPRESTATIONPM,
           ETATARCOMMANDEPM,
           MOTIFARCOMMANDEPM,
           DATE_IMP,
           FILE_ID
      FROM AR_CMD_PM_TDF_31_TMP
     WHERE FILE_ID = P_FILE_ID;

    R_AR_CMD_PM C_AR_CMD_PM%ROWTYPE;

    vIdPmTrt       VARCHAR2(255);
    vCodOi REF_OI.COD_OI%TYPE;

  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID
      FROM FILE_IO f
     WHERE f.FILE_ID = P_FILE_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    BEGIN
      SELECT DISTINCT REFERENCEPM
        INTO vIdPmTrt
        FROM AR_CMD_PM_TDF_31_TMP a
       WHERE a.FILE_ID = P_FILE_ID;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la recuperation de l''IDPM de la table temp','SQLERRM', SQLERRM,'','');
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;

    OPEN C_AR_CMD_PM;
    FETCH C_AR_CMD_PM INTO R_AR_CMD_PM;

    IF vIdPmTrt IS NOT NULL  THEN
      BEGIN
        NAT_FF1_TRT_FLX.TRT_ARCMD_IN(R_AR_CMD_PM.FILE_ID,
                                     R_AR_CMD_PM.REFERENCEPM,
                                     R_AR_CMD_PM.REFERENCECOMMANDEPMINTERNEOC,
                                     R_AR_CMD_PM.DATEARCOMMANDEPM,
                                     R_AR_CMD_PM.REFERENCEPRESTATIONPM,
                                     R_AR_CMD_PM.ETATARCOMMANDEPM,
                                     R_AR_CMD_PM.MOTIFARCOMMANDEPM
                                     );
        NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_AR_CMD_PM.REFERENCEPM,P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors de l''insert dans la table fonctionnelle  AR_CMD_PM','SQLERRM', SQLERRM,'','');
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      END;
    ELSE
      plog.ERROR('AR existe deja pour ce PM','REFERENCEPM', R_AR_CMD_PM.REFERENCEPM,'','');
      plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
    END IF;
    CLOSE C_AR_CMD_PM;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => R_AR_CMD_PM.REFERENCEPM,
                         P_CODOI    => vCodOi,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
  END;
  -------------------------------------------------------------------------------
  -- Post traitement du fichier AR MAD NRO PM ALTI 3.1
  -- fichier de CR de commande de lien
  -- %Param P_FILE_ID  Identifiant informatique du fichier
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_ARCMD_PM_IN_ALTI_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  CURSOR C_AR_CMD_PM IS
    SELECT REFERENCEPM,
           REFERENCECOMMANDEPMINTERNEOC,
           TO_DATE(DATEARCOMMANDEPM,'YYYY/MM/DD') AS DATEARCOMMANDEPM,
           REFERENCEPRESTATIONPM,
           ETATARCOMMANDEPM,
           a.MOTIFARCOMMANDEPM,
           DATE_IMP,
           FILE_ID
      FROM AR_CMD_PM_ALTI_31_TMP a
     WHERE FILE_ID = P_FILE_ID;

    R_AR_CMD_PM C_AR_CMD_PM%ROWTYPE;

    vIdPmTrt       VARCHAR2(255);
    vCodOi REF_OI.COD_OI%TYPE;

  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID
      FROM FILE_IO f
     WHERE f.FILE_ID = P_FILE_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    BEGIN
      SELECT DISTINCT REFERENCEPM
        INTO vIdPmTrt
        FROM AR_CMD_PM_ALTI_31_TMP a
       WHERE a.FILE_ID = P_FILE_ID;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la recuperation de l''IDPM de la table temp','SQLERRM', SQLERRM,'','');
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;

    OPEN C_AR_CMD_PM;
    FETCH C_AR_CMD_PM INTO R_AR_CMD_PM;

    IF vIdPmTrt IS NOT NULL  THEN
      BEGIN
        NAT_FF1_TRT_FLX.TRT_ARCMD_IN(R_AR_CMD_PM.FILE_ID,
                                     R_AR_CMD_PM.REFERENCEPM,
                                     R_AR_CMD_PM.REFERENCECOMMANDEPMINTERNEOC,
                                     R_AR_CMD_PM.DATEARCOMMANDEPM,
                                     R_AR_CMD_PM.REFERENCEPRESTATIONPM,
                                     R_AR_CMD_PM.ETATARCOMMANDEPM,
                                     R_AR_CMD_PM.MOTIFARCOMMANDEPM
                                     );
        NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_AR_CMD_PM.REFERENCEPM,P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors de l''insert dans la table fonctionnelle  AR_CMD_PM','SQLERRM', SQLERRM,'','');
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      END;
    ELSE
      plog.ERROR('AR existe deja pour ce PM','REFERENCEPM', R_AR_CMD_PM.REFERENCEPM,'','');
      plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
    END IF;
    CLOSE C_AR_CMD_PM;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => R_AR_CMD_PM.REFERENCEPM,
                         P_CODOI    => vCodOi,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier AR Commande PM Simpson 3.1
  -- fichier de CR de commande de lien
  -- %Param P_FILE_ID  Identifiant informatique du fichier
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_ARCMD_IN_SMP_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  CURSOR C_AR_CMD_PM IS
    SELECT REFERENCEPM,
           REFERENCECOMMANDEPMINTERNEOC,
           TO_DATE(DATEARCOMMANDEPM,'YYYY/MM/DD') AS DATEARCOMMANDEPM,
           REFERENCEPRESTATIONPM,
           ETATARCOMMANDEPM,
           a.MOTIFARCOMMANDEPM,
           DATE_IMP,
           FILE_ID
      FROM AR_CMD_PM_SMP_31_TMP a
     WHERE FILE_ID = P_FILE_ID;

    R_AR_CMD_PM C_AR_CMD_PM%ROWTYPE;

    vIdPmTrt       VARCHAR2(255);
    vCodOi REF_OI.COD_OI%TYPE;

  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID
      FROM FILE_IO f
     WHERE f.FILE_ID = P_FILE_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    BEGIN
      SELECT DISTINCT REFERENCEPM
        INTO vIdPmTrt
        FROM AR_CMD_PM_SMP_31_TMP a
       WHERE a.FILE_ID = P_FILE_ID;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la recuperation de l''IDPM de la table temp','SQLERRM', SQLERRM,'','');
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;

    OPEN C_AR_CMD_PM;
    FETCH C_AR_CMD_PM INTO R_AR_CMD_PM;

    IF vIdPmTrt IS NOT NULL  THEN
      BEGIN
        NAT_FF1_TRT_FLX.TRT_ARCMD_IN(R_AR_CMD_PM.FILE_ID,
                                     R_AR_CMD_PM.REFERENCEPM,
                                     R_AR_CMD_PM.REFERENCECOMMANDEPMINTERNEOC,
                                     R_AR_CMD_PM.DATEARCOMMANDEPM,
                                     R_AR_CMD_PM.REFERENCEPRESTATIONPM,
                                     R_AR_CMD_PM.ETATARCOMMANDEPM,
                                     R_AR_CMD_PM.MOTIFARCOMMANDEPM
                                     );
        NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_AR_CMD_PM.REFERENCEPM,P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors de l''insert dans la table fonctionnelle  AR_CMD_PM','SQLERRM', SQLERRM,'','');
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      END;
    ELSE
      plog.ERROR('AR existe deja pour ce PM','REFERENCEPM', R_AR_CMD_PM.REFERENCEPM,'','');
      plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
    END IF;
    CLOSE C_AR_CMD_PM;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => R_AR_CMD_PM.REFERENCEPM,
                         P_CODOI    => vCodOi,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier AR Commande PM SFRA 3.1
  -- fichier de CR de commande de lien
  -- %Param P_FILE_ID  Identifiant informatique du fichier
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_ARCMD_PM_IN_SFRA_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  CURSOR C_AR_CMD_PM IS
    SELECT REFERENCEPM,
           REFERENCECOMMANDEPMINTERNEOC,
           TO_DATE(DATEARCOMMANDEPM,'YYYY/MM/DD') AS DATEARCOMMANDEPM,
           REFERENCEPRESTATIONPM,
           ETATARCOMMANDEPM,
           MOTIFKOARCOMMANDEPM,
           DATE_IMP,
           FILE_ID
      FROM AR_CMD_PM_SFRA_31_TMP
     WHERE FILE_ID = P_FILE_ID;

    R_AR_CMD_PM C_AR_CMD_PM%ROWTYPE;

    vIdPmTrt       VARCHAR2(255);
    CURSOR C_VERIF_AR(vReferencePm AR_CMD_PM.REFERENCEPM%TYPE) IS
      SELECT REFERENCEPM
        FROM AR_CMD_PM
       WHERE REFERENCEPM = vReferencePm;
    R_VERIF_AR C_VERIF_AR%ROWTYPE;
    vFoundAr   BOOLEAN;

    vCodOi REF_OI.COD_OI%TYPE;

    CURSOR C_INFO_IFC IS
      SELECT f.IFC_ID,
             f.PRM_ID
        FROM FILE_IO f
       WHERE f.FILE_ID = P_FILE_ID;
    R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
    vCodOi := NAT_FTTH_OI.GET_OI(P_FILE_ID);
    BEGIN
      SELECT DISTINCT REFERENCEPM
        INTO vIdPmTrt
        FROM AR_CMD_PM_SFRA_31_TMP a
       WHERE a.FILE_ID = P_FILE_ID;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la recuperation de l''IDPM de la table temp','SQLERRM', SQLERRM,'','');
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;

    OPEN C_AR_CMD_PM;
    FETCH C_AR_CMD_PM INTO R_AR_CMD_PM;

    OPEN C_VERIF_AR(R_AR_CMD_PM.REFERENCEPM);
    FETCH C_VERIF_AR INTO R_VERIF_AR;
    vFoundAR := C_VERIF_AR%FOUND;
    CLOSE C_VERIF_AR;

    IF /*not vFoundAR AND*/ vIdPmTrt IS NOT NULL  THEN
      BEGIN
        NAT_FF1_TRT_FLX.TRT_ARCMD_IN(R_AR_CMD_PM.FILE_ID,
                                     R_AR_CMD_PM.REFERENCEPM,
                                     R_AR_CMD_PM.REFERENCECOMMANDEPMINTERNEOC,
                                     R_AR_CMD_PM.DATEARCOMMANDEPM,
                                     R_AR_CMD_PM.REFERENCEPRESTATIONPM,
                                     R_AR_CMD_PM.ETATARCOMMANDEPM,
                                     R_AR_CMD_PM.MOTIFKOARCOMMANDEPM
                                     );
        NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_AR_CMD_PM.REFERENCEPM,P_FILE_ID);

        OPEN C_INFO_IFC;
        FETCH C_INFO_IFC INTO R_INFO_IFC;
        CLOSE C_INFO_IFC;

        DELETE FIC_FTTH WHERE FILE_ID = P_FILE_ID;

        NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                          P_TYP_IFC     => 'IN',
                          P_DATTRT   => SYSDATE,
                          P_IDPM     => vIdPmTrt,
                          P_CODOI    => vCodOi,
                          P_COD_PART => NULL,
                          P_IFC_ID   => R_INFO_IFC.IFC_ID,
                          P_PRM_ID   => R_INFO_IFC.PRM_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors de l''insert dans la table fonctionnelle AR_CMD_PM','SQLERRM', SQLERRM,'','');
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      END;
    ELSE
      plog.ERROR('AR existe deja pour ce PM','REFERENCEPM', R_AR_CMD_PM.REFERENCEPM,'','');
      plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
    END IF;
    CLOSE C_AR_CMD_PM;
  END;
---------------------------------------------------------
-- Post-traitement de la sous-interface ARCMD_PM_IN_FT_V31
-- %PARAM P_FILEIO_ID identifiant du fichier a traiter
---------------------------------------------------------
  PROCEDURE POS_TRT_ARCMD_PM_IN_FT_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE)IS
  CURSOR C_AR_CMD_PM IS
    SELECT REFERENCEPM,
           REFERENCECOMMANDEPMINTERNEOC,
           TO_DATE(DATEARCOMMANDEPM,'YYYY/MM/DD') AS DATEARCOMMANDEPM,
           REFERENCEPRESTATIONPM,
           ETATARCOMMANDEPM,
           MOTIFKOARCOMMANDEPM,
           DATE_IMP,
           FILE_ID
      FROM AR_CMD_PM_FT_31_TMP
     WHERE FILE_ID = P_FILE_ID;

    R_AR_CMD_PM C_AR_CMD_PM%ROWTYPE;

    vIdPmTrt       VARCHAR2(255);
    CURSOR C_VERIF_AR(vReferencePm AR_CMD_PM.REFERENCEPM%TYPE) IS
      SELECT REFERENCEPM
        FROM AR_CMD_PM
       WHERE REFERENCEPM = vReferencePm;
    R_VERIF_AR C_VERIF_AR%ROWTYPE;
    vFoundAr   BOOLEAN;

    CURSOR C_INFO_IFC IS
      SELECT f.IFC_ID,
             f.PRM_ID
        FROM FILE_IO f
       WHERE f.FILE_ID = P_FILE_ID;
    R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
    BEGIN
      SELECT DISTINCT REFERENCEPM
        INTO vIdPmTrt
        FROM AR_CMD_PM_FT_31_TMP a
       WHERE a.FILE_ID = P_FILE_ID;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la recuperation de l''IDPM de la table temp','SQLERRM', SQLERRM,'','');
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;

    OPEN C_AR_CMD_PM;
    FETCH C_AR_CMD_PM INTO R_AR_CMD_PM;
    CLOSE C_AR_CMD_PM;
  /*  OPEN C_VERIF_AR(R_AR_CMD_PM.REFERENCEPM);
    FETCH C_VERIF_AR INTO R_VERIF_AR;
    vFoundAR := C_VERIF_AR%FOUND;
    CLOSE C_VERIF_AR;*/

    IF /*not vFoundAR AND*/ vIdPmTrt IS NOT NULL  THEN
      BEGIN
        NAT_FF1_TRT_FLX.TRT_ARCMD_IN(R_AR_CMD_PM.FILE_ID,
                                     R_AR_CMD_PM.REFERENCEPM,
                                     R_AR_CMD_PM.REFERENCECOMMANDEPMINTERNEOC,
                                     R_AR_CMD_PM.DATEARCOMMANDEPM,
                                     R_AR_CMD_PM.REFERENCEPRESTATIONPM,
                                     R_AR_CMD_PM.ETATARCOMMANDEPM,
                                     R_AR_CMD_PM.MOTIFKOARCOMMANDEPM
                                     );
        NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_AR_CMD_PM.REFERENCEPM,P_FILE_ID);

        OPEN C_INFO_IFC;
        FETCH C_INFO_IFC INTO R_INFO_IFC;
        CLOSE C_INFO_IFC;

        NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                          P_TYP_IFC     => 'IN',
                          P_DATTRT   => SYSDATE,
                          P_IDPM     => vIdPmTrt,
                          P_CODOI    => 'FTEL',
                          P_COD_PART => NULL,
                          P_IFC_ID   => R_INFO_IFC.IFC_ID,
                          P_PRM_ID   => R_INFO_IFC.PRM_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors de l''insert dans la table fonctionnelle  AR_CMD_PM','SQLERRM', SQLERRM,'','');
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      END;
    ELSE
      plog.ERROR('AR existe deja pour ce PM','REFERENCEPM', R_AR_CMD_PM.REFERENCEPM,'','');
      plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
    END IF;

  END;

 -------------------------------------------------------------------------------
  -- Post traitement du fichier AR MAD NRO PM
  -- fichier de CR de commande de lien
  -- %Param P_FILE_ID  Identifiant informatique du fichier
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_ARCMD_PM_IN_AXIO_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
  CURSOR C_AR_CMD_PM IS
    SELECT REFERENCEPM,
           REFERENCECOMMANDEPMINTERNEOC,
           TO_DATE(DATEARCOMMANDEPM,'YYYY/MM/DD') AS DATEARCOMMANDEPM,
           REFERENCEPRESTATIONPM,
           ETATARCOMMANDEPM,
           MOTIFARCOMMANDEPM,
           DATE_IMP,
           FILE_ID
      FROM AR_CMD_PM_AXIO_31_TMP
     WHERE FILE_ID = P_FILE_ID;

    R_AR_CMD_PM C_AR_CMD_PM%ROWTYPE;

    vIdPmTrt       VARCHAR2(255);

    vCodOi REF_OI.COD_OI%TYPE;

  CURSOR C_INFO_IFC IS
    SELECT f.IFC_ID,
           f.PRM_ID
      FROM FILE_IO f
     WHERE f.FILE_ID = P_FILE_ID;
  R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
     vCodOi := NAT_FTTH_OI.GET_OI(P_FILE_ID);
    BEGIN
      SELECT DISTINCT REFERENCEPM
        INTO vIdPmTrt
        FROM AR_CMD_PM_AXIO_31_TMP a
       WHERE a.FILE_ID = P_FILE_ID;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la recuperation de l''IDPM de la table temp','SQLERRM', SQLERRM,'','');
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;

    OPEN C_AR_CMD_PM;
    FETCH C_AR_CMD_PM INTO R_AR_CMD_PM;

    IF vIdPmTrt IS NOT NULL  THEN
      BEGIN
        NAT_FF1_TRT_FLX.TRT_ARCMD_IN(R_AR_CMD_PM.FILE_ID,
                                     R_AR_CMD_PM.REFERENCEPM,
                                     R_AR_CMD_PM.REFERENCECOMMANDEPMINTERNEOC,
                                     R_AR_CMD_PM.DATEARCOMMANDEPM,
                                     R_AR_CMD_PM.REFERENCEPRESTATIONPM,
                                     R_AR_CMD_PM.ETATARCOMMANDEPM,
                                     R_AR_CMD_PM.MOTIFARCOMMANDEPM
                                     );
        NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_AR_CMD_PM.REFERENCEPM,P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors de l''insert dans la table fonctionnelle  AR_CMD_PM','SQLERRM', SQLERRM,'','');
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      END;
    ELSE
      plog.ERROR('AR existe deja pour ce PM','REFERENCEPM', R_AR_CMD_PM.REFERENCEPM,'','');
      plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
    END IF;
    CLOSE C_AR_CMD_PM;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => R_AR_CMD_PM.REFERENCEPM,
                         P_CODOI    => vCodOi,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
  END;

  -------------------------------------------------------------------------------
  -- Post traitement du fichier AR Commande PM SIEA 3.1
  -- fichier de CR de commande de lien
  -- %Param P_FILE_ID  Identifiant informatique du fichier
  -------------------------------------------------------------------------------
  PROCEDURE POS_TRT_ARCMD_IN_SIEA_V31 (P_FILE_ID IN FILE_IO.FILE_ID%TYPE) IS
    CURSOR C_AR_CMD_PM IS
      SELECT REFERENCEPM,
             REFERENCECOMMANDEPMINTERNEOC,
             TO_DATE(DATEARCOMMANDEPM,'YYYY/MM/DD') AS DATEARCOMMANDEPM,
             REFERENCEPRESTATIONPM,
             ETATARCOMMANDEPM,
             MOTIFARCOMMANDEPM,
             DATE_IMP,
             FILE_ID
        FROM AR_CMD_PM_SIEA_31_TMP
       WHERE FILE_ID = P_FILE_ID;

      R_AR_CMD_PM C_AR_CMD_PM%ROWTYPE;

      vIdPmTrt       VARCHAR2(255);
      vCodOi REF_OI.COD_OI%TYPE;

    CURSOR C_INFO_IFC IS
      SELECT f.IFC_ID,
             f.PRM_ID
        FROM FILE_IO f
       WHERE f.FILE_ID = P_FILE_ID;
    R_INFO_IFC C_INFO_IFC%ROWTYPE;
  BEGIN
    vCodOi := GET_OI(P_FILE_ID);
    BEGIN
      SELECT DISTINCT REFERENCEPM
        INTO vIdPmTrt
        FROM AR_CMD_PM_SIEA_31_TMP a
       WHERE a.FILE_ID = P_FILE_ID;
    EXCEPTION
      WHEN OTHERS THEN
         plog.ERROR('Erreur lors de la recuperation de l''IDPM de la table temp','SQLERRM', SQLERRM,'','');
         plog.full_error_backtrace('File_ID',P_FILE_ID);
         plog.full_call_stack('File_ID',P_FILE_ID);
    END;

    OPEN C_AR_CMD_PM;
    FETCH C_AR_CMD_PM INTO R_AR_CMD_PM;

    IF vIdPmTrt IS NOT NULL  THEN
      BEGIN
        NAT_FF1_TRT_FLX.TRT_ARCMD_IN(R_AR_CMD_PM.FILE_ID,
                                     R_AR_CMD_PM.REFERENCEPM,
                                     R_AR_CMD_PM.REFERENCECOMMANDEPMINTERNEOC,
                                     R_AR_CMD_PM.DATEARCOMMANDEPM,
                                     R_AR_CMD_PM.REFERENCEPRESTATIONPM,
                                     R_AR_CMD_PM.ETATARCOMMANDEPM,
                                     R_AR_CMD_PM.MOTIFARCOMMANDEPM
                                     );
        NAT_IFC_TRT.UPDATE_LIBVAL1('IdPM',R_AR_CMD_PM.REFERENCEPM,P_FILE_ID);
      EXCEPTION
        WHEN OTHERS THEN
          plog.ERROR('Erreur lors de l''insert dans la table fonctionnelle  AR_CMD_PM','SQLERRM', SQLERRM,'','');
          plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
          plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      END;
    ELSE
      plog.ERROR('AR existe deja pour ce PM','REFERENCEPM', R_AR_CMD_PM.REFERENCEPM,'','');
      plog.full_error_backtrace('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
      plog.full_call_stack('File_ID',P_FILE_ID,'IdPM',R_AR_CMD_PM.REFERENCEPM);
    END IF;
    CLOSE C_AR_CMD_PM;

    OPEN C_INFO_IFC;
    FETCH C_INFO_IFC INTO R_INFO_IFC;
    CLOSE C_INFO_IFC;

    NAT_FF1.INS_FIC_FTTH(P_FILE_ID  => P_FILE_ID,
                         P_TYP_IFC  => 'IN',
                         P_DATTRT   => SYSDATE,
                         P_IDPM     => R_AR_CMD_PM.REFERENCEPM,
                         P_CODOI    => vCodOi,
                         P_COD_PART => NULL,
                         P_IFC_ID   => R_INFO_IFC.IFC_ID,
                         P_PRM_ID   => R_INFO_IFC.PRM_ID);
  END;

---------------------------------------------------------------------------------
-- Pour la récupération du nombre de records DEPLOYE à partir des tables temporaire
---------------------------------------------------------------------------------
FUNCTION GET_FTTH_NB_REC_DPL(P_TBL_NAME IN VARCHAR2)
  RETURN SYS_REFCURSOR IS
  V_CUR SYS_REFCURSOR;
  L_ARGUMENT_TABLE ARGUMENT_TABLE := ARGUMENT_TABLE();
  L_CRITERIA_TABLE CRITERIA_TABLE := CRITERIA_TABLE();
BEGIN
  CMN_SQL_DYN.SET_CRITERIA(L_CRITERIA_TABLE, '$FROM$','P_TBL_NAME');
  CMN_SQL_DYN.SET_ARGUMENT_UNBIND(L_ARGUMENT_TABLE,'P_TBL_NAME',P_TBL_NAME);
  V_CUR := CMN_SQL_DYN.EXECUTE('NAT_FTTH_OI.GET_FTTH_NB_REC_DPL',L_CRITERIA_TABLE,L_ARGUMENT_TABLE);
  RETURN V_CUR;
END;

  ---------------------------------------------------
  -- lancement des interfaces FREE
  --------------------------------------------------
  PROCEDURE RUN_IFC_IN_FREE IS
  BEGIN
   -- plog.init_app(LOG_SHELL_OI_FREE,P_SESSION);
    plog.info('Debut Traitement IFC OI_FREE');

    -- Interface Depot
    CMN_IFC.CHARGER_INTERFACE('FTTH_DEPOT_IN_FREE');

    -- Purge des fichiers (Histo et Delta)
    CMN_IFC.CHARGER_INTERFACE('FTTH_PURGE_FREE_REJET',0);

     -- Récupération des IPE pour le chargement dans IPETMP
    CMN_IFC.CHARGER_INTERFACE('FTTH_FREE_IPETMP_IN');
    IF NAT_FF1.CAN_RUN_TRT_IPE(P_COD_PART_FLUX => 'FREE') = 1 THEN
      -- IPE
      CMN_IFC.CHARGER_INTERFACE('FTTH_IPE_IN_FREE');
      NAT_FF1.SET_PART_FLX_IPE_TRT(P_COD_PART_FLUX => 'FREE');
    END IF;

    cmn_ifc.CHARGER_INTERFACE('FTTH_CRMADPM_IN_FREE');
    -- Traitement de l'IPE test
    cmn_ifc.CHARGER_INTERFACE('FTTH_IPE_IN_TEST');
    cmn_ifc.CHARGER_INTERFACE('FTTH_ARCMD_IN_FREE');
    cmn_ifc.CHARGER_INTERFACE('FTTH_CRNA_IN_FREE');
     --> Pas de J3M pour free pour l'instant
       --> cmn_ifc.CHARGER_INTERFACE('FTTH_J3M_IN_FREE');
     --> Pas d'infosyndic pour free pour l'instant
     cmn_ifc.CHARGER_INTERFACE('FTTH_HBCRIS_IN_FREE');

         -- Interface de Rejet
    CMN_IFC.CHARGER_INTERFACE('FTTH_FREE_REJ_IN');

  EXCEPTION
    WHEN OTHERS  THEN
      plog.error('Fin Traitement IFC OI_FREE:KO','SQLERRM', SQLERRM  );
  END;

END;
/
show error

